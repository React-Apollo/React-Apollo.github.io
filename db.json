{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/react.ico","path":"react.ico","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/react.ico","path":"images/react.ico","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1f3a62f1b390e9fad436456df47858f08087172d","modified":1514021249000},{"_id":"themes/next/.DS_Store","hash":"71be92674c2bbadf3fa247c8f5cfbfe3a33cb34e","modified":1497373814000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496389408000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496389408000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1496389408000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1496389408000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496389408000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496389408000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496389408000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496389408000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496389408000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496389408000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496389408000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496389408000},{"_id":"themes/next/_config.yml","hash":"49ec848fddae70e9c4a0e9fbb49dc792d053123f","modified":1497374094000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1496389408000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496389408000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496389408000},{"_id":"source/.git/COMMIT_EDITMSG","hash":"3815187d561f9c4f9e5da73d48893461b5c993f8","modified":1496522606000},{"_id":"source/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496522175000},{"_id":"source/.git/config","hash":"40060afe37ce847ba4f87d86c2a40806e2e151c3","modified":1496522175000},{"_id":"source/.git/index","hash":"fd004f29534478796c7a96a8d77d858d03cfa678","modified":1496522606000},{"_id":"source/.git/sourcetreeconfig","hash":"67f886476f2f9fd6c582779b01bbbb81d047e94c","modified":1514791251000},{"_id":"source/_posts/.DS_Store","hash":"47626b51c3ef6d591b39ec5e673daccc695cd783","modified":1496519742000},{"_id":"source/_posts/Disssection-Twitter-s-Redux-Store.md","hash":"4735be6f038e05241439981e88caa03a6f2a1317","modified":1497228764000},{"_id":"source/_posts/Awesome Redux.md","hash":"1952ccfdee776902cb944bf250509d1c554b8f5c","modified":1490272895000},{"_id":"source/_posts/Immutable collections for JavaScript copy.md","hash":"947eddc99358e9befd8bb63d0b91dd28db735211","modified":1496560744000},{"_id":"source/_posts/redux-logic.md","hash":"9ca050d5c211a5ee3cf9565fe75062a3854ff490","modified":1490274069000},{"_id":"source/_posts/JavaScript  Reducer  practice.md","hash":"d369348c0156d5957ac2ec9b5c5fa3bd63880c07","modified":1497228689000},{"_id":"source/_posts/使用React-Redux-redux-sage构建图片库-翻译.md","hash":"5c04bd53b3c819b0d65764884a3b4787ab49ce68","modified":1497328378000},{"_id":"source/_posts/翻译-redux-undo-redo-reducer增强组件.md","hash":"779f436b84313dbf87b56b9baa04759bcdd6a517","modified":1496520442000},{"_id":"source/about/index.md","hash":"507996d1aad09278bc94a499deecb92db633801e","modified":1463684696000},{"_id":"source/categories/.DS_Store","hash":"ebde47f88ed693777d7c74be6f546b28f768f130","modified":1496518108000},{"_id":"source/categories/index.md","hash":"f886d1f3fa50cf1e6600eee919549196b52ee8ea","modified":1496516958000},{"_id":"source/tags/index.md","hash":"f5b5beb4807cf8a84104964ceddae64b7eceb5d6","modified":1496518298000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1496389408000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1496389408000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496389408000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496389408000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496389408000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496389408000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496389408000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496389408000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496389408000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496389408000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496389408000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496389408000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1496389408000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496389408000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496389408000},{"_id":"themes/next/layout/.DS_Store","hash":"a84732a357e27a7f6771d576fc54ca95ef3f82ab","modified":1497400300000},{"_id":"themes/next/layout/_layout.swig","hash":"2cbf3fe2e29c84c46769f774c82232a3895c8395","modified":1497373934000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1496389408000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1496389408000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1496389408000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1496389408000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1496389408000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1496389408000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1496389408000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496389408000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496389408000},{"_id":"themes/next/scripts/.DS_Store","hash":"71d3e51bee229014e959d084358af1fb45ab82d9","modified":1497325048000},{"_id":"themes/next/source/.DS_Store","hash":"3eebf3c9574f564e02c9776130c368b556f9a09e","modified":1497373806000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496389408000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496389408000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496389408000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"source/.git/logs/HEAD","hash":"8476a665116be1f290a28c4840a6eb23785a6110","modified":1496522606000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496389408000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496389408000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1496389408000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496389408000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1496389408000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496389408000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1496389408000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496389408000},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"95c5b07b42fc7a2544a9762cea38b961427c1d75","modified":1497325099000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1496389408000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1496389408000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1496389408000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1496389408000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496389408000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496389408000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496389408000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496389408000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496389408000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1496389408000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496389408000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496389408000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1496389408000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496389408000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1496389408000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496389408000},{"_id":"themes/next/layout/highlight/.DS_Store","hash":"5e7fd348c30b25cd92a44d5a7d81daf5a1454a92","modified":1497373592000},{"_id":"themes/next/layout/highlight/LICENSE","hash":"cd25196630fe891662ad77810f0f6dee5bc85ddc","modified":1427985794000},{"_id":"themes/next/layout/highlight/CHANGES.md","hash":"74060b189b3562bd68cc8807789eb431ecb52430","modified":1496144826000},{"_id":"themes/next/layout/highlight/highlight.pack.js","hash":"587a92b87f925aed9a47b151dbc09e87a224e29b","modified":1497318178000},{"_id":"themes/next/layout/highlight/README.md","hash":"087887d419ba2c138058e6fac56c24d838bb4114","modified":1467096322000},{"_id":"themes/next/layout/highlight/README.ru.md","hash":"3bb30d5980b6a10df92cf223cf9c35d884ebe1ba","modified":1467096322000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496389408000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496389408000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496389408000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496389408000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496389408000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1496389408000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1496389408000},{"_id":"themes/next/source/css/.DS_Store","hash":"a67f6a6bee97100d5b721544ec6bad6ec35727c2","modified":1497372447000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496389408000},{"_id":"themes/next/source/images/.DS_Store","hash":"2f9a9188e7a756474281077906512adeaa15027b","modified":1496519035000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496389408000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496389408000},{"_id":"themes/next/source/images/avatar.jpg","hash":"1e9444371803f4b3f51efd478e505feeb5f67726","modified":1489407591000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496389408000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496389408000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496389408000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496389408000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496389408000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496389408000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496389408000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496389408000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496389408000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496389408000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496389408000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496389408000},{"_id":"themes/next/source/js/.DS_Store","hash":"04d55661104a2b18fbd37a529fcca48e485e2829","modified":1497373799000},{"_id":"themes/next/source/lib/.DS_Store","hash":"1330c0a6bd33e71af351c135e7f02c25093697ba","modified":1497325163000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496389408000},{"_id":"source/.git/objects/15/70b958893ae9a36a8d8eba3e4881316f689bf4","hash":"b3ae21256672aedd82901c3ff6bf6f8e1f04efe0","modified":1496522606000},{"_id":"source/.git/objects/07/a5ae4d987eca5cc8d82450d7bec023c0344219","hash":"1f5f8198009c38794dbf72c558250d320f4509a0","modified":1496522599000},{"_id":"source/.git/objects/11/eac6ce105b04c14db1ecc1b6cdacfb62826514","hash":"2cf718cf3fb0a1528adebf7ee94d821f118efbd2","modified":1496522599000},{"_id":"source/.git/objects/3c/a7ee066997f5b84daf5098f92f2526200a5bd2","hash":"062a56699cc3b881e28af707086c044ea83cb83a","modified":1496522606000},{"_id":"source/.git/objects/46/5c3b5af175ee66ad22e6c50be330c16e2c1fc9","hash":"f236f6a826dbbd755deb37e18df4994e6b6831ec","modified":1496522606000},{"_id":"source/.git/objects/4f/2f613c151c6dbe7e2bb870e5b1355d6e88ef6f","hash":"5f43bbb2f1035d388321600f3f85868612cb4ee6","modified":1496522599000},{"_id":"source/.git/objects/44/e3bfe3fc44abf2cd90c6b816575092a9b2283a","hash":"e135f95bc52b6b3385093cbde85560b252a4a75e","modified":1496522599000},{"_id":"source/.git/objects/4f/d94340621f7a7d217ff9743000f7ce53e04816","hash":"17f06270e7a839d633515355e13df4aac4eb3926","modified":1496522606000},{"_id":"source/.git/objects/50/f86008687449e95f1865ea0c0d525288498bb2","hash":"958861fe5c7f0800b2dd602225f14802a1ab37da","modified":1496522599000},{"_id":"source/.git/objects/b8/13e2e84b9f268e85e22903a05fe8ea6be370dc","hash":"afd4697c658a1029e327f79cf276530f48c5ff62","modified":1496522606000},{"_id":"source/.git/objects/57/13aa4f403e0f1a45146b593ab91fae5fe16e8f","hash":"21c4e7d278f5b3a03d57076fd3aa2ae0f14b88fb","modified":1496522599000},{"_id":"source/.git/objects/bc/cf33bb7ef004cfeb3b1e55852bcc501246f28d","hash":"73bb0e06f15e114114a0641352cf051cb5a8d037","modified":1496522606000},{"_id":"source/.git/objects/aa/77fd930a191f12817a62efc9877064df3a843c","hash":"d024f0990060551615381c03d55b19c14e37616a","modified":1496522599000},{"_id":"source/.git/refs/heads/master","hash":"be27ca222d23e9a187a7614b700e2e938ae05a9a","modified":1496522606000},{"_id":"source/.git/objects/fd/e7472eecf79f98189ed60da04876ce865bb968","hash":"306b7ed1a73e4a0e4aae449dcbcf26381d2e83c6","modified":1496522599000},{"_id":"source/.git/objects/d5/e3f379596e15146691210bc1e08a3c326f766a","hash":"0e377fd2ba0122055a01f181d149e503b5178040","modified":1496522599000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496389408000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496389408000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1496389408000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496389408000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496389408000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496389408000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496389408000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496389408000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496389408000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496389408000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1496389408000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496389408000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496389408000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496389408000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1496389408000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496389408000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496389408000},{"_id":"themes/next/layout/highlight/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1452034766000},{"_id":"themes/next/layout/highlight/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1474382616000},{"_id":"themes/next/layout/highlight/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1474382616000},{"_id":"themes/next/layout/highlight/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1470752052000},{"_id":"themes/next/layout/highlight/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1470752052000},{"_id":"themes/next/layout/highlight/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1467096322000},{"_id":"themes/next/layout/highlight/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1427985794000},{"_id":"themes/next/layout/highlight/styles/purebasic.css","hash":"f353a2cedf3f261a0676fce7c824bdd2e8197775","modified":1463458578000},{"_id":"themes/next/layout/highlight/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1456209338000},{"_id":"themes/next/layout/highlight/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1496144826000},{"_id":"themes/next/layout/highlight/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1448968368000},{"_id":"themes/next/layout/highlight/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1496144826000},{"_id":"themes/next/layout/highlight/styles/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1463458578000},{"_id":"themes/next/layout/highlight/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1448968368000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"6afe009473c3986c52db7002063f491acecfa0a7","modified":1497372447000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1496389408000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496389408000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/.DS_Store","hash":"f2d4af1b6865688121c0d2b2f4a550af81fd8aad","modified":1496515431000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496389408000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496389408000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"80bda49a627b69e27e6869836f32b36149a8438c","modified":1496490698000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1496487758000},{"_id":"themes/next/source/js/src/.DS_Store","hash":"75b6b0add2c3cc773df982523b57859bafcdbe71","modified":1497325140000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496389408000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496389408000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496389408000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496389408000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496389408000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496389408000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496389408000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496389408000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496389408000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496389408000},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1496389408000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496389408000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1496389408000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496389408000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496389408000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496389408000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1496389408000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496389408000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496389408000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496389408000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496389408000},{"_id":"source/.git/logs/refs/heads/master","hash":"8476a665116be1f290a28c4840a6eb23785a6110","modified":1496522606000},{"_id":"themes/next/source/react.ico","hash":"94365cd5eecdc64fc1817fdc9e600d0b68416124","modified":1496518919000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496389408000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"00561fd3978ace6704eff2c06425cc4892753ff1","modified":1497372842000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496389408000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496389408000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496389408000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496389408000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496389408000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496389408000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496389408000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496389408000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496389408000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496389408000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496389408000},{"_id":"themes/next/source/images/react.ico","hash":"94365cd5eecdc64fc1817fdc9e600d0b68416124","modified":1496518919000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496389408000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1496389408000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496389408000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496389408000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496389408000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496389408000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496389408000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496389408000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496389408000}],"Category":[{"name":"Redux","_id":"cjbvx5fl90005qrezzmayf42y"},{"name":"翻译","_id":"cjbvx5flp000jqrez5xyxnqcw"}],"Data":[],"Page":[{"title":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ncomments: false\n---","date":"2017-06-03T10:49:46.000Z","updated":"2016-05-19T19:04:56.000Z","path":"about/index.html","_id":"cjbvx5fl10001qrezq36um9fq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2016-07-05T03:39:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"\ntitle: 分类\ndate: 2016-07-05 11:39:04\ntype: \"categories\"\n---","updated":"2017-06-03T19:09:18.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjbvx5fru0012qrez15xlko07","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-03T19:30:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-04 03:30:57\ntype: \"tags\"\n---\n","updated":"2017-06-03T19:31:38.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjbvx5frw0013qrez9s8w89rh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Javascript Reducer函数实战","date":"2017-06-08T20:01:45.000Z","_content":">javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.\n\n本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.\n\nRedux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些`键值对`. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？\n\n#####下面我们就贯彻以上的理念,来研究一些基础的内容。\n第一个就是Reducer函数,参考 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array) 文档\n\n直接看代码例子\n\n```\n//accumulator是累加值,currentValue是当前遍历的值\n[0,1,2,3,4].reduce( (accumulator, currentValue, currentIndex, array) => {\n  return accumulator + currentValue;\n}, 10);\n```\n___\n| callback | accumulate |currentValue  |currentIndex  | array |return  |\n|:-|:-|:-|:-|:-|:-|\n|第一次调用 |10  |0  |0  | [0,1,2,3,4] | 10 |\n|第二次调用 | 10 |1  | 1 | [0,1,2,3,4] | 11 |\n|第三次调用 | 11 | 2 | 2 | [0,1,2,3,4] |13  |\n|第四次调用 | 13 | 3 |3  | [0,1,2,3,4] | 16 |\n|第五次调用 | 16 | 4 |4  | [0,1,2,3,4] |20  |\n\n第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.\n\n第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。\n也就是返回 10+array[1]=11.\n\n第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。\n后面的几个遍历就和第二个遍历一样了。\n\n\n\n*数组扁平化*\n```\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n    return a.concat(b); //要了解concat的使用,返回的是\n    //数组合并的返回对象\n}, []); //起始是空数组\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n___\n\n就这么简单,但是灵活变动起来也不是太好理解啊\n看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法\n\n```\n var Types = { //类型\n  NUMBER: 'NUMBER',\n  DECIMAL: 'DECIMAL',\n  SIGN: 'SIGN'\n};\n\nvar inputs = [\n  {value: 1, type: Types.NUMBER},\n  {value: 2, type: Types.NUMBER},\n  {value: 3, type: Types.NUMBER},\n  {value: 4, type: Types.NUMBER},\n  {value: 5, type: Types.NUMBER},\n  {value: 6, type: Types.NUMBER},\n  {value: 7, type: Types.NUMBER},\n  {value: 8, type: Types.NUMBER},\n  {value: 9, type: Types.NUMBER},\n  {value: '+/-', type: Types.SIGN},\n  {value: 0, type: Types.NUMBER},\n  {value: '.', type: Types.DECIMAL},\n];\n//操作符的配置\nvar operations = [\n  {value: '/', color: '#c77ccc', altColor: '#b16eb7', operation: OPERATION_DIVIDE},\n  {value: '-', color: '#f8b055', altColor: '#dc9c4c', operation: OPERATION_SUBTRACT},\n  {value: '+', color: '#f796d2', altColor: '#e088be', operation: OPERATION_ADD},\n  {value: 'x', color: '#6fcdf4', altColor: '#65badd', operation: OPERATION_MULTIPLY}\n];\n\nrenderInputRows() {\n    var {inputNumber, inputSigned, inputDecimal} = this.props;//注意在redux中那个地方返回了这三个函数的名字\n    return inputs.reduce((collection, input) => {//这里的reduce是怎么用的呢？\n      if (collection[collection.length - 1].length === 3) {//为什么等于3\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      return collection;\n    }, [[]]).map((group, rowIndex) => {\n      var columns = group.map((item, columnIndex) => {//看看map的方法\n        return (\n          <TouchableHighlight\n            key={'inputRow_' + rowIndex + '_inputCol_' + columnIndex}\n            underlayColor=\"#ededed\"\n            style={styles.input}\n            onPress={() => { //dispatch方法\n              if (item.type === Types.NUMBER) {\n                inputNumber(item.value);\n              } else if (item.type === Types.DECIMAL) {\n                inputDecimal();\n              } else if (item.type === Types.SIGN) {\n                inputSigned();\n              }\n            }}>\n            <Text style={styles.inputText}>{item.value}</Text>\n          </TouchableHighlight>\n        );\n      });\n\n```\n\n\n看看这个数组的reducer方法的使用.[源代码在这里](https://github.com/benoitvallon/react-native-nw-react-calculator)\n\n这个我稍后再补充,会补充大神给我的解答.\n\n```\n var Types = {\n  NUMBER: 'NUMBER',\n  DECIMAL: 'DECIMAL',\n  SIGN: 'SIGN'\n}\n\nvar inputs = [\n  {value: 1, type: Types.NUMBER},\n  {value: 2, type: Types.NUMBER},\n  {value: 3, type: Types.NUMBER},\n  {value: 4, type: Types.NUMBER},\n  {value: 5, type: Types.NUMBER},\n  {value: 6, type: Types.NUMBER},\n  {value: 7, type: Types.NUMBER},\n  {value: 8, type: Types.NUMBER},\n  {value: 9, type: Types.NUMBER},\n  {value: '+/-', type: Types.SIGN},\n  {value: 0, type: Types.NUMBER},\n  {value: '.', type: Types.DECIMAL},\n];\n//这里其实是有一维数组转为二维数组，打印结构可以看到.\n//注意reduce的起始值就是一个二维数组.\nvar result = inputs.reduce((collection, input) => {\n      if (collection[collection.length - 1].length === 3) {\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      return collection;\n    }, [[]])\n\nconsole.log(result)\nconsole.table(result)\n```\n\n\n再看看下面这里两段代码\n```\nlet str = `name,  age,  hair\\nMerble,  35,  red\\nBob,  64,  blonde`;\nfunction lameCSV(str) {\n  return str.split('\\n').reduce(function(table, row){\n    table.push(row.split(',').map(function(c) {return c.trim();}));\n    return table\n  }, [[]]);\n};\nlameCSV(str);\n\n```\n___\n\n```\nvar arr=[0,1,2,3,4,5,6,7,8];\n var result = arr.reduce((collection, input) => {\n      if (collection[collection.length - 1].length === 3) {\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      console.log(collection);\n      return collection;\n    }, [[]]);\n```\n___\n[感谢大神的帮助,大神的github](https://github.com/zaxlct/baike_spider/issues/1)\nreduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.","source":"_posts/Disssection-Twitter-s-Redux-Store.md","raw":"---\ntitle: Javascript Reducer函数实战\ndate: 2017-06-09 04:01:45\ntags: [javacript,array] \n---\n>javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.\n\n本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.\n\nRedux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些`键值对`. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？\n\n#####下面我们就贯彻以上的理念,来研究一些基础的内容。\n第一个就是Reducer函数,参考 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array) 文档\n\n直接看代码例子\n\n```\n//accumulator是累加值,currentValue是当前遍历的值\n[0,1,2,3,4].reduce( (accumulator, currentValue, currentIndex, array) => {\n  return accumulator + currentValue;\n}, 10);\n```\n___\n| callback | accumulate |currentValue  |currentIndex  | array |return  |\n|:-|:-|:-|:-|:-|:-|\n|第一次调用 |10  |0  |0  | [0,1,2,3,4] | 10 |\n|第二次调用 | 10 |1  | 1 | [0,1,2,3,4] | 11 |\n|第三次调用 | 11 | 2 | 2 | [0,1,2,3,4] |13  |\n|第四次调用 | 13 | 3 |3  | [0,1,2,3,4] | 16 |\n|第五次调用 | 16 | 4 |4  | [0,1,2,3,4] |20  |\n\n第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.\n\n第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。\n也就是返回 10+array[1]=11.\n\n第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。\n后面的几个遍历就和第二个遍历一样了。\n\n\n\n*数组扁平化*\n```\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n    return a.concat(b); //要了解concat的使用,返回的是\n    //数组合并的返回对象\n}, []); //起始是空数组\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n___\n\n就这么简单,但是灵活变动起来也不是太好理解啊\n看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法\n\n```\n var Types = { //类型\n  NUMBER: 'NUMBER',\n  DECIMAL: 'DECIMAL',\n  SIGN: 'SIGN'\n};\n\nvar inputs = [\n  {value: 1, type: Types.NUMBER},\n  {value: 2, type: Types.NUMBER},\n  {value: 3, type: Types.NUMBER},\n  {value: 4, type: Types.NUMBER},\n  {value: 5, type: Types.NUMBER},\n  {value: 6, type: Types.NUMBER},\n  {value: 7, type: Types.NUMBER},\n  {value: 8, type: Types.NUMBER},\n  {value: 9, type: Types.NUMBER},\n  {value: '+/-', type: Types.SIGN},\n  {value: 0, type: Types.NUMBER},\n  {value: '.', type: Types.DECIMAL},\n];\n//操作符的配置\nvar operations = [\n  {value: '/', color: '#c77ccc', altColor: '#b16eb7', operation: OPERATION_DIVIDE},\n  {value: '-', color: '#f8b055', altColor: '#dc9c4c', operation: OPERATION_SUBTRACT},\n  {value: '+', color: '#f796d2', altColor: '#e088be', operation: OPERATION_ADD},\n  {value: 'x', color: '#6fcdf4', altColor: '#65badd', operation: OPERATION_MULTIPLY}\n];\n\nrenderInputRows() {\n    var {inputNumber, inputSigned, inputDecimal} = this.props;//注意在redux中那个地方返回了这三个函数的名字\n    return inputs.reduce((collection, input) => {//这里的reduce是怎么用的呢？\n      if (collection[collection.length - 1].length === 3) {//为什么等于3\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      return collection;\n    }, [[]]).map((group, rowIndex) => {\n      var columns = group.map((item, columnIndex) => {//看看map的方法\n        return (\n          <TouchableHighlight\n            key={'inputRow_' + rowIndex + '_inputCol_' + columnIndex}\n            underlayColor=\"#ededed\"\n            style={styles.input}\n            onPress={() => { //dispatch方法\n              if (item.type === Types.NUMBER) {\n                inputNumber(item.value);\n              } else if (item.type === Types.DECIMAL) {\n                inputDecimal();\n              } else if (item.type === Types.SIGN) {\n                inputSigned();\n              }\n            }}>\n            <Text style={styles.inputText}>{item.value}</Text>\n          </TouchableHighlight>\n        );\n      });\n\n```\n\n\n看看这个数组的reducer方法的使用.[源代码在这里](https://github.com/benoitvallon/react-native-nw-react-calculator)\n\n这个我稍后再补充,会补充大神给我的解答.\n\n```\n var Types = {\n  NUMBER: 'NUMBER',\n  DECIMAL: 'DECIMAL',\n  SIGN: 'SIGN'\n}\n\nvar inputs = [\n  {value: 1, type: Types.NUMBER},\n  {value: 2, type: Types.NUMBER},\n  {value: 3, type: Types.NUMBER},\n  {value: 4, type: Types.NUMBER},\n  {value: 5, type: Types.NUMBER},\n  {value: 6, type: Types.NUMBER},\n  {value: 7, type: Types.NUMBER},\n  {value: 8, type: Types.NUMBER},\n  {value: 9, type: Types.NUMBER},\n  {value: '+/-', type: Types.SIGN},\n  {value: 0, type: Types.NUMBER},\n  {value: '.', type: Types.DECIMAL},\n];\n//这里其实是有一维数组转为二维数组，打印结构可以看到.\n//注意reduce的起始值就是一个二维数组.\nvar result = inputs.reduce((collection, input) => {\n      if (collection[collection.length - 1].length === 3) {\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      return collection;\n    }, [[]])\n\nconsole.log(result)\nconsole.table(result)\n```\n\n\n再看看下面这里两段代码\n```\nlet str = `name,  age,  hair\\nMerble,  35,  red\\nBob,  64,  blonde`;\nfunction lameCSV(str) {\n  return str.split('\\n').reduce(function(table, row){\n    table.push(row.split(',').map(function(c) {return c.trim();}));\n    return table\n  }, [[]]);\n};\nlameCSV(str);\n\n```\n___\n\n```\nvar arr=[0,1,2,3,4,5,6,7,8];\n var result = arr.reduce((collection, input) => {\n      if (collection[collection.length - 1].length === 3) {\n        collection.push([]);\n      }\n      collection[collection.length-1].push(input);\n      console.log(collection);\n      return collection;\n    }, [[]]);\n```\n___\n[感谢大神的帮助,大神的github](https://github.com/zaxlct/baike_spider/issues/1)\nreduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.","slug":"Disssection-Twitter-s-Redux-Store","published":1,"updated":"2017-06-12T00:52:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5fkv0000qrez38u07dof","content":"<blockquote>\n<p>javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.</p>\n</blockquote>\n<p>本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.</p>\n<p>Redux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些<code>键值对</code>. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？</p>\n<p>#####下面我们就贯彻以上的理念,来研究一些基础的内容。<br>第一个就是Reducer函数,参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">MDN</a> 文档</p>\n<p>直接看代码例子</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//accumulator是累加值,currentValue是当前遍历的值</span></div><div class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce( (accumulator, currentValue, currentIndex, array) =&gt; &#123;</div><div class=\"line\">  return accumulator + currentValue;</div><div class=\"line\">&#125;, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">callback</th>\n<th style=\"text-align:left\">accumulate</th>\n<th style=\"text-align:left\">currentValue</th>\n<th style=\"text-align:left\">currentIndex</th>\n<th style=\"text-align:left\">array</th>\n<th style=\"text-align:left\">return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">第一次调用</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第二次调用</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第三次调用</td>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">13</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第四次调用</td>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">16</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第五次调用</td>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">20</td>\n</tr>\n</tbody>\n</table>\n<p>第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.</p>\n<p>第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。<br>也就是返回 10+array[1]=11.</p>\n<p>第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。<br>后面的几个遍历就和第二个遍历一样了。</p>\n<p><em>数组扁平化</em><br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var flattened = <span class=\"string\">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a, b)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">concat</span>(b); //要了解<span class=\"built_in\">concat</span>的使用,返回的是</div><div class=\"line\">    //数组合并的返回对象</div><div class=\"line\">&#125;, []); //起始是空数组</div><div class=\"line\">// flattened is [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure></p>\n<hr>\n<p>就这么简单,但是灵活变动起来也不是太好理解啊<br>看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> Types = &#123; <span class=\"comment\">//类型</span></div><div class=\"line\">  NUMBER: <span class=\"string\">'NUMBER'</span>,</div><div class=\"line\">  DECIMAL: <span class=\"string\">'DECIMAL'</span>,</div><div class=\"line\">  SIGN: <span class=\"string\">'SIGN'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> inputs = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">1</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">2</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">3</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">4</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">5</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">6</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">7</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">8</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">9</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+/-'</span>, type: Types.SIGN&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">0</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'.'</span>, type: Types.DECIMAL&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">//操作符的配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> operations = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'/'</span>, color: <span class=\"string\">'#c77ccc'</span>, altColor: <span class=\"string\">'#b16eb7'</span>, operation: OPERATION_DIVIDE&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'-'</span>, color: <span class=\"string\">'#f8b055'</span>, altColor: <span class=\"string\">'#dc9c4c'</span>, operation: OPERATION_SUBTRACT&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+'</span>, color: <span class=\"string\">'#f796d2'</span>, altColor: <span class=\"string\">'#e088be'</span>, operation: OPERATION_ADD&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'x'</span>, color: <span class=\"string\">'#6fcdf4'</span>, altColor: <span class=\"string\">'#65badd'</span>, operation: OPERATION_MULTIPLY&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">renderInputRows() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> &#123;inputNumber, inputSigned, inputDecimal&#125; = <span class=\"keyword\">this</span>.props;<span class=\"comment\">//注意在redux中那个地方返回了这三个函数的名字</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inputs.reduce((collection, input) =&gt; &#123;<span class=\"comment\">//这里的reduce是怎么用的呢？</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;<span class=\"comment\">//为什么等于3</span></div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length<span class=\"number\">-1</span>].push(input);</div><div class=\"line\">      <span class=\"keyword\">return</span> collection;</div><div class=\"line\">    &#125;, [[]]).map((<span class=\"keyword\">group</span>, rowIndex) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> columns = <span class=\"keyword\">group</span>.map((item, columnIndex) =&gt; &#123;<span class=\"comment\">//看看map的方法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">          &lt;TouchableHighlight</div><div class=\"line\">            key=&#123;<span class=\"string\">'inputRow_'</span> + rowIndex + <span class=\"string\">'_inputCol_'</span> + columnIndex&#125;</div><div class=\"line\">            underlayColor=<span class=\"string\">\"#ededed\"</span></div><div class=\"line\">            style=&#123;styles.input&#125;</div><div class=\"line\">            onPress=&#123;() =&gt; &#123; <span class=\"comment\">//dispatch方法</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (item.type === Types.NUMBER) &#123;</div><div class=\"line\">                inputNumber(item.<span class=\"keyword\">value</span>);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.type === Types.DECIMAL) &#123;</div><div class=\"line\">                inputDecimal();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.type === Types.SIGN) &#123;</div><div class=\"line\">                inputSigned();</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;styles.inputText&#125;&gt;&#123;item.<span class=\"keyword\">value</span>&#125;&lt;/Text&gt;</div><div class=\"line\">          &lt;/TouchableHighlight&gt;</div><div class=\"line\">        );</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p>看看这个数组的reducer方法的使用.<a href=\"https://github.com/benoitvallon/react-native-nw-react-calculator\" target=\"_blank\" rel=\"external\">源代码在这里</a></p>\n<p>这个我稍后再补充,会补充大神给我的解答.</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var Types = &#123;</div><div class=\"line\">  <span class=\"keyword\">NUMBER</span>: <span class=\"string\">'NUMBER'</span>,</div><div class=\"line\">  <span class=\"keyword\">DECIMAL</span>: <span class=\"string\">'DECIMAL'</span>,</div><div class=\"line\">  <span class=\"built_in\">SIGN</span>: <span class=\"string\">'SIGN'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var inputs = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">1</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">2</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">3</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">4</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">5</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">6</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">7</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">8</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">9</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+/-'</span>, <span class=\"keyword\">type</span>: Types.<span class=\"built_in\">SIGN</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">0</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'.'</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">DECIMAL</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\">//这里其实是有一维数组转为二维数组，打印结构可以看到.</div><div class=\"line\">//注意reduce的起始值就是一个二维数组.</div><div class=\"line\">var result = inputs.reduce((collection, input) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length-<span class=\"number\">1</span>].push(input);</div><div class=\"line\">      <span class=\"keyword\">return</span> collection;</div><div class=\"line\">    &#125;, [[]])</div><div class=\"line\"></div><div class=\"line\">console.<span class=\"built_in\">log</span>(result)</div><div class=\"line\">console.table(result)</div></pre></td></tr></table></figure>\n<p>再看看下面这里两段代码<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let str = `name,  age,  hair\\nMerble,  <span class=\"number\">35</span>,  red\\nBob,  <span class=\"number\">64</span>,  blonde`;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lameCSV</span><span class=\"params\">(str)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">'\\n'</span>).reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(table, row)</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">table</span>.push(row.split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(c)</span></span> &#123;<span class=\"keyword\">return</span> c.trim();&#125;));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">table</span></div><div class=\"line\">  &#125;, <span class=\"string\">[[]]</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">lameCSV(str);</div></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"> var result = arr.reduce((collection, input) =&gt; &#123;</div><div class=\"line\">      if (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length<span class=\"number\">-1</span>].push(input);</div><div class=\"line\">      console.log(collection);</div><div class=\"line\">      return collection;</div><div class=\"line\">    &#125;, [[]]);</div></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/zaxlct/baike_spider/issues/1\" target=\"_blank\" rel=\"external\">感谢大神的帮助,大神的github</a><br>reduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.</p>\n</blockquote>\n<p>本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.</p>\n<p>Redux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些<code>键值对</code>. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？</p>\n<p>#####下面我们就贯彻以上的理念,来研究一些基础的内容。<br>第一个就是Reducer函数,参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">MDN</a> 文档</p>\n<p>直接看代码例子</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//accumulator是累加值,currentValue是当前遍历的值</span></div><div class=\"line\">[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce( (accumulator, currentValue, currentIndex, array) =&gt; &#123;</div><div class=\"line\">  return accumulator + currentValue;</div><div class=\"line\">&#125;, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">callback</th>\n<th style=\"text-align:left\">accumulate</th>\n<th style=\"text-align:left\">currentValue</th>\n<th style=\"text-align:left\">currentIndex</th>\n<th style=\"text-align:left\">array</th>\n<th style=\"text-align:left\">return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">第一次调用</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第二次调用</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第三次调用</td>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">13</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第四次调用</td>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">16</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第五次调用</td>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[0,1,2,3,4]</td>\n<td style=\"text-align:left\">20</td>\n</tr>\n</tbody>\n</table>\n<p>第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.</p>\n<p>第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。<br>也就是返回 10+array[1]=11.</p>\n<p>第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。<br>后面的几个遍历就和第二个遍历一样了。</p>\n<p><em>数组扁平化</em><br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var flattened = <span class=\"string\">[[0, 1], [2, 3], [4, 5]]</span>.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(a, b)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"built_in\">concat</span>(b); //要了解<span class=\"built_in\">concat</span>的使用,返回的是</div><div class=\"line\">    //数组合并的返回对象</div><div class=\"line\">&#125;, []); //起始是空数组</div><div class=\"line\">// flattened is [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure></p>\n<hr>\n<p>就这么简单,但是灵活变动起来也不是太好理解啊<br>看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> Types = &#123; <span class=\"comment\">//类型</span></div><div class=\"line\">  NUMBER: <span class=\"string\">'NUMBER'</span>,</div><div class=\"line\">  DECIMAL: <span class=\"string\">'DECIMAL'</span>,</div><div class=\"line\">  SIGN: <span class=\"string\">'SIGN'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> inputs = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">1</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">2</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">3</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">4</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">5</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">6</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">7</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">8</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">9</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+/-'</span>, type: Types.SIGN&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">0</span>, type: Types.NUMBER&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'.'</span>, type: Types.DECIMAL&#125;,</div><div class=\"line\">];</div><div class=\"line\"><span class=\"comment\">//操作符的配置</span></div><div class=\"line\"><span class=\"keyword\">var</span> operations = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'/'</span>, color: <span class=\"string\">'#c77ccc'</span>, altColor: <span class=\"string\">'#b16eb7'</span>, operation: OPERATION_DIVIDE&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'-'</span>, color: <span class=\"string\">'#f8b055'</span>, altColor: <span class=\"string\">'#dc9c4c'</span>, operation: OPERATION_SUBTRACT&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+'</span>, color: <span class=\"string\">'#f796d2'</span>, altColor: <span class=\"string\">'#e088be'</span>, operation: OPERATION_ADD&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'x'</span>, color: <span class=\"string\">'#6fcdf4'</span>, altColor: <span class=\"string\">'#65badd'</span>, operation: OPERATION_MULTIPLY&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">renderInputRows() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> &#123;inputNumber, inputSigned, inputDecimal&#125; = <span class=\"keyword\">this</span>.props;<span class=\"comment\">//注意在redux中那个地方返回了这三个函数的名字</span></div><div class=\"line\">    <span class=\"keyword\">return</span> inputs.reduce((collection, input) =&gt; &#123;<span class=\"comment\">//这里的reduce是怎么用的呢？</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;<span class=\"comment\">//为什么等于3</span></div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length<span class=\"number\">-1</span>].push(input);</div><div class=\"line\">      <span class=\"keyword\">return</span> collection;</div><div class=\"line\">    &#125;, [[]]).map((<span class=\"keyword\">group</span>, rowIndex) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> columns = <span class=\"keyword\">group</span>.map((item, columnIndex) =&gt; &#123;<span class=\"comment\">//看看map的方法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">          &lt;TouchableHighlight</div><div class=\"line\">            key=&#123;<span class=\"string\">'inputRow_'</span> + rowIndex + <span class=\"string\">'_inputCol_'</span> + columnIndex&#125;</div><div class=\"line\">            underlayColor=<span class=\"string\">\"#ededed\"</span></div><div class=\"line\">            style=&#123;styles.input&#125;</div><div class=\"line\">            onPress=&#123;() =&gt; &#123; <span class=\"comment\">//dispatch方法</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (item.type === Types.NUMBER) &#123;</div><div class=\"line\">                inputNumber(item.<span class=\"keyword\">value</span>);</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.type === Types.DECIMAL) &#123;</div><div class=\"line\">                inputDecimal();</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.type === Types.SIGN) &#123;</div><div class=\"line\">                inputSigned();</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;&#125;&gt;</div><div class=\"line\">            &lt;Text style=&#123;styles.inputText&#125;&gt;&#123;item.<span class=\"keyword\">value</span>&#125;&lt;/Text&gt;</div><div class=\"line\">          &lt;/TouchableHighlight&gt;</div><div class=\"line\">        );</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure>\n<p>看看这个数组的reducer方法的使用.<a href=\"https://github.com/benoitvallon/react-native-nw-react-calculator\" target=\"_blank\" rel=\"external\">源代码在这里</a></p>\n<p>这个我稍后再补充,会补充大神给我的解答.</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var Types = &#123;</div><div class=\"line\">  <span class=\"keyword\">NUMBER</span>: <span class=\"string\">'NUMBER'</span>,</div><div class=\"line\">  <span class=\"keyword\">DECIMAL</span>: <span class=\"string\">'DECIMAL'</span>,</div><div class=\"line\">  <span class=\"built_in\">SIGN</span>: <span class=\"string\">'SIGN'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var inputs = [</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">1</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">2</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">3</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">4</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">5</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">6</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">7</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">8</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">9</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'+/-'</span>, <span class=\"keyword\">type</span>: Types.<span class=\"built_in\">SIGN</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"number\">0</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">NUMBER</span>&#125;,</div><div class=\"line\">  &#123;<span class=\"keyword\">value</span>: <span class=\"string\">'.'</span>, <span class=\"keyword\">type</span>: Types.<span class=\"keyword\">DECIMAL</span>&#125;,</div><div class=\"line\">];</div><div class=\"line\">//这里其实是有一维数组转为二维数组，打印结构可以看到.</div><div class=\"line\">//注意reduce的起始值就是一个二维数组.</div><div class=\"line\">var result = inputs.reduce((collection, input) =&gt; &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length-<span class=\"number\">1</span>].push(input);</div><div class=\"line\">      <span class=\"keyword\">return</span> collection;</div><div class=\"line\">    &#125;, [[]])</div><div class=\"line\"></div><div class=\"line\">console.<span class=\"built_in\">log</span>(result)</div><div class=\"line\">console.table(result)</div></pre></td></tr></table></figure>\n<p>再看看下面这里两段代码<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">let str = `name,  age,  hair\\nMerble,  <span class=\"number\">35</span>,  red\\nBob,  <span class=\"number\">64</span>,  blonde`;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lameCSV</span><span class=\"params\">(str)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">'\\n'</span>).reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(table, row)</span></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">table</span>.push(row.split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(c)</span></span> &#123;<span class=\"keyword\">return</span> c.trim();&#125;));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">table</span></div><div class=\"line\">  &#125;, <span class=\"string\">[[]]</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">lameCSV(str);</div></pre></td></tr></table></figure></p>\n<hr>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr=[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</div><div class=\"line\"> var result = arr.reduce((collection, input) =&gt; &#123;</div><div class=\"line\">      if (collection[collection.length - <span class=\"number\">1</span>].length === <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        collection.push([]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      collection[collection.length<span class=\"number\">-1</span>].push(input);</div><div class=\"line\">      console.log(collection);</div><div class=\"line\">      return collection;</div><div class=\"line\">    &#125;, [[]]);</div></pre></td></tr></table></figure>\n<hr>\n<p><a href=\"https://github.com/zaxlct/baike_spider/issues/1\" target=\"_blank\" rel=\"external\">感谢大神的帮助,大神的github</a><br>reduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.</p>\n"},{"title":"Redux-awesome","date":"2017-03-07T16:04:10.000Z","_content":"# Awesome Redux [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n> List of repositories which use Redux\n\n## [Redux](https://github.com/reactjs/redux)\n## [Documentation of Redux](http://redux.js.org)\n## [Documentation of Redux(Simple Chinese version)](https://github.com/camsong/redux-in-chinese)\n## [Documentation of Redux(Russian version)](https://rajdee.gitbooks.io/redux-in-russian/) (Work in progress)\n## [Documentation of Redux(Traditional Chinese version)](http://chentsulin.github.io/redux/index.html)\n## [Documentation of Redux(Japanese version)](https://github.com/jposts/redux) (Work in progress)\n## [Documentation of Redux(Portuguese version)](https://github.com/franzejr/redux-in-portuguese/) (Work in progress)\n## [Documentation of Redux(Spanish version)](https://sergiodxa.gitbooks.io/redux-en-espanol/content/) (Work in progress)\n## [Documentation of Redux(Korean version)](http://dobbit.github.io/redux/)\n## [Documentation of Redux(Sinhala|සිංහල version)](https://sandaruny.github.io/redux-sin/) (Work in progress)\n\n> Predictable state container for JavaScript apps\n\n## Marks\n* [Universal (Isomorphic)](http://isomorphic.net) - :metal:\n* [Hot Reload](https://github.com/gaearon/react-transform-hmr) - :fire:\n\n### Presentations\n* [Let's learn React and Redux with Javascript's new ES6 syntax, from Beginner to Intermediate to Advanced.](https://www.youtube.com/watch?v=d0oUGmSE6IY&list=PLJBrYU54JD2pTblB20OmV7GL6H5J-p2g8)\n* [A introduction about Redux](https://github.com/chentsulin/redux-intro)\n* [Real World Redux](https://speakerdeck.com/chrisui/real-world-redux)\n* [The power of higher-order reducers](http://slides.com/omnidan/hor)\n* [Reactive Architecture with Redux and Angular](http://slides.com/evanschultz-1/reactive-angular)\n* [Redux Internals](http://slides.com/vladimirnovick/reduxinternals)\n* [Replacing Angular 1 with React and Redux](http://slides.com/scottprue-2/deck)\n* [A tour on the React ecosystem](http://slides.com/cguedes/a-tour-on-react-ecosystem)\n* [Redux from Twitter hype to production](http://slides.com/jenyaterpil/redux-from-twitter-hype-to-production#/)\n\n---\n\n### Resources\n\n* [Many tools and middlewares](https://github.com/redux-effects)\n* [Redux offline docs](https://github.com/paulwittmann/redux-offline-docs)\n* [Flux challenge](https://github.com/staltz/flux-challenge)\n* [Sound Redux - a simple Soundcloud client](https://github.com/andrewngu/sound-redux)\n* [Favesound Redux - SoundCloud Client for Artists](https://github.com/rwieruch/favesound-redux)\n* [Structor - a user interface builder for React](https://github.com/ipselon/structor)\n* [generator-redux - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n* [generator-reactapp - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n* [Rekit - Toolkit for building scalable web apps with React, Redux and React-router](http://rekit.js.org)\n* [Spectacle - ReactJS based Presentation Library](https://github.com/FormidableLabs/spectacle)\n* [Notes (and partial transcription) of Dan Abramov's Redux course videos on http://egghead.io](https://github.com/tayiorbeii/egghead.io_redux_course_notes)\n* [Comprehensive Notes for Learning (how to use) Redux to manage state in your Web/Mobile Apps](https://github.com/dwyl/learn-redux)\n* [React Redux [RU tutorial]](https://maxfarseer.gitbooks.io/redux-course-ru/content/)\n* [Redux without profanity](https://tonyhb.gitbooks.io/redux-without-profanity/content/index.html)\n* [React and Redux Single Page Applications Resources](https://medium.com/@sapegin/react-and-redux-single-page-applications-resources-22cd859b0c1d#.o66rolp0p)\n* [A categorized list of Redux-related addons, libraries, and utilities](https://github.com/markerikson/redux-ecosystem-links)\n* [Building the F8 2016 App (Redux, GraphQL, React Native)](http://makeitopen.com/tutorials/building-the-f8-app/planning/)\n* [The Elm Architecture in JavaScript](https://github.com/salsita/redux-elm)\n\n---\n\n### Articles And Tutorials\n* [Building Applications with React and Redux in ES6 on Pluralsight](https://app.pluralsight.com/library/courses/react-redux-react-router-es6)\n* [Writing a Basic App in Redux](http://davidandsuzi.com/writing-a-basic-app-in-redux)\n* [Learn how to use Redux step by step](https://github.com/happypoulp/redux-tutorial)\n* [Tutorial: Handcrafting an Isomorphic Redux Application (With Love)](https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4)\n* [0 to 1 : Getting started with Redux](http://www.jchapron.com/2015/08/14/getting-started-with-redux)\n* [Redux Chinese Document](https://github.com/camsong/redux-in-chinese)\n* [Redux Document (Traditional Chinese)](https://github.com/chentsulin/redux)\n* [Relay and Routing](https://medium.com/@cpojer/relay-and-routing-36b5439bad9)\n* [Understanding Redux Middleware](https://medium.com/@meagle/understanding-87566abcfb7a)\n* [Several videos about Redux + Falcor](https://www.livecoding.tv/ekosz/videos) and [Example code](https://github.com/ekosz/postcard-sender)\n* [Redux Middleware: Behind the Scenes](http://briantroncone.com/?p=529)\n* [A proposal for bundling reducers, action types and actions when using Redux](https://github.com/erikras/ducks-modular-redux)\n* [Full-Stack Redux Tutorial - A Comprehensive Guide to Test-First Development with Redux, React, and Immutable](http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html) Source [Server](https://github.com/teropa/redux-voting-server) + [Client](https://github.com/teropa/redux-voting-client)\n* [Redux best practices](https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e)\n* [The 3REE Stack: React + Redux + RethinkDB + Express.js](http://blog.workshape.io/the-3ree-stack-react-redux-rethinkdb-express-js)\n* [React Tutorial - Converting Reflux to Redux](http://engineering.wework.com/process/2015/10/01/react-reflux-to-redux)\n* [Redux example using 500px API (with ES6)](https://github.com/yildizberkay/redux-example)\n* [Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS](http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/) - This article explains in detail how [this koa-redux-react-boilerplate](https://github.com/mezod/boilerplate-koa-redux-react) was built and the technologies it uses.\n* [Typed React and Redux](http://jaysoo.ca/2015/09/26/typed-react-and-redux)\n* [A cartoon intro to Redux](https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.8k7536uqu)\n* [Join The Dark Side Of The Flux: Responding to Actions with Actors](http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors)\n* [Can I dispatch multiple actions from Redux action creators?](http://jamesknelson.com/can-i-dispatch-multiple-actions-from-redux-action-creators)\n* [Understanding Redux (or, How I Fell in Love with a JavaScript State Container)](http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container)\n* [Your First Immutable React & Redux App](http://reactjsnews.com/your-first-redux-app)\n* [Getting Started with Redux - Egghead's video lessons from Dan Abramov](https://egghead.io/series/getting-started-with-redux)\n* [Redux Testing Video Lessons - a few short Egghead video lessons (some free, some require a subscription)](https://egghead.io/series/react-testing-cookbook)\n* [Implementing a smart Login Modal with Redux, reselect and ReactJS](https://medium.com/@dorsha/implement-login-modal-with-redux-reselect-and-reactjs-668c468bcbe3#.lnwisap8c)\n* [How to Build a Todo App Using React, Redux, and Immutable.js](http://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js)\n* [Rethinking Redux](https://voice.kadira.io/rethinking-redux-f1e96daba60c#.hp5v516ie)\n* [Managing Side Effects In React + Redux Using Sagas](http://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas)\n* [Secure Your React and Redux App with JWT Authentication](https://auth0.com/blog/2016/01/04/secure-your-react-and-redux-app-with-jwt-authentication)\n* [Getting started with Redux and GraphQL](https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56#.3anuh1m7x)\n* [Data Flows with Angular 2 and Redux](http://www.sitepoint.com/data-flows-angular-2-redux)\n* [Simple Routing with Redux and React](http://jamesknelson.com/simple-routing-redux-react)\n* [Redux nowadays : From actions creators to sagas](https://riadbenguella.com/2015/12/28/redux-nowadays-from-actions-creators-to-sagas/)\n* [Master Complex Redux Workflows with Sagas](http://konkle.us/master-complex-redux-workflows-with-sagas)\n* [Angular 2 Application Architecture - Building Flux Apps with Redux and Immutable.js](http://blog.jhades.org/angular-2-application-architecture-building-flux-like-apps-using-redux-and-immutable-js-js)\n* [React, Redux and Immutable.js: Ingredients for Efficient Web Applications](http://www.toptal.com/react/react-redux-and-immutablejs)\n* [An Introduction to React Redux (Part 1)](https://shellmonger.com/2016/02/16/an-introduction-to-react-redux-part-1)\n* [An Introduction to React Redux (Part 2)](https://shellmonger.com/2016/02/19/an-introduction-to-react-redux-part-2)\n* [Rules For Structuring (Redux) Applications](http://jaysoo.ca/2016/02/28/organizing-redux-application)\n* [Redux for the very beginner](http://toranbillups.com/blog/archive/2016/01/22/redux-for-the-very-beginner)\n* [Redux - Calling web service asynchronously](http://www.zohaib.me/redux-call-service-async/)\n* [Animating with React, Redux, and d3](http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775)\n* [Build an Image Gallery Using React, Redux and redux-saga](http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/)\n* [Introducing redux-operations](https://medium.com/@matt.krick/introducing-redux-operations-332ab56e468b#.7e30nsxne)\n* [Solving Redux’s shortcoming in 150 LOCs](https://medium.com/@matt.krick/solving-redux-s-shortcoming-in-150-locs-540979ce6cf9#.sw0s478j6)\n* [The Anatomy Of A React Redux App](https://medium.com/@rajaraodv/the-anatomy-of-a-react-redux-app-759282368c5a#.h05vq2uaj)\n* [Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2)](http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/)\n* [Leveling Up with React: Redux](https://css-tricks.com/learning-react-redux/)\n* [Complete intro to react](http://btholt.github.io/complete-intro-to-react/)\n* [Recreating Redux — Behind the magic curtain](https://medium.com/@nicktho/recreating-redux-behind-the-magic-curtain-c21edd542c9c#.a93sgufyi)\n* [Let's Build a Redux Powered React Application](https://stormpath.com/blog/build-a-redux-powered-react-application/)\n* [Deep Introduction to Redux - Seriese 1/3](https://www.codementor.io/reactjs/tutorial/intro-to-react-redux-pros)\n* [Universal Rendering with Redux and React-Router - Seriese 2/3](https://www.codementor.io/reactjs/tutorial/redux-server-rendering-react-router-universal-web-app)\n* [Unit Testing Redux Apps - Seriese 3/3](https://www.codementor.io/reactjs/tutorial/redux-unit-test-mocha-mocking)\n* [Using Aurelia and Redux together for good times all around](https://zen.id.au/using-aurelia-and-redux-together-for-good-times-all-around/)\n* [Comparing Redux and Relay](https://www.reindex.io/blog/redux-and-relay/)\n* [Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux)\n* [The SoundCloud Client in React + Redux](http://www.robinwieruch.de/the-soundcloud-client-in-react-redux)\n* [深入浅出 Redux](https://github.com/berwin/Blog/issues/4)\n* [Building Angular 2 applications with Immutable.js and Redux](http://houssein.me/redux/immutablejs/angular2/2016/07/04/angular2-with-immutablejs-and-redux.html)\n* [Tutorial: Building Redux in TypeScript with Angular 2](http://blog.ng-book.com/introduction-to-redux-with-typescript-and-angular-2/)\n* [Improving React and Redux performance with Reselect](http://blog.rangle.io/react-and-redux-performance-with-reselect/)\n* [Recipes for Redux](http://blog.rangle.io/recipes-for-redux/)\n* [Getting Started with Redux & Angular 2](http://blog.rangle.io/getting-started-with-redux-and-angular-2/)\n* [Universal/Isomorphic React+Redux on a Swift Web Backend](https://el-tramo.be/blog/react-swift/)\n* [Creating Reusable React-Redux Components Through Scoping](http://engineering.datadoghq.com/redux-doghouse--creating-reusable-react-redux-components-through-scoping/)\n* [React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial)\n* [书籍：《React 与 Redux 开发实例精解》](https://lewis617.github.io/2016/11/20/r2-book/)\n\n---\n\n### Boilerplate\n* [**redux-minimal** - Minimalist react-redux starter kit which let's you build rich real world apps](http://redux-minimal.js.org/)\n* [**Modern and Scalable React/Redux Boilerplate** - Flexible starter kit using Webpack 2 (tree-shaking) / React Hot Loader v3 / Code Splitting for React Router / PostCSS / CSS Modules / custom *Ducks pattern* app architecture / best practices / Sentry error tracking / Enzyme test environment](https://github.com/nicksp/redux-webpack-es6-boilerplate) :rocket:\n* [**react-production-starter** - React boilerplate with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting.](https://github.com/jaredpalmer/react-production-starter) :metal: :fire:\n* [**mern.io** - Simple full-stack boilerplate to get started with building isomorphic/universal apps, handles api part and also offers a cli to generate the boilerplate](https://github.com/hashnode/mern-starter) :metal: :fire:\n* [**universal-react-redux** - Opinionated Universal React/Redux/Webpack with HMR. Continually updated.](https://github.com/combine/universal-react-redux) :metal: :fire:\n* [**react-slingshot** - React Redux Starter Kit with hot reloading, tests and example app](https://github.com/coryhouse/react-slingshot)\n* [**react-redux-boilerplate** - React Redux Boilerplate](https://github.com/knowbody/react-redux-boilerplate)\n* [**react-boilerplate** - React + Typescript + Sass boilerplate](https://github.com/Keats/react-boilerplate)\n* [**react-redux-scaffold** - Combination of redux, react-router and ES6+ support](https://github.com/lcjnil/react-redux-scaffold)\n* [**simple-redux-boilerplate** - Simple and guided React, Redux boilerplate w/ Transform HMR! :fire:](https://github.com/tsaiDavid/simple-redux-boilerplate)\n* [**reactv** - React Redux example](https://github.com/Amorino/reactv)\n* [**redux-boilerplate** - Boilerplate for Redux](https://github.com/ellbee/redux-boilerplate)\n* [**react-redux-starter-kit** - Get started with React, Redux, and React-Router.](https://github.com/davezuko/react-redux-starter-kit)\n* [**simplest-redux-example** - Simplest Redux + React example for beginners](https://github.com/jackielii/simplest-redux-example)\n* [**redux-easy-boilerplate** - React Redux easy boilerplate](https://github.com/anorudes/redux-easy-boilerplate)\n* [**dicty-redux** - Starter kit to bootstrap React and Redux (Flux) based web application](https://github.com/dictyBase/dicty-redux)\n* [**3ree** - Boilerplate & Demo for Universal Realtime Apps built with React + Redux + RethinkDB + Express](https://github.com/GordyD/3ree)\n* [**react_scaffolding** - React + React Router 1.0 + Redux + Webpack & Hot Module Replacement](https://github.com/rafaelchiti/react_scaffolding)\n* [**express-redux-sample** - Express-Redux-PassportJs-MySQL Boilerplate](https://github.com/aybmab/express-redux-sample)\n* [**redux-blog-example** - Redux-Webpack-Babel Blog Platform boilerplate](https://github.com/GetExpert/redux-blog-example)\n* [**redux-undo-boilerplate** - a magical boilerplate with hot reloading and awesome error handling](https://github.com/omnidan/redux-undo-boilerplate)\n* [**redux500** - The Redux version of isomorphic500](https://github.com/gpbl/redux500)\n* [**redux-demo** - Redux port of SurviveJS - Webpack and React Kanban app](https://github.com/survivejs/redux-demo)\n* [**react-redux-universal-hot-example** - A starter boilerplate for a universal webapp using express, react, redux, webpack, and react-hot-loader](https://github.com/erikras/react-redux-universal-hot-example) :metal:\n* [**rde** - Reactive Live Programming Environment](https://github.com/levjj/rde)\n* [**React Redux Starter Kit** - Yet another React and Redux based web application starter kit](https://github.com/cloudmu/react-redux-starter-kit)\n* [**skeleton** - A simple project-stub to show the basic ideas. Also serves you as a quick start for your project (Mori + Redux)](https://github.com/sullenor/skeleton)\n* [**browser-redux** - Building Chrome apps and cross-browser extensions with Redux and Webpack](https://github.com/zalmoxisus/browser-redux)\n* [**react-for-hipsters-boilerplate** - Fresh boilerplate with brand new hot reloading confing and other hipster stuff](https://github.com/chicoxyzzy/react-for-hipsters-boilerplate)\n* [**Documented Koa Redux React Webpack boilerplate**](https://github.com/mezod/boilerplate-koa-redux-react)- The building process of this boilerplate is deeply documented from 0 for learning purposes. [You can find the docs here](http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/).\n* [**err** - Electron, React, Redux-devtools boilerplate for building cross-platform apps.](https://github.com/tuommii/err)\n* [**friends-app-redux** - React Redux Universal Hot Example](https://github.com/banzay/friends-app-redux)\n* [**isomorphic-redux-app** - Redux Isomorphic App (with async content)](https://github.com/caljrimmer/isomorphic-redux-app)\n* [**starter-kit** - Project boilerplate using React, Redux and Uniloc http://unicornstandard.com/packages/boilerplate.html](https://github.com/unicorn-standard/starter-kit)\n* [**loopback-redux-react-boilerplate** - A boilerplate for a Redux-React application using LoopBack](https://github.com/tngan/loopback-redux-react-boilerplate)\n* [**breko-hub** - **B**abel **Rea**ct **Ko**a **H**ot **U**niversal **B**oilerplate -- A simple, clean and consistent boilerplate for creating universal webapps with universal data fetching and SocketIO integration](https://github.com/tomatau/breko-hub)\n* [**React Redux Cordova Boilerplate**](https://github.com/inderps/react-redux-cordova-boilerplate)\n* [**react-boilerplate** - Performance orientated, offline-first boilerplate feat. hot-reloading, PostCSS and the best developer experience.](https://github.com/mxstbr/react-boilerplate)\n* [**react-webpack-node** - Boilerplate for an universal React + Redux/alt Flux application using Webpack running on a node express server](https://github.com/choonkending/react-webpack-node)\n* [**Hapi React Starter Kit** - Universal, Redux, Redis, Socket.io, Intl] (https://github.com/Dindaleon/hapi-react-starter-kit)\n* [**Universal Redux Template** - A clean, extensible react + redux boilerplate with universal rendering, testing and more] (https://github.com/mz026/universal-redux-template)\n* [**universal-js** - A universal Javascript starter kit inc. React, Redux, Redux Dev Tools, Universal Redux Router, CSS Modules, hot module reloading, Babel for ES2015+ and ESLint](https://github.com/colinmeinke/universal-js)\n* [**redux-react-material-boilerplate** - Simple boilerplate inc. React, Redux, Hot reload and Material-ui](https://github.com/WapGeaR/redux-react-material-boilerplate)\n* [**react-redux-starter** - React Redux Starter](https://github.com/exeto/react-redux-starter)\n* [**Reduxible** - The Fast and Easy way to make a React + Redux apps](https://github.com/Pitzcarraldo/reduxible)\n* [**react-workflow** - A large SPA boilerplate for web development built on top of Facebook's React library,use redux architecture](https://github.com/chen844033231/react-workflow)\n* [**ReacToGo** - A simple ES6 boilerplate with Redux architecture and ImmutableJS: Hot Reload, React UI Comp, Firebase, Router](https://github.com/PBRT/reactogo)\n* [**React/Redux simple CRUD** with persistent state and local async actions (add a manifest file and you get an offline webapp) ](https://github.com/cristianszwarc/react_crud_localStorage)\n* [**StarHackIt** - An React/Redux Node full-stack starter kit with authentication and authorization code](https://github.com/FredericHeem/starhackit)\n* [**React Seed** - A barebones scalable directory structure and package.json for facilitating new React + Redux projects. No fat to trim here!](https://github.com/andrewcoelho/react-seed)\n* [**React/Redux with Auth boilerplate** - Very simple boilerplate, good for fast creating admin panels / dashboard. Included: React, Redux, ReduxForm, React-Router, Simple Authenticate, Hot Reload and Webpack (with babel) :fire:] (https://github.com/WapGeaR/react-redux-boilerplate-auth)\n* [**Docker + React/Redux + Node + PostgreSQL** - full stack boilerplate with fully dockerized workflows for development, deployment, testing](https://github.com/Producters/docker-node-react-starter)\n* [**Redux universal boilerplate** - boilerplate for react universal application building on flux architecture based on redux implementation.](https://github.com/ufocoder/redux-universal-boilerplate)\n* [**React Redux Universal Boilerplate** - An Universal ReactJS/Redux Boilerplate.](https://github.com/kiki-le-singe/react-redux-universal-boilerplate)\n* [**react-hot-redux-firebase-starter** - Starter boilerplate for using React/Redux with Firebase 3.0 API, include the new React Hot Loader 3.0 :fire:](https://github.com/douglascorrea/react-hot-redux-firebase-starter)\n* [**React Redux Firebase Boilerplate** - Designed for quickly spin up your apps with Firebase, using bunch of awesome new front-end technologies includes webpack build system, hot reloading, routing & sass support. :fire:](https://github.com/btomashvili/react-redux-firebase-boilerplate)\n* [**React Universal Saga** - Universal React Starter Kit ft. Redux Saga](https://github.com/xkawi/react-universal-saga)\n* [**React Redux SoundCloud Client** - Seed Project for a SoundCloud Client with working Login + Extension Seed Projects](https://github.com/rwieruch/react-redux-soundcloud)\n* [**vortigern** - A universal boilerplate for building web applications w/ TypeScript, React, Redux and more.](https://github.com/barbar/vortigern)\n* [**angular2-redux-contact-list** - Simple contact list built with Angular 2, Immutable.js and Redux](https://github.com/hdjirdeh/angular2-redux-contact-list)\n* [**react-redux-seed** - 使用 React 与 Redux 实现 Universal 渲染的种子工程](https://github.com/lewis617/react-redux-seed)\n* [**ARc** - A progressive React starter kit based on Atomic Design with redux, redux-saga and redux-form](https://arc.js.org)\n* [**edux** - fast Redux without constants and switches. Actions and reducers are generated from single source.](https://github.com/dogada/edux)\n\n---\n\n### [React Native - A framework for building native apps using React](https://facebook.github.io/react-native)\n* Examples\n    * [CarteJaune - An open source Redux/ExponentJS (React Native) app leveraging redux-saga to keep track of your vaccinations](https://github.com/nikgraf/CarteJaune)\n    * [noder-react-native - The mobile app of cnodejs.org written in React Native](https://github.com/soliury/noder-react-native)\n    * [react-native-redux-counter](https://github.com/hzyIO/react-native-redux-counter)\n    * [react-native-counter-ios-android](https://github.com/chentsulin/react-native-counter-ios-android)\n    * [react-native-redux-groceries - An example app using React Native, Redux, Firebase, and AsyncStorage for offline data](https://github.com/bruz/react-native-redux-groceries)\n    * [react-native-sound-cloud](https://github.com/fraserxu/soundredux-native)\n    * [snowflake - mobile app starter: Login, Logout, Reset Password, Update Profile, Hot Reload](https://github.com/bartonhammond/snowflake)\n    * [uestc-bbs-react-native - An iOS client for http://bbs.uestc.edu.cn/ written in React Native with Redux](https://github.com/just4fun/uestc-bbs-react-native)\n    * [movies-redux - redux implementation of react-native movies example that is included in react-native source](https://github.com/nara/movies-redux)\n    * [react-native-redux-todo-list - A sample todo list app developed by using react-native and redux](https://github.com/uiheros/react-native-redux-todo-list)\n\n---\n\n### [React - A JavaScript library for building user interfaces](http://facebook.github.io/react)\n* Containers\n    * [**reapop** - A React & Redux notifications system](https://github.com/LouisBarranqueiro/reapop)\n\n* Middlewares\n   \n   * [**redux-cheerio** - Make HTTP requests and then parse the responses with jQuery selectors using Cheerio](https://github.com/therewillbecode/redux-cheerio)\n    * [**redux-reporter** - Report actions & metadata to 3rd party providers, extremely useful for analytics and error handling (New Relic, Sentry, Adobe DTM, Keen, etc.)](https://github.com/ezekielchentnik/redux-reporter)\n    * [**redux-transduce** - Transducer utilities for Redux](https://github.com/acdlite/redux-transduce)\n    * [**redux-actions** - Flux Standard Action utilities for Redux](https://github.com/acdlite/redux-actions)\n    * [**redux-promise** - FSA-compliant promise middleware for Redux](https://github.com/acdlite/redux-promise)\n    * [**redux-sync-promise** - Middleware for writing asynchronous actions in synchronous style](https://github.com/shanhaichik/redux-sync-promise)\n    * [**redux-simple-promise** - FSA-compliant promise middleware for Redux with simple behaviour with minimal boilerplate declarations](https://github.com/alanrubin/redux-simple-promise)\n    * [**redux-async** - FSA-compliant promise property middleware for Redux](https://github.com/symbiont-io/redux-async)\n    * [**redux-async-queue** - Manage queues of thunk actions](https://github.com/zackargyle/redux-async-queue)\n    * [**redux-async-initial-state** - Set initial Redux state asynchronously](https://github.com/KELiON/redux-async-initial-state)\n    * [**redux-await** - Manage async redux actions sanely](https://github.com/kolodny/redux-await)\n    * [**redux-rx** - RxJS utilities for Redux](https://github.com/acdlite/redux-rx)\n    * [**reselect** - Selector library for Redux like in NuclearJS](https://github.com/faassen/reselect)\n    * [**react-redux** - React bindings for Redux](https://github.com/rackt/react-redux)\n    * [**redux-react-router** - Redux bindings for React Router – keep your router state inside your Redux store](https://github.com/acdlite/redux-react-router)\n    * [**redux-promise-middleware** - Redux middleware for resolving and rejecting promises](https://github.com/pburtchaell/redux-promise-middleware)\n    * [**redux-thunk** - Thunk middleware for Redux](https://github.com/gaearon/redux-thunk)\n    * [**redux-batched-updates** - Batch React updates that occur as a result of Redux dispatches, to prevent cascading renders.](https://github.com/acdlite/redux-batched-updates)\n    * [**redux-combine-actions** - Redux middleware that allows you to easy combine actions and dispatch them sequentially](https://github.com/itsmepetrov/redux-combine-actions)\n    * [**redux-catch-promise** - Extended replacement of redux-thunk middleware to supporting async-await functions and implement server-side rendering for React components with async state](https://github.com/DenisIzmaylov/redux-catch-promise)\n    * [**redux-delegator** - Compose redux reducers in a structured way](https://github.com/lapanoid/redux-delegator)\n    * [**routex** - Simple router for Redux universal applications. Can be used with React too](https://github.com/michalkvasnicak/routex)\n    * [**redux-persist-store** - Persist and rehydrate a redux store](https://github.com/rt2zz/redux-persist-store)\n    * [**adrenaline** - React bindings for Redux with Relay in mind](https://github.com/gyzerok/adrenaline)\n    * [**redux-localstorage** - Store enhancer that syncs (a subset) of your Redux store state to localstorage.](https://github.com/elgerlambert/redux-localstorage)\n    * [**redux-storage** - Persistence layer for redux with flexible backends](https://github.com/michaelcontento/redux-storage)\n    * [**redux-pouchdb** - sync store state to pouchdb](https://github.com/vicentedealencar/redux-pouchdb)\n    * [**redux-vstack-router** - Helpers to bind vstack-router to redux](https://github.com/vslinko/redux-vstack-router)\n    * [**redux-create-store**](https://github.com/phated/redux-create-store)\n    * [**redux-batched-subscribe** - Batch calls to subscribe handlers with a custom function, including debouncing or React batched updates.](https://github.com/tappleby/redux-batched-subscribe)\n    * [**redux-logger** - Logger middleware for Redux](https://github.com/fcomb/redux-logger)\n    * [**redux-node-logger** - A Redux Logger for Node Environments](https://github.com/low-ghost/redux-node-logger)\n    * [**redux-diff-logger** - Diff logger between states for Redux](https://github.com/fcomb/redux-diff-logger)\n    * [**redux-debug** - debug(...) middleware for Redux](https://github.com/lapwinglabs/redux-debug)\n    * [**redux-requests** - Avoid issuing duplicate HTTP requests](https://github.com/idolize/redux-requests)\n    * [**redux-owl** - Redux One Way Linking](https://github.com/rt2zz/redux-owl)\n    * [**redux-act** - An opinionated lib to create actions and reducers for Redux](https://github.com/pauldijou/redux-act)\n    * [**redux-act-async** - Reducing boilerplate when creating asynchronous actions in Redux](https://github.com/FredericHeem/redux-act-async)\n    * [**redux-raven-middleware** - Redux middleware for sending error reports to Sentry through raven-js](https://github.com/ngokevin/redux-raven-middleware)\n    * [**redux-routing** - Universal routing built on top of redux](https://github.com/callum/redux-routing)\n    * [**redux-undo** - Simple undo/redo functionality for redux state containers](https://github.com/omnidan/redux-undo)\n    * [**rn-redux-mixpanel** - Configurable Redux middleware that sends your actions & user profile data to Mixpanel](https://github.com/danscan/rn-redux-mixpanel)\n    * [**redux-falcor** - Connect your redux front-end to your falcor back-end](https://github.com/ekosz/redux-falcor)\n    * [**redux-analytics** - Trigger analytics events based on your event metadata](https://github.com/markdalgleish/redux-analytics)\n    * [**redux-ignore** - Ignore redux actions by array or filter function](https://github.com/omnidan/redux-ignore)\n    * [**redux-recycle** - Reset the redux state on certain actions](https://github.com/omnidan/redux-recycle)\n    * [**re-notif**](https://github.com/indexiatech/re-notif) A notification center based on React & Redux.\n    * [**redux-lunr** - Make your redux store searchable with Lunr.js](https://github.com/swennemans/redux-lunr)\n    * [**redux-ensure-fsa** - Development middleware to check for FSA-compliant actions](https://github.com/meadow/redux-ensure-fsa)\n    * [**redux-pagan** - internationalization via redux](https://github.com/alexkuz/redux-pagan)\n    * [**redux-debounce**](//github.com/wyze/redux-debounce) - Debounce your actions!\n    * [**redux-future** - FSA-compliant future monad middleware for redux](https://github.com/stoeffel/redux-future)\n    * [**redux-io** - FSA-compliant io monad middleware for redux](https://github.com/stoeffel/redux-io)\n    * [**redux-either** - FSA-compliant either monad middleware for redux](https://github.com/stoeffel/redux-either)\n    * [**redux-timeout** - Trigger actions based on timeouts](https://github.com/gpfunk/redux-timeout)\n    * [**redux-observable-middleware** - Redux middleware for subscribing to observables](https://github.com/d6u/redux-observable-middleware)\n    * [**redux-observable** - RxJS 5-based middleware for Redux. Compose and cancel actions as epics.](https://github.com/redux-observable/redux-observable)\n    * [**redux-deferred** - Redux middleware for jQuery Deferred Object](https://github.com/wyvernnot/redux-deferred)\n    * [**redux-task** - A simple Side Effects manager for redux](https://github.com/sskyy/redux-task)\n    * [**redux-gen** - Generator based middleware for redux](https://github.com/weo-edu/redux-gen)\n    * [**redux-authentication** - Authentication component for Redux](https://github.com/Jackong/redux-authentication)\n    * [**socket.io-redux** - Redux middleware to emit action via socket.io](https://github.com/sergiodxa/socket.io-redux)\n    * [**redux-catch** - Error catcher middleware for Redux reducers and middlewares](https://github.com/sergiodxa/redux-catch)\n    * [**redux-elm-middleware** - Elm middleware for redux](https://github.com/stoeffel/redux-elm-middleware)\n    * [**redux-api-middleware** - Redux API middleware based on the real-world example](https://github.com/agraboso/redux-api-middleware)\n    * [**redux-mediaquery** - Redux ActionCreator to put responsive-design breakpoints in your store](https://github.com/Yaska/redux-mediaquery)\n    * [**redux-amrc** - Redux async middleware and reducer creator](https://github.com/lewis617/redux-amrc)\n    * [**redux-fetch-middleware** - Redux middleware that help user to treat simple request via fetch api](https://github.com/zslucky/redux-fetch-middleware)\n\n* Tools\n    * [**reactotron** - Control, monitor, and instrument your React Native apps from the comfort of your TTY](https://github.com/skellock/reactotron)\n    * [**redux-test-recorder** - Redux test recorder is a redux middleware + included component for automagically generating tests for your reducers based on the actions in your app](https://github.com/conorhastings/redux-test-recorder)\n    * [**redux-devtools** - DevTools for Redux with hot reloading, action replay, and customizable UI](https://github.com/gaearon/redux-devtools)\n    * [**react-router-redux** - Ruthlessly simple bindings to keep react-router and redux in sync](https://github.com/rackt/react-router-redux)\n    * [**redux-tiny-router** - A Router made for Redux, stop using the router as a controller it's just state!](https://github.com/Agamennon/redux-tiny-router)\n    * [**redux-devtools-gentest-plugin** - Generate mocha like tests from redux-devtools session](https://github.com/lapanoid/redux-devtools-gentest-plugin)\n    * [**generator-redux** - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n    * [**generator-reactapp** - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n    * [**generator-redux-app** - Scaffold out a redux app with counter example and react-router](https://github.com/chentsulin/generator-redux-app)\n    * [**redux-loader** - A high order component for Redux. This components loads resources and passes them to the child components via props](https://github.com/sporto/redux-loader)\n    * [**redux-rest** - Automatically create Flux action constants, action creators and Redux reducers for your REST API](https://github.com/Kvoti/redux-rest)\n    * [**react-reach** - A library to communicate with Graphql through Redux](https://github.com/kennetpostigo/react-reach)\n    * [**redux-api** - Flux REST API for redux infrastructure](https://github.com/lexich/redux-api)\n    * [**redux-store-validator** - Add validation to your Redux reducers](https://github.com/alixander/redux-store-validator)\n    * [**firedux** - Firebase + Redux for ReactJS](https://github.com/adjohnson916/firedux)\n    * [**vstack-router** - Universal router](https://github.com/vslinko/vstack-router)\n    * [**redux-ecommerce** - E-commerce flux with redux](https://github.com/Tom-Alexander/redux-ecommerce)\n    * [**redux-form** - An ES7 decorator for forms using Redux and React](https://github.com/erikras/redux-form)\n    * [**redux-form-validation** - Form validation for controlled & uncontrolled inputs](https://github.com/posabsolute/redux-form-validator)\n    * [**simple-redux-form** - A tiny redux-form alternative Higher Order Component for forms](https://github.com/mihirsoni/simple-redux-form).\n    * [**redux-slider-monitor** - A custom monitor for Redux DevTools to replay recorded Redux actions](https://github.com/calesce/redux-slider-monitor)\n    * [**updeep** - Easily update nested frozen objects and arrays in a declarative and immutable manner](https://github.com/substantial/updeep)\n    * [**redux-immutable** - Streamlines use of Immutable.js with Redux reducers.](https://github.com/gajus/redux-immutable)\n    * [**redux-import-export-monitor** - A monitor for copying your serialized action log to the clipboard, as well as pasting it in from somewhere else](https://github.com/lapanoid/redux-import-export-monitor)\n    * [**icedam** - Just-in-time immutability: freezes data sent to views.](https://github.com/winkler1/icedam)\n    * [**react-inline-grid** - Predictable flexbox based grid for React using Redux and Immutable-js.](https://github.com/broucz/react-inline-grid)\n    * [**redux-easy-actions** - Sugar library for creating Redux or Flux actions](https://github.com/grigory-leonenko/redux-easy-actions)\n    * [**redux-mount** - Mount state data and change its state values on the fly](https://github.com/popc0rn/redux-mount)\n    * [**redux-multi** - Dispatch multiple actions from one action creator](https://github.com/ashaffer/redux-multi)\n    * [**immu** - A tiny, fail-fast, lazy, immutable Javascript objects library](https://github.com/scottcorgan/immu)\n    * [**Generate standard action creators and reducers for CRUD applications**](https://github.com/Versent/redux-crud)\n    * [**Redux & ImmutableJs** - Integration of Redux & ImmutableJs that 100% conforms Redux standards](https://github.com/indexiatech/redux-immutablejs)\n    * [**redux-tcomb** - Immutable and type-checked state and actions for Redux](https://github.com/gcanti/redux-tcomb)\n    * [**redux-react-router-transitions** - Attach react-router transitions to arbitrary actions](https://github.com/johanneslumpe/redux-react-router-transitions)\n    * [**redux-optimist** - Optimistically apply actions that can be later commited or reverted.](https://github.com/ForbesLindesay/redux-optimist)\n    * [**redux-devtools-diff-monitor** - Redux DevTools – Diff Monitor](https://github.com/whetstone/redux-devtools-diff-monitor)\n    * [**redux-store-visualizer** - Visualize Redux store in real time](https://github.com/romseguy/redux-store-visualizer)\n    * [**generator-redux** - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n    * [**generator-reactapp** - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n    * [**redux-viewmodel** - ViewModel wrapping for Redux & React](https://github.com/tdzl2003/redux-viewmodel)\n    * [**redux-utils** - Utility functions for Redux](https://github.com/newtack/redux-utils)\n    * [**multireducer** - A utility to wrap many copies of a single Redux reducer into a single key-based reducer](https://github.com/erikras/multireducer)\n    * [**subdivide** - User defined UI layout: Every pane can be subdivided and any widget assigned to any pane](https://github.com/philholden/subdivide)\n    * [**replux** - Self contained components and enhancements for Redux](https://github.com/gregthebusker/replux)\n    * [**redux-immutable-utils** - Utilities for using Immutable with Redux](https://github.com/aparticka/redux-immutable-utils)\n    * [**recompose** - A microcomponentization toolkit for React](https://github.com/acdlite/recompose)\n    * [**redux-lift** - Lifting for Redux](https://github.com/izaakschroeder/redux-lift)\n    * [**redux-router5** - router5 integration with Redux](https://github.com/router5/redux-router5)\n    * [**redux-devtools-extension** - Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension)\n    * [**universal-redux-router** - A very simple router for Redux and React that works on both server and client](https://github.com/colinmeinke/universal-redux-router)\n    * [**redux-watch** - Watch/monitor for state changes on an object path](https://github.com/jprichardson/redux-watch)\n    * [**redux-devtools-filterable-log-monitor** - Filterable tree view monitor for Redux DevTools](https://github.com/bvaughn/redux-devtools-filterable-log-monitor)\n    * [**redux-flash-notification** -  A flash notification component for Redux](https://github.com/posabsolute/redux-flash-notification)\n    * [**redux-saga** - An alternative side effect model for Redux apps](https://github.com/yelouafi/redux-saga)\n    * [**remote-redux-devtools** - Use Redux DevTools remotely for React Native, hybrid, desktop and server side Redux apps](https://github.com/zalmoxisus/remote-redux-devtools)\n    * [**redux-devtools-dispatch** - Dispatch your actions manually to test if your app reacts well](https://github.com/YoruNoHikage/redux-devtools-dispatch)\n    * [**redux-loop** - Sequence your effects naturally and purely by returning them from your reducers](https://github.com/raisemarketplace/redux-loop)\n    * [**redux-orm** - A small, simple and immutable ORM to manage data in your Redux store](https://github.com/tommikaikkonen/redux-orm)\n    * [**redux-bacon** - Utilities for attaching Bacon.js to Redux](https://github.com/aparticka/redux-bacon)\n    * [**rereduce** - Reducer library for Redux](https://github.com/slorber/rereduce)\n    * [**redux-decorators** - A ridiculously good syntax for working with Redux and TypeScript. Currently limited to Angular 2 but could potentially be used elsewhere](https://github.com/KarlPurk/redux-decorators)\n    * [**redux-test-reducer** - Simple and clean testing mechanism for Redux reducers](https://github.com/amsardesai/redux-test-reducer)\n    * [**redux-devtools-inspector** - Another Redux DevTools Monitor](https://github.com/alexkuz/redux-devtools-inspector)\n    * [**redux-ava** - Helpers for writing Redux tests in AVA](https://github.com/sotojuan/redux-ava)\n    * [**redux-cli** - An opinionated CLI for building redux/react apps quicker](https://github.com/SpencerCDixon/redux-cli)\n    * [**redux-saga-rxjs** - RxJS implementation of Saga pattern for redux](https://github.com/salsita/redux-saga-rxjs)\n    * [**redux-actions-assertions** - Assertions for redux actions testing](https://github.com/dmitry-zaets/redux-actions-assertions)\n    * [**redux-duck** - Helper function to create Redux modules using the ducks-modular-redux proposal](https://github.com/sergiodxa/redux-duck)\n    * [**redux-dispatch-cli** - A CLI tool for Redux remote dispatch. Used in remote-redux-devtools](https://github.com/jhen0409/redux-dispatch-cli)\n    * [**redux-immutable-reducer** - Immutable reducer states with Redux](https://github.com/zackargyle/redux-immutable-reducer)\n    * [**redux-bootstrap** - configure React + React-Router + Redux + Immutable.js with one function!](https://github.com/redux-bootstrap/redux-bootstrap)\n    * [**redux-director** - Redux bindings to director router](https://github.com/mandeepbrar/redux-director)\n    * [**redux-q** - Provides a way to queue callbacks until an action is dispatched](https://github.com/ConciergeAuctions/redux-q)\n    * [**redux-apist** - Creator API actions for redux-thunk](https://github.com/exeto/redux-apist)\n    * [**reswitch** — Write reducers with less boilerplate](https://github.com/chiefGui/reswitch)\n    * [**redux-autoform** - Create Redux-Forms dynamically out of metadata](https://github.com/redux-autoform/redux-autoform)\n    * [**redux-ship** - Composable, testable and typable side effects](https://github.com/clarus/redux-ship)\n\n* Frameworks\n    * [**Jumpsuit** - A powerful & efficient React framework. Jump in. Zip up. Build great apps.](https://github.com/jumpsuit/jumpsuit)\n    * [**Jumpstate** - Simple and powerful state management for Redux](https://github.com/jumpsuit/jumpstate)\n    * [**dva** - Front-end framework based on react, redux, react-redux, react-router and redux-saga.](https://github.com/sorrycc/dva)\n    * [**Vdux** - World's smallest framework.  Stateless Virtual DOM <-> Redux](https://github.com/ashaffer/vdux)\n    * [**Esex** - Full-stack Universal JavaScript Framework (Redux+RxJs)](https://github.com/esex/esex)\n    * [**Ripster**](https://github.com/vslinko/ripster)\n    * [**Este** - The most complete minimal dev stack / boilerplate for React & Redux universal web apps](https://github.com/este/este)\n    * [**stardux** - Functional DOM containers based on starplate, IncrementalDOM, and redux](https://github.com/littlstar/stardux)\n    * [**nux** - A Push-Based Functional Reactive Web Application Framework](https://github.com/marknutter/nux)\n    * [**Keo** - Plain functions for a more functional Deku approach to creating React components, with functional goodies such as compose, memoize, etc... for free](https://github.com/Wildhoney/Keo)\n    * [**plait** - A minimal JavaScript framework for building reactive web components](https://github.com/wildlyinaccurate/plait)\n    * [**reactuate** — A React/Redux stack (not a boilerplate!) with a focus on Domain-Driven Design](https://github.com/reactuate/reactuate)\n    * [**meatier** - Like meteor, but meatier](https://github.com/mattkrick/meatier)\n    * [**relax** - New generation CMS on top of React, Redux and GraphQL](https://github.com/relax/relax)\n    * [**lovli.js** - A boilerplate for developing react+redux applications with rethinkdb/horizon as realtime database and express for the server](https://github.com/flipace/lovli.js)\n    * [**kea** - Well-readable, self-documenting and easily refactorable framework that brings your data to life! Comes with scaffolding tools](https://github.com/mariusandra/kea-logic) :bird:\n    * [**Feeble** - A framework built on top of React/Redux/redux-saga which aims to make building React/Redux applications easier and better.](https://github.com/tianche/feeble)\n    * [**Conventional-Redux** - A wrapper for react-redux which provides API based on convention over configuration pattern.](https://github.com/mjaneczek/conventional-redux)\n    * [**redux-react-i18n** - An i18n solution for redux/react✌🏿✊🏽🤘🏻](https://github.com/derzunov/redux-react-i18n)\n\n---\n\n### [Examples](examples/README.md)\n\n---\n\n### Similar libraries\n   * [**flux-ts** - A small flux implementation heavily inspired by redux](https://github.com/BobBuehler/flux-ts)\n   * [**chopped-redux** - A very small Flux implementation based on Redux](https://github.com/acstll/chopped-redux)\n   * [**fluxette** - Minimalist, functional, and concise Flux](https://github.com/edge/fluxette)\n   * [**rx-redux** - A reimplementation of redux using RxJS](https://github.com/jas-chen/rx-redux)\n   * [**understate** - A simple state manager](https://github.com/johnhenry/understate)\n   * [**refer** - Redux-like library for handling global state on functional style](https://github.com/Lucifier129/refer)\n   * [**bobflux** - Bobflux is pure functional implementation of FLUX pattern and is fitted to Bobril](https://github.com/karelsteinmetz/bobflux)\n   * [**mobx** - Simple, scalable state management](https://github.com/mobxjs/mobx)\n\n---\n\n### [Deku - Functional view library for building UI components as an alternative to React](https://github.com/dekujs/deku)\n* Examples\n    * [Deku + Express + Redux + Crossroads Router](https://github.com/nivanson/deku-redux-universal-hot-example)\n    * [deku-redux - Bindings for redux in deku (Standalone plugin)](https://github.com/troch/deku-redux)\n)\n\n---\n\n### [Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes](http://google.github.io/incremental-dom)\n* Examples\n    * [Incremental DOM + Redux Flux = Todo App](https://github.com/joshthecoder/idom-redux-todomvc-app)\n\n---\n\n### [WinJS - Windows Library for JavaScript](http://try.buildwinjs.com)\n* Examples\n    * [react-redux-winjs-example](https://github.com/unindented/react-redux-winjs-example)\n\n---\n\n### [Angular - HTML enhanced for web apps](https://angularjs.org)\n* Examples\n    * [Angular + Typescript + Redux](https://github.com/wbuchwalter/tsRedux)\n    * [ng-redux - Standalone plugin](https://github.com/wbuchwalter/ng-redux)\n    * [redux-ui-router - ngRedux middleware for Angular UI Router](https://github.com/neilff/redux-ui-router)\n    * [Todo app with ng-redux • ES6 • Webpack](https://github.com/r-park/todo-angular-redux)\n    * [https://github.com/InfomediaLtd/angular2-redux-example](https://github.com/InfomediaLtd/angular2-redux-example)\n    * [https://github.com/tomusdrw/angular2-redux-example](https://github.com/tomusdrw/angular2-redux-example)\n\n---\n\n### [Angular 2 - One framework. Mobile and desktop](https://angular.io/)\n* Examples\n    * [angular2-redux-example - Example project for using pure Redux with Angular 2 and TypeScript](https://github.com/InfomediaLtd/angular2-redux-example)\n    * [@angular-redux/store - Angular 2 bindings for Redux](https://github.com/angular-redux/store)\n    * [angular2-redux - Wrapper components for using Redux in an Angular2 application](https://github.com/InfomediaLtd/angular2-redux)\n    * [ng2redux - Angular 2 bindings for Redux implemented with TypeScript and decorators](https://github.com/forforeach/ng2redux)\n\n---\n\n### [Vue - A library for building modern web interfaces](http://vuejs.org)\n* Examples\n    * [Revue - Redux binding for Vue](https://github.com/revue/revue)\n    * [Vue + Redux](https://github.com/yang-wei/vue-flux)\n    * [Meteor + Vue + Redux](https://github.com/zhongqf/meteor-vue-redux-example)\n\n---\n\n### [Polymer - Build modern apps using web components](https://www.polymer-project.org)\n* Examples\n    * [polymer-redux](https://github.com/tur-nr/polymer-redux)\n    * [redux-store-element](https://github.com/lastmjs/redux-store-element)\n\n---\n\n### [Ember - A framework for creating ambitious web applications](http://emberjs.com)\n* Examples\n\n---\n\n### [Meteor - Build apps that are a delight to use, faster than you ever thought possible](https://www.meteor.com)\n* Examples\n   * [meteor-react-redux-example](https://github.com/zhongqf/meteor-react-redux-example)\n   * [meteor-flux-leaderboard](https://github.com/AdamBrodzinski/meteor-flux-leaderboard/tree/redux)\n\n---\n\n### [Mithril - A Javascript Framework for Building Brilliant Applications](http://mithril.js.org/)\n* Examples\n    * [mithril-redux-starter-hmr](https://github.com/mijime/mithril-redux-starter-hmr)\n\n---\n\n\n### [Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events](http://backbonejs.org/)\n* Tools\n    * [backbone-redux — The easy way to keep your backbone collections and redux store in sync](https://github.com/redbooth/backbone-redux)\n\n---\n\n### [Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity](http://aurelia.io)\n* Examples\n    * [aurelia-redux-todo - An implementation of the Redux todo demo app using Aurelia](https://github.com/voidberg/aurelia-redux-todo)\n    * [Managing State in Aurelia: How to Use Aurelia with Redux](https://www.sitepoint.com/managing-state-aurelia-with-redux/)\n\n___\n\n### [Riot - A React-like user interface micro-library](http://riotjs.com)\n* Examples\n    * [riotredux-budget](https://github.com/remyhonig/riotredux-budget)\n    * [app-skeleton](https://github.com/zesty-io/app-skeleton)\n\n___\n\n### [Electron - Build cross platform desktop apps with web technologies](http://electron.atom.io/)\n* [electron-react-boilerplate (Electron + Redux + Hot Reload)](https://github.com/chentsulin/electron-react-boilerplate)\n\n___\n\n### [A-Frame - A web framework for building VR experiences](https://aframe.io)\n* [aframe-redux-component](https://github.com/ngokevin/kframe/tree/master/components/redux)\n\n___\n\n### Chrome Extensions\n* [Redux Chrome Extension](https://github.com/Dharmoslap/redux-chrome-extension)\n* [React Chrome Extension Boilerplate (Webpack + Redux + Babel and etc](https://github.com/jhen0409/react-chrome-extension-boilerplate)\n\n* Examples\n    * [Pumgrana Plugin](https://github.com/Pumgrana/plugin)\n\n## Ruby on Rails Resources\n* [React Webpack Rails Tutorial Using Redux](https://github.com/shakacode/react-webpack-rails-tutorial)\n* [react_on_rails gem](https://github.com/shakacode/react_on_rails)\n\n## Other languages\n\n* .NET\n    * [https://github.com/GuillaumeSalles/redux.NET](https://github.com/GuillaumeSalles/redux.NET)\n    * [https://github.com/pshomov/reducto](https://github.com/pshomov/reducto)\n\n* Java\n    * [https://github.com/glung/redux-java](https://github.com/glung/redux-java)\n    * [https://github.com/trikita/jedux](https://github.com/trikita/jedux)\n    * [https://github.com/izumin5210/Droidux](https://github.com/izumin5210/Droidux)\n\n* Swift\n    * [https://github.com/ReSwift/reduxSwift](https://github.com/ReSwift/reduxSwift)\n    * [https://github.com/Swift-Flow/Swift-Flow](https://github.com/Swift-Flow/Swift-Flow)\n    * [https://github.com/ReSwift/ReSwift](https://github.com/ReSwift/ReSwift) and [docs](http://reswift.github.io/ReSwift/master)\n\n* Purescript\n    * [https://github.com/brakmic/purescript-redux](https://github.com/brakmic/purescript-redux)\n    * [https://github.com/faber/purescript-purdux](https://github.com/faber/purescript-purdux)","source":"_posts/Awesome Redux.md","raw":"title: Redux-awesome\ndate: 2017-03-08 00:04:10\ncategories: Redux\ntags: react\n---\n# Awesome Redux [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n> List of repositories which use Redux\n\n## [Redux](https://github.com/reactjs/redux)\n## [Documentation of Redux](http://redux.js.org)\n## [Documentation of Redux(Simple Chinese version)](https://github.com/camsong/redux-in-chinese)\n## [Documentation of Redux(Russian version)](https://rajdee.gitbooks.io/redux-in-russian/) (Work in progress)\n## [Documentation of Redux(Traditional Chinese version)](http://chentsulin.github.io/redux/index.html)\n## [Documentation of Redux(Japanese version)](https://github.com/jposts/redux) (Work in progress)\n## [Documentation of Redux(Portuguese version)](https://github.com/franzejr/redux-in-portuguese/) (Work in progress)\n## [Documentation of Redux(Spanish version)](https://sergiodxa.gitbooks.io/redux-en-espanol/content/) (Work in progress)\n## [Documentation of Redux(Korean version)](http://dobbit.github.io/redux/)\n## [Documentation of Redux(Sinhala|සිංහල version)](https://sandaruny.github.io/redux-sin/) (Work in progress)\n\n> Predictable state container for JavaScript apps\n\n## Marks\n* [Universal (Isomorphic)](http://isomorphic.net) - :metal:\n* [Hot Reload](https://github.com/gaearon/react-transform-hmr) - :fire:\n\n### Presentations\n* [Let's learn React and Redux with Javascript's new ES6 syntax, from Beginner to Intermediate to Advanced.](https://www.youtube.com/watch?v=d0oUGmSE6IY&list=PLJBrYU54JD2pTblB20OmV7GL6H5J-p2g8)\n* [A introduction about Redux](https://github.com/chentsulin/redux-intro)\n* [Real World Redux](https://speakerdeck.com/chrisui/real-world-redux)\n* [The power of higher-order reducers](http://slides.com/omnidan/hor)\n* [Reactive Architecture with Redux and Angular](http://slides.com/evanschultz-1/reactive-angular)\n* [Redux Internals](http://slides.com/vladimirnovick/reduxinternals)\n* [Replacing Angular 1 with React and Redux](http://slides.com/scottprue-2/deck)\n* [A tour on the React ecosystem](http://slides.com/cguedes/a-tour-on-react-ecosystem)\n* [Redux from Twitter hype to production](http://slides.com/jenyaterpil/redux-from-twitter-hype-to-production#/)\n\n---\n\n### Resources\n\n* [Many tools and middlewares](https://github.com/redux-effects)\n* [Redux offline docs](https://github.com/paulwittmann/redux-offline-docs)\n* [Flux challenge](https://github.com/staltz/flux-challenge)\n* [Sound Redux - a simple Soundcloud client](https://github.com/andrewngu/sound-redux)\n* [Favesound Redux - SoundCloud Client for Artists](https://github.com/rwieruch/favesound-redux)\n* [Structor - a user interface builder for React](https://github.com/ipselon/structor)\n* [generator-redux - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n* [generator-reactapp - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n* [Rekit - Toolkit for building scalable web apps with React, Redux and React-router](http://rekit.js.org)\n* [Spectacle - ReactJS based Presentation Library](https://github.com/FormidableLabs/spectacle)\n* [Notes (and partial transcription) of Dan Abramov's Redux course videos on http://egghead.io](https://github.com/tayiorbeii/egghead.io_redux_course_notes)\n* [Comprehensive Notes for Learning (how to use) Redux to manage state in your Web/Mobile Apps](https://github.com/dwyl/learn-redux)\n* [React Redux [RU tutorial]](https://maxfarseer.gitbooks.io/redux-course-ru/content/)\n* [Redux without profanity](https://tonyhb.gitbooks.io/redux-without-profanity/content/index.html)\n* [React and Redux Single Page Applications Resources](https://medium.com/@sapegin/react-and-redux-single-page-applications-resources-22cd859b0c1d#.o66rolp0p)\n* [A categorized list of Redux-related addons, libraries, and utilities](https://github.com/markerikson/redux-ecosystem-links)\n* [Building the F8 2016 App (Redux, GraphQL, React Native)](http://makeitopen.com/tutorials/building-the-f8-app/planning/)\n* [The Elm Architecture in JavaScript](https://github.com/salsita/redux-elm)\n\n---\n\n### Articles And Tutorials\n* [Building Applications with React and Redux in ES6 on Pluralsight](https://app.pluralsight.com/library/courses/react-redux-react-router-es6)\n* [Writing a Basic App in Redux](http://davidandsuzi.com/writing-a-basic-app-in-redux)\n* [Learn how to use Redux step by step](https://github.com/happypoulp/redux-tutorial)\n* [Tutorial: Handcrafting an Isomorphic Redux Application (With Love)](https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4)\n* [0 to 1 : Getting started with Redux](http://www.jchapron.com/2015/08/14/getting-started-with-redux)\n* [Redux Chinese Document](https://github.com/camsong/redux-in-chinese)\n* [Redux Document (Traditional Chinese)](https://github.com/chentsulin/redux)\n* [Relay and Routing](https://medium.com/@cpojer/relay-and-routing-36b5439bad9)\n* [Understanding Redux Middleware](https://medium.com/@meagle/understanding-87566abcfb7a)\n* [Several videos about Redux + Falcor](https://www.livecoding.tv/ekosz/videos) and [Example code](https://github.com/ekosz/postcard-sender)\n* [Redux Middleware: Behind the Scenes](http://briantroncone.com/?p=529)\n* [A proposal for bundling reducers, action types and actions when using Redux](https://github.com/erikras/ducks-modular-redux)\n* [Full-Stack Redux Tutorial - A Comprehensive Guide to Test-First Development with Redux, React, and Immutable](http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html) Source [Server](https://github.com/teropa/redux-voting-server) + [Client](https://github.com/teropa/redux-voting-client)\n* [Redux best practices](https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e)\n* [The 3REE Stack: React + Redux + RethinkDB + Express.js](http://blog.workshape.io/the-3ree-stack-react-redux-rethinkdb-express-js)\n* [React Tutorial - Converting Reflux to Redux](http://engineering.wework.com/process/2015/10/01/react-reflux-to-redux)\n* [Redux example using 500px API (with ES6)](https://github.com/yildizberkay/redux-example)\n* [Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS](http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/) - This article explains in detail how [this koa-redux-react-boilerplate](https://github.com/mezod/boilerplate-koa-redux-react) was built and the technologies it uses.\n* [Typed React and Redux](http://jaysoo.ca/2015/09/26/typed-react-and-redux)\n* [A cartoon intro to Redux](https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.8k7536uqu)\n* [Join The Dark Side Of The Flux: Responding to Actions with Actors](http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors)\n* [Can I dispatch multiple actions from Redux action creators?](http://jamesknelson.com/can-i-dispatch-multiple-actions-from-redux-action-creators)\n* [Understanding Redux (or, How I Fell in Love with a JavaScript State Container)](http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container)\n* [Your First Immutable React & Redux App](http://reactjsnews.com/your-first-redux-app)\n* [Getting Started with Redux - Egghead's video lessons from Dan Abramov](https://egghead.io/series/getting-started-with-redux)\n* [Redux Testing Video Lessons - a few short Egghead video lessons (some free, some require a subscription)](https://egghead.io/series/react-testing-cookbook)\n* [Implementing a smart Login Modal with Redux, reselect and ReactJS](https://medium.com/@dorsha/implement-login-modal-with-redux-reselect-and-reactjs-668c468bcbe3#.lnwisap8c)\n* [How to Build a Todo App Using React, Redux, and Immutable.js](http://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js)\n* [Rethinking Redux](https://voice.kadira.io/rethinking-redux-f1e96daba60c#.hp5v516ie)\n* [Managing Side Effects In React + Redux Using Sagas](http://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas)\n* [Secure Your React and Redux App with JWT Authentication](https://auth0.com/blog/2016/01/04/secure-your-react-and-redux-app-with-jwt-authentication)\n* [Getting started with Redux and GraphQL](https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56#.3anuh1m7x)\n* [Data Flows with Angular 2 and Redux](http://www.sitepoint.com/data-flows-angular-2-redux)\n* [Simple Routing with Redux and React](http://jamesknelson.com/simple-routing-redux-react)\n* [Redux nowadays : From actions creators to sagas](https://riadbenguella.com/2015/12/28/redux-nowadays-from-actions-creators-to-sagas/)\n* [Master Complex Redux Workflows with Sagas](http://konkle.us/master-complex-redux-workflows-with-sagas)\n* [Angular 2 Application Architecture - Building Flux Apps with Redux and Immutable.js](http://blog.jhades.org/angular-2-application-architecture-building-flux-like-apps-using-redux-and-immutable-js-js)\n* [React, Redux and Immutable.js: Ingredients for Efficient Web Applications](http://www.toptal.com/react/react-redux-and-immutablejs)\n* [An Introduction to React Redux (Part 1)](https://shellmonger.com/2016/02/16/an-introduction-to-react-redux-part-1)\n* [An Introduction to React Redux (Part 2)](https://shellmonger.com/2016/02/19/an-introduction-to-react-redux-part-2)\n* [Rules For Structuring (Redux) Applications](http://jaysoo.ca/2016/02/28/organizing-redux-application)\n* [Redux for the very beginner](http://toranbillups.com/blog/archive/2016/01/22/redux-for-the-very-beginner)\n* [Redux - Calling web service asynchronously](http://www.zohaib.me/redux-call-service-async/)\n* [Animating with React, Redux, and d3](http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775)\n* [Build an Image Gallery Using React, Redux and redux-saga](http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/)\n* [Introducing redux-operations](https://medium.com/@matt.krick/introducing-redux-operations-332ab56e468b#.7e30nsxne)\n* [Solving Redux’s shortcoming in 150 LOCs](https://medium.com/@matt.krick/solving-redux-s-shortcoming-in-150-locs-540979ce6cf9#.sw0s478j6)\n* [The Anatomy Of A React Redux App](https://medium.com/@rajaraodv/the-anatomy-of-a-react-redux-app-759282368c5a#.h05vq2uaj)\n* [Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2)](http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/)\n* [Leveling Up with React: Redux](https://css-tricks.com/learning-react-redux/)\n* [Complete intro to react](http://btholt.github.io/complete-intro-to-react/)\n* [Recreating Redux — Behind the magic curtain](https://medium.com/@nicktho/recreating-redux-behind-the-magic-curtain-c21edd542c9c#.a93sgufyi)\n* [Let's Build a Redux Powered React Application](https://stormpath.com/blog/build-a-redux-powered-react-application/)\n* [Deep Introduction to Redux - Seriese 1/3](https://www.codementor.io/reactjs/tutorial/intro-to-react-redux-pros)\n* [Universal Rendering with Redux and React-Router - Seriese 2/3](https://www.codementor.io/reactjs/tutorial/redux-server-rendering-react-router-universal-web-app)\n* [Unit Testing Redux Apps - Seriese 3/3](https://www.codementor.io/reactjs/tutorial/redux-unit-test-mocha-mocking)\n* [Using Aurelia and Redux together for good times all around](https://zen.id.au/using-aurelia-and-redux-together-for-good-times-all-around/)\n* [Comparing Redux and Relay](https://www.reindex.io/blog/redux-and-relay/)\n* [Building React Applications with Idiomatic Redux](https://egghead.io/courses/building-react-applications-with-idiomatic-redux)\n* [The SoundCloud Client in React + Redux](http://www.robinwieruch.de/the-soundcloud-client-in-react-redux)\n* [深入浅出 Redux](https://github.com/berwin/Blog/issues/4)\n* [Building Angular 2 applications with Immutable.js and Redux](http://houssein.me/redux/immutablejs/angular2/2016/07/04/angular2-with-immutablejs-and-redux.html)\n* [Tutorial: Building Redux in TypeScript with Angular 2](http://blog.ng-book.com/introduction-to-redux-with-typescript-and-angular-2/)\n* [Improving React and Redux performance with Reselect](http://blog.rangle.io/react-and-redux-performance-with-reselect/)\n* [Recipes for Redux](http://blog.rangle.io/recipes-for-redux/)\n* [Getting Started with Redux & Angular 2](http://blog.rangle.io/getting-started-with-redux-and-angular-2/)\n* [Universal/Isomorphic React+Redux on a Swift Web Backend](https://el-tramo.be/blog/react-swift/)\n* [Creating Reusable React-Redux Components Through Scoping](http://engineering.datadoghq.com/redux-doghouse--creating-reusable-react-redux-components-through-scoping/)\n* [React+Redux系列教程](https://github.com/lewis617/react-redux-tutorial)\n* [书籍：《React 与 Redux 开发实例精解》](https://lewis617.github.io/2016/11/20/r2-book/)\n\n---\n\n### Boilerplate\n* [**redux-minimal** - Minimalist react-redux starter kit which let's you build rich real world apps](http://redux-minimal.js.org/)\n* [**Modern and Scalable React/Redux Boilerplate** - Flexible starter kit using Webpack 2 (tree-shaking) / React Hot Loader v3 / Code Splitting for React Router / PostCSS / CSS Modules / custom *Ducks pattern* app architecture / best practices / Sentry error tracking / Enzyme test environment](https://github.com/nicksp/redux-webpack-es6-boilerplate) :rocket:\n* [**react-production-starter** - React boilerplate with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting.](https://github.com/jaredpalmer/react-production-starter) :metal: :fire:\n* [**mern.io** - Simple full-stack boilerplate to get started with building isomorphic/universal apps, handles api part and also offers a cli to generate the boilerplate](https://github.com/hashnode/mern-starter) :metal: :fire:\n* [**universal-react-redux** - Opinionated Universal React/Redux/Webpack with HMR. Continually updated.](https://github.com/combine/universal-react-redux) :metal: :fire:\n* [**react-slingshot** - React Redux Starter Kit with hot reloading, tests and example app](https://github.com/coryhouse/react-slingshot)\n* [**react-redux-boilerplate** - React Redux Boilerplate](https://github.com/knowbody/react-redux-boilerplate)\n* [**react-boilerplate** - React + Typescript + Sass boilerplate](https://github.com/Keats/react-boilerplate)\n* [**react-redux-scaffold** - Combination of redux, react-router and ES6+ support](https://github.com/lcjnil/react-redux-scaffold)\n* [**simple-redux-boilerplate** - Simple and guided React, Redux boilerplate w/ Transform HMR! :fire:](https://github.com/tsaiDavid/simple-redux-boilerplate)\n* [**reactv** - React Redux example](https://github.com/Amorino/reactv)\n* [**redux-boilerplate** - Boilerplate for Redux](https://github.com/ellbee/redux-boilerplate)\n* [**react-redux-starter-kit** - Get started with React, Redux, and React-Router.](https://github.com/davezuko/react-redux-starter-kit)\n* [**simplest-redux-example** - Simplest Redux + React example for beginners](https://github.com/jackielii/simplest-redux-example)\n* [**redux-easy-boilerplate** - React Redux easy boilerplate](https://github.com/anorudes/redux-easy-boilerplate)\n* [**dicty-redux** - Starter kit to bootstrap React and Redux (Flux) based web application](https://github.com/dictyBase/dicty-redux)\n* [**3ree** - Boilerplate & Demo for Universal Realtime Apps built with React + Redux + RethinkDB + Express](https://github.com/GordyD/3ree)\n* [**react_scaffolding** - React + React Router 1.0 + Redux + Webpack & Hot Module Replacement](https://github.com/rafaelchiti/react_scaffolding)\n* [**express-redux-sample** - Express-Redux-PassportJs-MySQL Boilerplate](https://github.com/aybmab/express-redux-sample)\n* [**redux-blog-example** - Redux-Webpack-Babel Blog Platform boilerplate](https://github.com/GetExpert/redux-blog-example)\n* [**redux-undo-boilerplate** - a magical boilerplate with hot reloading and awesome error handling](https://github.com/omnidan/redux-undo-boilerplate)\n* [**redux500** - The Redux version of isomorphic500](https://github.com/gpbl/redux500)\n* [**redux-demo** - Redux port of SurviveJS - Webpack and React Kanban app](https://github.com/survivejs/redux-demo)\n* [**react-redux-universal-hot-example** - A starter boilerplate for a universal webapp using express, react, redux, webpack, and react-hot-loader](https://github.com/erikras/react-redux-universal-hot-example) :metal:\n* [**rde** - Reactive Live Programming Environment](https://github.com/levjj/rde)\n* [**React Redux Starter Kit** - Yet another React and Redux based web application starter kit](https://github.com/cloudmu/react-redux-starter-kit)\n* [**skeleton** - A simple project-stub to show the basic ideas. Also serves you as a quick start for your project (Mori + Redux)](https://github.com/sullenor/skeleton)\n* [**browser-redux** - Building Chrome apps and cross-browser extensions with Redux and Webpack](https://github.com/zalmoxisus/browser-redux)\n* [**react-for-hipsters-boilerplate** - Fresh boilerplate with brand new hot reloading confing and other hipster stuff](https://github.com/chicoxyzzy/react-for-hipsters-boilerplate)\n* [**Documented Koa Redux React Webpack boilerplate**](https://github.com/mezod/boilerplate-koa-redux-react)- The building process of this boilerplate is deeply documented from 0 for learning purposes. [You can find the docs here](http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/).\n* [**err** - Electron, React, Redux-devtools boilerplate for building cross-platform apps.](https://github.com/tuommii/err)\n* [**friends-app-redux** - React Redux Universal Hot Example](https://github.com/banzay/friends-app-redux)\n* [**isomorphic-redux-app** - Redux Isomorphic App (with async content)](https://github.com/caljrimmer/isomorphic-redux-app)\n* [**starter-kit** - Project boilerplate using React, Redux and Uniloc http://unicornstandard.com/packages/boilerplate.html](https://github.com/unicorn-standard/starter-kit)\n* [**loopback-redux-react-boilerplate** - A boilerplate for a Redux-React application using LoopBack](https://github.com/tngan/loopback-redux-react-boilerplate)\n* [**breko-hub** - **B**abel **Rea**ct **Ko**a **H**ot **U**niversal **B**oilerplate -- A simple, clean and consistent boilerplate for creating universal webapps with universal data fetching and SocketIO integration](https://github.com/tomatau/breko-hub)\n* [**React Redux Cordova Boilerplate**](https://github.com/inderps/react-redux-cordova-boilerplate)\n* [**react-boilerplate** - Performance orientated, offline-first boilerplate feat. hot-reloading, PostCSS and the best developer experience.](https://github.com/mxstbr/react-boilerplate)\n* [**react-webpack-node** - Boilerplate for an universal React + Redux/alt Flux application using Webpack running on a node express server](https://github.com/choonkending/react-webpack-node)\n* [**Hapi React Starter Kit** - Universal, Redux, Redis, Socket.io, Intl] (https://github.com/Dindaleon/hapi-react-starter-kit)\n* [**Universal Redux Template** - A clean, extensible react + redux boilerplate with universal rendering, testing and more] (https://github.com/mz026/universal-redux-template)\n* [**universal-js** - A universal Javascript starter kit inc. React, Redux, Redux Dev Tools, Universal Redux Router, CSS Modules, hot module reloading, Babel for ES2015+ and ESLint](https://github.com/colinmeinke/universal-js)\n* [**redux-react-material-boilerplate** - Simple boilerplate inc. React, Redux, Hot reload and Material-ui](https://github.com/WapGeaR/redux-react-material-boilerplate)\n* [**react-redux-starter** - React Redux Starter](https://github.com/exeto/react-redux-starter)\n* [**Reduxible** - The Fast and Easy way to make a React + Redux apps](https://github.com/Pitzcarraldo/reduxible)\n* [**react-workflow** - A large SPA boilerplate for web development built on top of Facebook's React library,use redux architecture](https://github.com/chen844033231/react-workflow)\n* [**ReacToGo** - A simple ES6 boilerplate with Redux architecture and ImmutableJS: Hot Reload, React UI Comp, Firebase, Router](https://github.com/PBRT/reactogo)\n* [**React/Redux simple CRUD** with persistent state and local async actions (add a manifest file and you get an offline webapp) ](https://github.com/cristianszwarc/react_crud_localStorage)\n* [**StarHackIt** - An React/Redux Node full-stack starter kit with authentication and authorization code](https://github.com/FredericHeem/starhackit)\n* [**React Seed** - A barebones scalable directory structure and package.json for facilitating new React + Redux projects. No fat to trim here!](https://github.com/andrewcoelho/react-seed)\n* [**React/Redux with Auth boilerplate** - Very simple boilerplate, good for fast creating admin panels / dashboard. Included: React, Redux, ReduxForm, React-Router, Simple Authenticate, Hot Reload and Webpack (with babel) :fire:] (https://github.com/WapGeaR/react-redux-boilerplate-auth)\n* [**Docker + React/Redux + Node + PostgreSQL** - full stack boilerplate with fully dockerized workflows for development, deployment, testing](https://github.com/Producters/docker-node-react-starter)\n* [**Redux universal boilerplate** - boilerplate for react universal application building on flux architecture based on redux implementation.](https://github.com/ufocoder/redux-universal-boilerplate)\n* [**React Redux Universal Boilerplate** - An Universal ReactJS/Redux Boilerplate.](https://github.com/kiki-le-singe/react-redux-universal-boilerplate)\n* [**react-hot-redux-firebase-starter** - Starter boilerplate for using React/Redux with Firebase 3.0 API, include the new React Hot Loader 3.0 :fire:](https://github.com/douglascorrea/react-hot-redux-firebase-starter)\n* [**React Redux Firebase Boilerplate** - Designed for quickly spin up your apps with Firebase, using bunch of awesome new front-end technologies includes webpack build system, hot reloading, routing & sass support. :fire:](https://github.com/btomashvili/react-redux-firebase-boilerplate)\n* [**React Universal Saga** - Universal React Starter Kit ft. Redux Saga](https://github.com/xkawi/react-universal-saga)\n* [**React Redux SoundCloud Client** - Seed Project for a SoundCloud Client with working Login + Extension Seed Projects](https://github.com/rwieruch/react-redux-soundcloud)\n* [**vortigern** - A universal boilerplate for building web applications w/ TypeScript, React, Redux and more.](https://github.com/barbar/vortigern)\n* [**angular2-redux-contact-list** - Simple contact list built with Angular 2, Immutable.js and Redux](https://github.com/hdjirdeh/angular2-redux-contact-list)\n* [**react-redux-seed** - 使用 React 与 Redux 实现 Universal 渲染的种子工程](https://github.com/lewis617/react-redux-seed)\n* [**ARc** - A progressive React starter kit based on Atomic Design with redux, redux-saga and redux-form](https://arc.js.org)\n* [**edux** - fast Redux without constants and switches. Actions and reducers are generated from single source.](https://github.com/dogada/edux)\n\n---\n\n### [React Native - A framework for building native apps using React](https://facebook.github.io/react-native)\n* Examples\n    * [CarteJaune - An open source Redux/ExponentJS (React Native) app leveraging redux-saga to keep track of your vaccinations](https://github.com/nikgraf/CarteJaune)\n    * [noder-react-native - The mobile app of cnodejs.org written in React Native](https://github.com/soliury/noder-react-native)\n    * [react-native-redux-counter](https://github.com/hzyIO/react-native-redux-counter)\n    * [react-native-counter-ios-android](https://github.com/chentsulin/react-native-counter-ios-android)\n    * [react-native-redux-groceries - An example app using React Native, Redux, Firebase, and AsyncStorage for offline data](https://github.com/bruz/react-native-redux-groceries)\n    * [react-native-sound-cloud](https://github.com/fraserxu/soundredux-native)\n    * [snowflake - mobile app starter: Login, Logout, Reset Password, Update Profile, Hot Reload](https://github.com/bartonhammond/snowflake)\n    * [uestc-bbs-react-native - An iOS client for http://bbs.uestc.edu.cn/ written in React Native with Redux](https://github.com/just4fun/uestc-bbs-react-native)\n    * [movies-redux - redux implementation of react-native movies example that is included in react-native source](https://github.com/nara/movies-redux)\n    * [react-native-redux-todo-list - A sample todo list app developed by using react-native and redux](https://github.com/uiheros/react-native-redux-todo-list)\n\n---\n\n### [React - A JavaScript library for building user interfaces](http://facebook.github.io/react)\n* Containers\n    * [**reapop** - A React & Redux notifications system](https://github.com/LouisBarranqueiro/reapop)\n\n* Middlewares\n   \n   * [**redux-cheerio** - Make HTTP requests and then parse the responses with jQuery selectors using Cheerio](https://github.com/therewillbecode/redux-cheerio)\n    * [**redux-reporter** - Report actions & metadata to 3rd party providers, extremely useful for analytics and error handling (New Relic, Sentry, Adobe DTM, Keen, etc.)](https://github.com/ezekielchentnik/redux-reporter)\n    * [**redux-transduce** - Transducer utilities for Redux](https://github.com/acdlite/redux-transduce)\n    * [**redux-actions** - Flux Standard Action utilities for Redux](https://github.com/acdlite/redux-actions)\n    * [**redux-promise** - FSA-compliant promise middleware for Redux](https://github.com/acdlite/redux-promise)\n    * [**redux-sync-promise** - Middleware for writing asynchronous actions in synchronous style](https://github.com/shanhaichik/redux-sync-promise)\n    * [**redux-simple-promise** - FSA-compliant promise middleware for Redux with simple behaviour with minimal boilerplate declarations](https://github.com/alanrubin/redux-simple-promise)\n    * [**redux-async** - FSA-compliant promise property middleware for Redux](https://github.com/symbiont-io/redux-async)\n    * [**redux-async-queue** - Manage queues of thunk actions](https://github.com/zackargyle/redux-async-queue)\n    * [**redux-async-initial-state** - Set initial Redux state asynchronously](https://github.com/KELiON/redux-async-initial-state)\n    * [**redux-await** - Manage async redux actions sanely](https://github.com/kolodny/redux-await)\n    * [**redux-rx** - RxJS utilities for Redux](https://github.com/acdlite/redux-rx)\n    * [**reselect** - Selector library for Redux like in NuclearJS](https://github.com/faassen/reselect)\n    * [**react-redux** - React bindings for Redux](https://github.com/rackt/react-redux)\n    * [**redux-react-router** - Redux bindings for React Router – keep your router state inside your Redux store](https://github.com/acdlite/redux-react-router)\n    * [**redux-promise-middleware** - Redux middleware for resolving and rejecting promises](https://github.com/pburtchaell/redux-promise-middleware)\n    * [**redux-thunk** - Thunk middleware for Redux](https://github.com/gaearon/redux-thunk)\n    * [**redux-batched-updates** - Batch React updates that occur as a result of Redux dispatches, to prevent cascading renders.](https://github.com/acdlite/redux-batched-updates)\n    * [**redux-combine-actions** - Redux middleware that allows you to easy combine actions and dispatch them sequentially](https://github.com/itsmepetrov/redux-combine-actions)\n    * [**redux-catch-promise** - Extended replacement of redux-thunk middleware to supporting async-await functions and implement server-side rendering for React components with async state](https://github.com/DenisIzmaylov/redux-catch-promise)\n    * [**redux-delegator** - Compose redux reducers in a structured way](https://github.com/lapanoid/redux-delegator)\n    * [**routex** - Simple router for Redux universal applications. Can be used with React too](https://github.com/michalkvasnicak/routex)\n    * [**redux-persist-store** - Persist and rehydrate a redux store](https://github.com/rt2zz/redux-persist-store)\n    * [**adrenaline** - React bindings for Redux with Relay in mind](https://github.com/gyzerok/adrenaline)\n    * [**redux-localstorage** - Store enhancer that syncs (a subset) of your Redux store state to localstorage.](https://github.com/elgerlambert/redux-localstorage)\n    * [**redux-storage** - Persistence layer for redux with flexible backends](https://github.com/michaelcontento/redux-storage)\n    * [**redux-pouchdb** - sync store state to pouchdb](https://github.com/vicentedealencar/redux-pouchdb)\n    * [**redux-vstack-router** - Helpers to bind vstack-router to redux](https://github.com/vslinko/redux-vstack-router)\n    * [**redux-create-store**](https://github.com/phated/redux-create-store)\n    * [**redux-batched-subscribe** - Batch calls to subscribe handlers with a custom function, including debouncing or React batched updates.](https://github.com/tappleby/redux-batched-subscribe)\n    * [**redux-logger** - Logger middleware for Redux](https://github.com/fcomb/redux-logger)\n    * [**redux-node-logger** - A Redux Logger for Node Environments](https://github.com/low-ghost/redux-node-logger)\n    * [**redux-diff-logger** - Diff logger between states for Redux](https://github.com/fcomb/redux-diff-logger)\n    * [**redux-debug** - debug(...) middleware for Redux](https://github.com/lapwinglabs/redux-debug)\n    * [**redux-requests** - Avoid issuing duplicate HTTP requests](https://github.com/idolize/redux-requests)\n    * [**redux-owl** - Redux One Way Linking](https://github.com/rt2zz/redux-owl)\n    * [**redux-act** - An opinionated lib to create actions and reducers for Redux](https://github.com/pauldijou/redux-act)\n    * [**redux-act-async** - Reducing boilerplate when creating asynchronous actions in Redux](https://github.com/FredericHeem/redux-act-async)\n    * [**redux-raven-middleware** - Redux middleware for sending error reports to Sentry through raven-js](https://github.com/ngokevin/redux-raven-middleware)\n    * [**redux-routing** - Universal routing built on top of redux](https://github.com/callum/redux-routing)\n    * [**redux-undo** - Simple undo/redo functionality for redux state containers](https://github.com/omnidan/redux-undo)\n    * [**rn-redux-mixpanel** - Configurable Redux middleware that sends your actions & user profile data to Mixpanel](https://github.com/danscan/rn-redux-mixpanel)\n    * [**redux-falcor** - Connect your redux front-end to your falcor back-end](https://github.com/ekosz/redux-falcor)\n    * [**redux-analytics** - Trigger analytics events based on your event metadata](https://github.com/markdalgleish/redux-analytics)\n    * [**redux-ignore** - Ignore redux actions by array or filter function](https://github.com/omnidan/redux-ignore)\n    * [**redux-recycle** - Reset the redux state on certain actions](https://github.com/omnidan/redux-recycle)\n    * [**re-notif**](https://github.com/indexiatech/re-notif) A notification center based on React & Redux.\n    * [**redux-lunr** - Make your redux store searchable with Lunr.js](https://github.com/swennemans/redux-lunr)\n    * [**redux-ensure-fsa** - Development middleware to check for FSA-compliant actions](https://github.com/meadow/redux-ensure-fsa)\n    * [**redux-pagan** - internationalization via redux](https://github.com/alexkuz/redux-pagan)\n    * [**redux-debounce**](//github.com/wyze/redux-debounce) - Debounce your actions!\n    * [**redux-future** - FSA-compliant future monad middleware for redux](https://github.com/stoeffel/redux-future)\n    * [**redux-io** - FSA-compliant io monad middleware for redux](https://github.com/stoeffel/redux-io)\n    * [**redux-either** - FSA-compliant either monad middleware for redux](https://github.com/stoeffel/redux-either)\n    * [**redux-timeout** - Trigger actions based on timeouts](https://github.com/gpfunk/redux-timeout)\n    * [**redux-observable-middleware** - Redux middleware for subscribing to observables](https://github.com/d6u/redux-observable-middleware)\n    * [**redux-observable** - RxJS 5-based middleware for Redux. Compose and cancel actions as epics.](https://github.com/redux-observable/redux-observable)\n    * [**redux-deferred** - Redux middleware for jQuery Deferred Object](https://github.com/wyvernnot/redux-deferred)\n    * [**redux-task** - A simple Side Effects manager for redux](https://github.com/sskyy/redux-task)\n    * [**redux-gen** - Generator based middleware for redux](https://github.com/weo-edu/redux-gen)\n    * [**redux-authentication** - Authentication component for Redux](https://github.com/Jackong/redux-authentication)\n    * [**socket.io-redux** - Redux middleware to emit action via socket.io](https://github.com/sergiodxa/socket.io-redux)\n    * [**redux-catch** - Error catcher middleware for Redux reducers and middlewares](https://github.com/sergiodxa/redux-catch)\n    * [**redux-elm-middleware** - Elm middleware for redux](https://github.com/stoeffel/redux-elm-middleware)\n    * [**redux-api-middleware** - Redux API middleware based on the real-world example](https://github.com/agraboso/redux-api-middleware)\n    * [**redux-mediaquery** - Redux ActionCreator to put responsive-design breakpoints in your store](https://github.com/Yaska/redux-mediaquery)\n    * [**redux-amrc** - Redux async middleware and reducer creator](https://github.com/lewis617/redux-amrc)\n    * [**redux-fetch-middleware** - Redux middleware that help user to treat simple request via fetch api](https://github.com/zslucky/redux-fetch-middleware)\n\n* Tools\n    * [**reactotron** - Control, monitor, and instrument your React Native apps from the comfort of your TTY](https://github.com/skellock/reactotron)\n    * [**redux-test-recorder** - Redux test recorder is a redux middleware + included component for automagically generating tests for your reducers based on the actions in your app](https://github.com/conorhastings/redux-test-recorder)\n    * [**redux-devtools** - DevTools for Redux with hot reloading, action replay, and customizable UI](https://github.com/gaearon/redux-devtools)\n    * [**react-router-redux** - Ruthlessly simple bindings to keep react-router and redux in sync](https://github.com/rackt/react-router-redux)\n    * [**redux-tiny-router** - A Router made for Redux, stop using the router as a controller it's just state!](https://github.com/Agamennon/redux-tiny-router)\n    * [**redux-devtools-gentest-plugin** - Generate mocha like tests from redux-devtools session](https://github.com/lapanoid/redux-devtools-gentest-plugin)\n    * [**generator-redux** - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n    * [**generator-reactapp** - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n    * [**generator-redux-app** - Scaffold out a redux app with counter example and react-router](https://github.com/chentsulin/generator-redux-app)\n    * [**redux-loader** - A high order component for Redux. This components loads resources and passes them to the child components via props](https://github.com/sporto/redux-loader)\n    * [**redux-rest** - Automatically create Flux action constants, action creators and Redux reducers for your REST API](https://github.com/Kvoti/redux-rest)\n    * [**react-reach** - A library to communicate with Graphql through Redux](https://github.com/kennetpostigo/react-reach)\n    * [**redux-api** - Flux REST API for redux infrastructure](https://github.com/lexich/redux-api)\n    * [**redux-store-validator** - Add validation to your Redux reducers](https://github.com/alixander/redux-store-validator)\n    * [**firedux** - Firebase + Redux for ReactJS](https://github.com/adjohnson916/firedux)\n    * [**vstack-router** - Universal router](https://github.com/vslinko/vstack-router)\n    * [**redux-ecommerce** - E-commerce flux with redux](https://github.com/Tom-Alexander/redux-ecommerce)\n    * [**redux-form** - An ES7 decorator for forms using Redux and React](https://github.com/erikras/redux-form)\n    * [**redux-form-validation** - Form validation for controlled & uncontrolled inputs](https://github.com/posabsolute/redux-form-validator)\n    * [**simple-redux-form** - A tiny redux-form alternative Higher Order Component for forms](https://github.com/mihirsoni/simple-redux-form).\n    * [**redux-slider-monitor** - A custom monitor for Redux DevTools to replay recorded Redux actions](https://github.com/calesce/redux-slider-monitor)\n    * [**updeep** - Easily update nested frozen objects and arrays in a declarative and immutable manner](https://github.com/substantial/updeep)\n    * [**redux-immutable** - Streamlines use of Immutable.js with Redux reducers.](https://github.com/gajus/redux-immutable)\n    * [**redux-import-export-monitor** - A monitor for copying your serialized action log to the clipboard, as well as pasting it in from somewhere else](https://github.com/lapanoid/redux-import-export-monitor)\n    * [**icedam** - Just-in-time immutability: freezes data sent to views.](https://github.com/winkler1/icedam)\n    * [**react-inline-grid** - Predictable flexbox based grid for React using Redux and Immutable-js.](https://github.com/broucz/react-inline-grid)\n    * [**redux-easy-actions** - Sugar library for creating Redux or Flux actions](https://github.com/grigory-leonenko/redux-easy-actions)\n    * [**redux-mount** - Mount state data and change its state values on the fly](https://github.com/popc0rn/redux-mount)\n    * [**redux-multi** - Dispatch multiple actions from one action creator](https://github.com/ashaffer/redux-multi)\n    * [**immu** - A tiny, fail-fast, lazy, immutable Javascript objects library](https://github.com/scottcorgan/immu)\n    * [**Generate standard action creators and reducers for CRUD applications**](https://github.com/Versent/redux-crud)\n    * [**Redux & ImmutableJs** - Integration of Redux & ImmutableJs that 100% conforms Redux standards](https://github.com/indexiatech/redux-immutablejs)\n    * [**redux-tcomb** - Immutable and type-checked state and actions for Redux](https://github.com/gcanti/redux-tcomb)\n    * [**redux-react-router-transitions** - Attach react-router transitions to arbitrary actions](https://github.com/johanneslumpe/redux-react-router-transitions)\n    * [**redux-optimist** - Optimistically apply actions that can be later commited or reverted.](https://github.com/ForbesLindesay/redux-optimist)\n    * [**redux-devtools-diff-monitor** - Redux DevTools – Diff Monitor](https://github.com/whetstone/redux-devtools-diff-monitor)\n    * [**redux-store-visualizer** - Visualize Redux store in real time](https://github.com/romseguy/redux-store-visualizer)\n    * [**generator-redux** - CLI tools for Redux: next-gen functional Flux/React with devtools](https://github.com/banderson/generator-redux)\n    * [**generator-reactapp** - Yeoman generator for react app with redux](https://github.com/Jackong/generator-reactapp)\n    * [**redux-viewmodel** - ViewModel wrapping for Redux & React](https://github.com/tdzl2003/redux-viewmodel)\n    * [**redux-utils** - Utility functions for Redux](https://github.com/newtack/redux-utils)\n    * [**multireducer** - A utility to wrap many copies of a single Redux reducer into a single key-based reducer](https://github.com/erikras/multireducer)\n    * [**subdivide** - User defined UI layout: Every pane can be subdivided and any widget assigned to any pane](https://github.com/philholden/subdivide)\n    * [**replux** - Self contained components and enhancements for Redux](https://github.com/gregthebusker/replux)\n    * [**redux-immutable-utils** - Utilities for using Immutable with Redux](https://github.com/aparticka/redux-immutable-utils)\n    * [**recompose** - A microcomponentization toolkit for React](https://github.com/acdlite/recompose)\n    * [**redux-lift** - Lifting for Redux](https://github.com/izaakschroeder/redux-lift)\n    * [**redux-router5** - router5 integration with Redux](https://github.com/router5/redux-router5)\n    * [**redux-devtools-extension** - Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension)\n    * [**universal-redux-router** - A very simple router for Redux and React that works on both server and client](https://github.com/colinmeinke/universal-redux-router)\n    * [**redux-watch** - Watch/monitor for state changes on an object path](https://github.com/jprichardson/redux-watch)\n    * [**redux-devtools-filterable-log-monitor** - Filterable tree view monitor for Redux DevTools](https://github.com/bvaughn/redux-devtools-filterable-log-monitor)\n    * [**redux-flash-notification** -  A flash notification component for Redux](https://github.com/posabsolute/redux-flash-notification)\n    * [**redux-saga** - An alternative side effect model for Redux apps](https://github.com/yelouafi/redux-saga)\n    * [**remote-redux-devtools** - Use Redux DevTools remotely for React Native, hybrid, desktop and server side Redux apps](https://github.com/zalmoxisus/remote-redux-devtools)\n    * [**redux-devtools-dispatch** - Dispatch your actions manually to test if your app reacts well](https://github.com/YoruNoHikage/redux-devtools-dispatch)\n    * [**redux-loop** - Sequence your effects naturally and purely by returning them from your reducers](https://github.com/raisemarketplace/redux-loop)\n    * [**redux-orm** - A small, simple and immutable ORM to manage data in your Redux store](https://github.com/tommikaikkonen/redux-orm)\n    * [**redux-bacon** - Utilities for attaching Bacon.js to Redux](https://github.com/aparticka/redux-bacon)\n    * [**rereduce** - Reducer library for Redux](https://github.com/slorber/rereduce)\n    * [**redux-decorators** - A ridiculously good syntax for working with Redux and TypeScript. Currently limited to Angular 2 but could potentially be used elsewhere](https://github.com/KarlPurk/redux-decorators)\n    * [**redux-test-reducer** - Simple and clean testing mechanism for Redux reducers](https://github.com/amsardesai/redux-test-reducer)\n    * [**redux-devtools-inspector** - Another Redux DevTools Monitor](https://github.com/alexkuz/redux-devtools-inspector)\n    * [**redux-ava** - Helpers for writing Redux tests in AVA](https://github.com/sotojuan/redux-ava)\n    * [**redux-cli** - An opinionated CLI for building redux/react apps quicker](https://github.com/SpencerCDixon/redux-cli)\n    * [**redux-saga-rxjs** - RxJS implementation of Saga pattern for redux](https://github.com/salsita/redux-saga-rxjs)\n    * [**redux-actions-assertions** - Assertions for redux actions testing](https://github.com/dmitry-zaets/redux-actions-assertions)\n    * [**redux-duck** - Helper function to create Redux modules using the ducks-modular-redux proposal](https://github.com/sergiodxa/redux-duck)\n    * [**redux-dispatch-cli** - A CLI tool for Redux remote dispatch. Used in remote-redux-devtools](https://github.com/jhen0409/redux-dispatch-cli)\n    * [**redux-immutable-reducer** - Immutable reducer states with Redux](https://github.com/zackargyle/redux-immutable-reducer)\n    * [**redux-bootstrap** - configure React + React-Router + Redux + Immutable.js with one function!](https://github.com/redux-bootstrap/redux-bootstrap)\n    * [**redux-director** - Redux bindings to director router](https://github.com/mandeepbrar/redux-director)\n    * [**redux-q** - Provides a way to queue callbacks until an action is dispatched](https://github.com/ConciergeAuctions/redux-q)\n    * [**redux-apist** - Creator API actions for redux-thunk](https://github.com/exeto/redux-apist)\n    * [**reswitch** — Write reducers with less boilerplate](https://github.com/chiefGui/reswitch)\n    * [**redux-autoform** - Create Redux-Forms dynamically out of metadata](https://github.com/redux-autoform/redux-autoform)\n    * [**redux-ship** - Composable, testable and typable side effects](https://github.com/clarus/redux-ship)\n\n* Frameworks\n    * [**Jumpsuit** - A powerful & efficient React framework. Jump in. Zip up. Build great apps.](https://github.com/jumpsuit/jumpsuit)\n    * [**Jumpstate** - Simple and powerful state management for Redux](https://github.com/jumpsuit/jumpstate)\n    * [**dva** - Front-end framework based on react, redux, react-redux, react-router and redux-saga.](https://github.com/sorrycc/dva)\n    * [**Vdux** - World's smallest framework.  Stateless Virtual DOM <-> Redux](https://github.com/ashaffer/vdux)\n    * [**Esex** - Full-stack Universal JavaScript Framework (Redux+RxJs)](https://github.com/esex/esex)\n    * [**Ripster**](https://github.com/vslinko/ripster)\n    * [**Este** - The most complete minimal dev stack / boilerplate for React & Redux universal web apps](https://github.com/este/este)\n    * [**stardux** - Functional DOM containers based on starplate, IncrementalDOM, and redux](https://github.com/littlstar/stardux)\n    * [**nux** - A Push-Based Functional Reactive Web Application Framework](https://github.com/marknutter/nux)\n    * [**Keo** - Plain functions for a more functional Deku approach to creating React components, with functional goodies such as compose, memoize, etc... for free](https://github.com/Wildhoney/Keo)\n    * [**plait** - A minimal JavaScript framework for building reactive web components](https://github.com/wildlyinaccurate/plait)\n    * [**reactuate** — A React/Redux stack (not a boilerplate!) with a focus on Domain-Driven Design](https://github.com/reactuate/reactuate)\n    * [**meatier** - Like meteor, but meatier](https://github.com/mattkrick/meatier)\n    * [**relax** - New generation CMS on top of React, Redux and GraphQL](https://github.com/relax/relax)\n    * [**lovli.js** - A boilerplate for developing react+redux applications with rethinkdb/horizon as realtime database and express for the server](https://github.com/flipace/lovli.js)\n    * [**kea** - Well-readable, self-documenting and easily refactorable framework that brings your data to life! Comes with scaffolding tools](https://github.com/mariusandra/kea-logic) :bird:\n    * [**Feeble** - A framework built on top of React/Redux/redux-saga which aims to make building React/Redux applications easier and better.](https://github.com/tianche/feeble)\n    * [**Conventional-Redux** - A wrapper for react-redux which provides API based on convention over configuration pattern.](https://github.com/mjaneczek/conventional-redux)\n    * [**redux-react-i18n** - An i18n solution for redux/react✌🏿✊🏽🤘🏻](https://github.com/derzunov/redux-react-i18n)\n\n---\n\n### [Examples](examples/README.md)\n\n---\n\n### Similar libraries\n   * [**flux-ts** - A small flux implementation heavily inspired by redux](https://github.com/BobBuehler/flux-ts)\n   * [**chopped-redux** - A very small Flux implementation based on Redux](https://github.com/acstll/chopped-redux)\n   * [**fluxette** - Minimalist, functional, and concise Flux](https://github.com/edge/fluxette)\n   * [**rx-redux** - A reimplementation of redux using RxJS](https://github.com/jas-chen/rx-redux)\n   * [**understate** - A simple state manager](https://github.com/johnhenry/understate)\n   * [**refer** - Redux-like library for handling global state on functional style](https://github.com/Lucifier129/refer)\n   * [**bobflux** - Bobflux is pure functional implementation of FLUX pattern and is fitted to Bobril](https://github.com/karelsteinmetz/bobflux)\n   * [**mobx** - Simple, scalable state management](https://github.com/mobxjs/mobx)\n\n---\n\n### [Deku - Functional view library for building UI components as an alternative to React](https://github.com/dekujs/deku)\n* Examples\n    * [Deku + Express + Redux + Crossroads Router](https://github.com/nivanson/deku-redux-universal-hot-example)\n    * [deku-redux - Bindings for redux in deku (Standalone plugin)](https://github.com/troch/deku-redux)\n)\n\n---\n\n### [Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes](http://google.github.io/incremental-dom)\n* Examples\n    * [Incremental DOM + Redux Flux = Todo App](https://github.com/joshthecoder/idom-redux-todomvc-app)\n\n---\n\n### [WinJS - Windows Library for JavaScript](http://try.buildwinjs.com)\n* Examples\n    * [react-redux-winjs-example](https://github.com/unindented/react-redux-winjs-example)\n\n---\n\n### [Angular - HTML enhanced for web apps](https://angularjs.org)\n* Examples\n    * [Angular + Typescript + Redux](https://github.com/wbuchwalter/tsRedux)\n    * [ng-redux - Standalone plugin](https://github.com/wbuchwalter/ng-redux)\n    * [redux-ui-router - ngRedux middleware for Angular UI Router](https://github.com/neilff/redux-ui-router)\n    * [Todo app with ng-redux • ES6 • Webpack](https://github.com/r-park/todo-angular-redux)\n    * [https://github.com/InfomediaLtd/angular2-redux-example](https://github.com/InfomediaLtd/angular2-redux-example)\n    * [https://github.com/tomusdrw/angular2-redux-example](https://github.com/tomusdrw/angular2-redux-example)\n\n---\n\n### [Angular 2 - One framework. Mobile and desktop](https://angular.io/)\n* Examples\n    * [angular2-redux-example - Example project for using pure Redux with Angular 2 and TypeScript](https://github.com/InfomediaLtd/angular2-redux-example)\n    * [@angular-redux/store - Angular 2 bindings for Redux](https://github.com/angular-redux/store)\n    * [angular2-redux - Wrapper components for using Redux in an Angular2 application](https://github.com/InfomediaLtd/angular2-redux)\n    * [ng2redux - Angular 2 bindings for Redux implemented with TypeScript and decorators](https://github.com/forforeach/ng2redux)\n\n---\n\n### [Vue - A library for building modern web interfaces](http://vuejs.org)\n* Examples\n    * [Revue - Redux binding for Vue](https://github.com/revue/revue)\n    * [Vue + Redux](https://github.com/yang-wei/vue-flux)\n    * [Meteor + Vue + Redux](https://github.com/zhongqf/meteor-vue-redux-example)\n\n---\n\n### [Polymer - Build modern apps using web components](https://www.polymer-project.org)\n* Examples\n    * [polymer-redux](https://github.com/tur-nr/polymer-redux)\n    * [redux-store-element](https://github.com/lastmjs/redux-store-element)\n\n---\n\n### [Ember - A framework for creating ambitious web applications](http://emberjs.com)\n* Examples\n\n---\n\n### [Meteor - Build apps that are a delight to use, faster than you ever thought possible](https://www.meteor.com)\n* Examples\n   * [meteor-react-redux-example](https://github.com/zhongqf/meteor-react-redux-example)\n   * [meteor-flux-leaderboard](https://github.com/AdamBrodzinski/meteor-flux-leaderboard/tree/redux)\n\n---\n\n### [Mithril - A Javascript Framework for Building Brilliant Applications](http://mithril.js.org/)\n* Examples\n    * [mithril-redux-starter-hmr](https://github.com/mijime/mithril-redux-starter-hmr)\n\n---\n\n\n### [Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events](http://backbonejs.org/)\n* Tools\n    * [backbone-redux — The easy way to keep your backbone collections and redux store in sync](https://github.com/redbooth/backbone-redux)\n\n---\n\n### [Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity](http://aurelia.io)\n* Examples\n    * [aurelia-redux-todo - An implementation of the Redux todo demo app using Aurelia](https://github.com/voidberg/aurelia-redux-todo)\n    * [Managing State in Aurelia: How to Use Aurelia with Redux](https://www.sitepoint.com/managing-state-aurelia-with-redux/)\n\n___\n\n### [Riot - A React-like user interface micro-library](http://riotjs.com)\n* Examples\n    * [riotredux-budget](https://github.com/remyhonig/riotredux-budget)\n    * [app-skeleton](https://github.com/zesty-io/app-skeleton)\n\n___\n\n### [Electron - Build cross platform desktop apps with web technologies](http://electron.atom.io/)\n* [electron-react-boilerplate (Electron + Redux + Hot Reload)](https://github.com/chentsulin/electron-react-boilerplate)\n\n___\n\n### [A-Frame - A web framework for building VR experiences](https://aframe.io)\n* [aframe-redux-component](https://github.com/ngokevin/kframe/tree/master/components/redux)\n\n___\n\n### Chrome Extensions\n* [Redux Chrome Extension](https://github.com/Dharmoslap/redux-chrome-extension)\n* [React Chrome Extension Boilerplate (Webpack + Redux + Babel and etc](https://github.com/jhen0409/react-chrome-extension-boilerplate)\n\n* Examples\n    * [Pumgrana Plugin](https://github.com/Pumgrana/plugin)\n\n## Ruby on Rails Resources\n* [React Webpack Rails Tutorial Using Redux](https://github.com/shakacode/react-webpack-rails-tutorial)\n* [react_on_rails gem](https://github.com/shakacode/react_on_rails)\n\n## Other languages\n\n* .NET\n    * [https://github.com/GuillaumeSalles/redux.NET](https://github.com/GuillaumeSalles/redux.NET)\n    * [https://github.com/pshomov/reducto](https://github.com/pshomov/reducto)\n\n* Java\n    * [https://github.com/glung/redux-java](https://github.com/glung/redux-java)\n    * [https://github.com/trikita/jedux](https://github.com/trikita/jedux)\n    * [https://github.com/izumin5210/Droidux](https://github.com/izumin5210/Droidux)\n\n* Swift\n    * [https://github.com/ReSwift/reduxSwift](https://github.com/ReSwift/reduxSwift)\n    * [https://github.com/Swift-Flow/Swift-Flow](https://github.com/Swift-Flow/Swift-Flow)\n    * [https://github.com/ReSwift/ReSwift](https://github.com/ReSwift/ReSwift) and [docs](http://reswift.github.io/ReSwift/master)\n\n* Purescript\n    * [https://github.com/brakmic/purescript-redux](https://github.com/brakmic/purescript-redux)\n    * [https://github.com/faber/purescript-purdux](https://github.com/faber/purescript-purdux)","slug":"Awesome Redux","published":1,"updated":"2017-03-23T12:41:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5fl10002qrez4skzuxy9","content":"<h1 id=\"Awesome-Redux\"><a href=\"#Awesome-Redux\" class=\"headerlink\" title=\"Awesome Redux \"></a>Awesome Redux <a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"external\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\"></a></h1><blockquote>\n<p>List of repositories which use Redux</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a><a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"external\">Redux</a></h2><h2 id=\"Documentation-of-Redux\"><a href=\"#Documentation-of-Redux\" class=\"headerlink\" title=\"Documentation of Redux\"></a><a href=\"http://redux.js.org\" target=\"_blank\" rel=\"external\">Documentation of Redux</a></h2><h2 id=\"Documentation-of-Redux-Simple-Chinese-version\"><a href=\"#Documentation-of-Redux-Simple-Chinese-version\" class=\"headerlink\" title=\"Documentation of Redux(Simple Chinese version)\"></a><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Documentation of Redux(Simple Chinese version)</a></h2><h2 id=\"Documentation-of-Redux-Russian-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Russian-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Russian version) (Work in progress)\"></a><a href=\"https://rajdee.gitbooks.io/redux-in-russian/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Russian version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Traditional-Chinese-version\"><a href=\"#Documentation-of-Redux-Traditional-Chinese-version\" class=\"headerlink\" title=\"Documentation of Redux(Traditional Chinese version)\"></a><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">Documentation of Redux(Traditional Chinese version)</a></h2><h2 id=\"Documentation-of-Redux-Japanese-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Japanese-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Japanese version) (Work in progress)\"></a><a href=\"https://github.com/jposts/redux\" target=\"_blank\" rel=\"external\">Documentation of Redux(Japanese version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Portuguese-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Portuguese-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Portuguese version) (Work in progress)\"></a><a href=\"https://github.com/franzejr/redux-in-portuguese/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Portuguese version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Spanish-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Spanish-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Spanish version) (Work in progress)\"></a><a href=\"https://sergiodxa.gitbooks.io/redux-en-espanol/content/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Spanish version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Korean-version\"><a href=\"#Documentation-of-Redux-Korean-version\" class=\"headerlink\" title=\"Documentation of Redux(Korean version)\"></a><a href=\"http://dobbit.github.io/redux/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Korean version)</a></h2><h2 id=\"Documentation-of-Redux-Sinhala-සිංහල-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Sinhala-සිංහල-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Sinhala|සිංහල version) (Work in progress)\"></a><a href=\"https://sandaruny.github.io/redux-sin/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Sinhala|සිංහල version)</a> (Work in progress)</h2><blockquote>\n<p>Predictable state container for JavaScript apps</p>\n</blockquote>\n<h2 id=\"Marks\"><a href=\"#Marks\" class=\"headerlink\" title=\"Marks\"></a>Marks</h2><ul>\n<li><a href=\"http://isomorphic.net\" target=\"_blank\" rel=\"external\">Universal (Isomorphic)</a> - :metal:</li>\n<li><a href=\"https://github.com/gaearon/react-transform-hmr\" target=\"_blank\" rel=\"external\">Hot Reload</a> - :fire:</li>\n</ul>\n<h3 id=\"Presentations\"><a href=\"#Presentations\" class=\"headerlink\" title=\"Presentations\"></a>Presentations</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=d0oUGmSE6IY&amp;list=PLJBrYU54JD2pTblB20OmV7GL6H5J-p2g8\" target=\"_blank\" rel=\"external\">Let’s learn React and Redux with Javascript’s new ES6 syntax, from Beginner to Intermediate to Advanced.</a></li>\n<li><a href=\"https://github.com/chentsulin/redux-intro\" target=\"_blank\" rel=\"external\">A introduction about Redux</a></li>\n<li><a href=\"https://speakerdeck.com/chrisui/real-world-redux\" target=\"_blank\" rel=\"external\">Real World Redux</a></li>\n<li><a href=\"http://slides.com/omnidan/hor\" target=\"_blank\" rel=\"external\">The power of higher-order reducers</a></li>\n<li><a href=\"http://slides.com/evanschultz-1/reactive-angular\" target=\"_blank\" rel=\"external\">Reactive Architecture with Redux and Angular</a></li>\n<li><a href=\"http://slides.com/vladimirnovick/reduxinternals\" target=\"_blank\" rel=\"external\">Redux Internals</a></li>\n<li><a href=\"http://slides.com/scottprue-2/deck\" target=\"_blank\" rel=\"external\">Replacing Angular 1 with React and Redux</a></li>\n<li><a href=\"http://slides.com/cguedes/a-tour-on-react-ecosystem\" target=\"_blank\" rel=\"external\">A tour on the React ecosystem</a></li>\n<li><a href=\"http://slides.com/jenyaterpil/redux-from-twitter-hype-to-production#/\" target=\"_blank\" rel=\"external\">Redux from Twitter hype to production</a></li>\n</ul>\n<hr>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3><ul>\n<li><a href=\"https://github.com/redux-effects\" target=\"_blank\" rel=\"external\">Many tools and middlewares</a></li>\n<li><a href=\"https://github.com/paulwittmann/redux-offline-docs\" target=\"_blank\" rel=\"external\">Redux offline docs</a></li>\n<li><a href=\"https://github.com/staltz/flux-challenge\" target=\"_blank\" rel=\"external\">Flux challenge</a></li>\n<li><a href=\"https://github.com/andrewngu/sound-redux\" target=\"_blank\" rel=\"external\">Sound Redux - a simple Soundcloud client</a></li>\n<li><a href=\"https://github.com/rwieruch/favesound-redux\" target=\"_blank\" rel=\"external\">Favesound Redux - SoundCloud Client for Artists</a></li>\n<li><a href=\"https://github.com/ipselon/structor\" target=\"_blank\" rel=\"external\">Structor - a user interface builder for React</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\">generator-redux - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\">generator-reactapp - Yeoman generator for react app with redux</a></li>\n<li><a href=\"http://rekit.js.org\" target=\"_blank\" rel=\"external\">Rekit - Toolkit for building scalable web apps with React, Redux and React-router</a></li>\n<li><a href=\"https://github.com/FormidableLabs/spectacle\" target=\"_blank\" rel=\"external\">Spectacle - ReactJS based Presentation Library</a></li>\n<li><a href=\"https://github.com/tayiorbeii/egghead.io_redux_course_notes\" target=\"_blank\" rel=\"external\">Notes (and partial transcription) of Dan Abramov’s Redux course videos on http://egghead.io</a></li>\n<li><a href=\"https://github.com/dwyl/learn-redux\" target=\"_blank\" rel=\"external\">Comprehensive Notes for Learning (how to use) Redux to manage state in your Web/Mobile Apps</a></li>\n<li><a href=\"https://maxfarseer.gitbooks.io/redux-course-ru/content/\" target=\"_blank\" rel=\"external\">React Redux [RU tutorial]</a></li>\n<li><a href=\"https://tonyhb.gitbooks.io/redux-without-profanity/content/index.html\" target=\"_blank\" rel=\"external\">Redux without profanity</a></li>\n<li><a href=\"https://medium.com/@sapegin/react-and-redux-single-page-applications-resources-22cd859b0c1d#.o66rolp0p\" target=\"_blank\" rel=\"external\">React and Redux Single Page Applications Resources</a></li>\n<li><a href=\"https://github.com/markerikson/redux-ecosystem-links\" target=\"_blank\" rel=\"external\">A categorized list of Redux-related addons, libraries, and utilities</a></li>\n<li><a href=\"http://makeitopen.com/tutorials/building-the-f8-app/planning/\" target=\"_blank\" rel=\"external\">Building the F8 2016 App (Redux, GraphQL, React Native)</a></li>\n<li><a href=\"https://github.com/salsita/redux-elm\" target=\"_blank\" rel=\"external\">The Elm Architecture in JavaScript</a></li>\n</ul>\n<hr>\n<h3 id=\"Articles-And-Tutorials\"><a href=\"#Articles-And-Tutorials\" class=\"headerlink\" title=\"Articles And Tutorials\"></a>Articles And Tutorials</h3><ul>\n<li><a href=\"https://app.pluralsight.com/library/courses/react-redux-react-router-es6\" target=\"_blank\" rel=\"external\">Building Applications with React and Redux in ES6 on Pluralsight</a></li>\n<li><a href=\"http://davidandsuzi.com/writing-a-basic-app-in-redux\" target=\"_blank\" rel=\"external\">Writing a Basic App in Redux</a></li>\n<li><a href=\"https://github.com/happypoulp/redux-tutorial\" target=\"_blank\" rel=\"external\">Learn how to use Redux step by step</a></li>\n<li><a href=\"https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4\" target=\"_blank\" rel=\"external\">Tutorial: Handcrafting an Isomorphic Redux Application (With Love)</a></li>\n<li><a href=\"http://www.jchapron.com/2015/08/14/getting-started-with-redux\" target=\"_blank\" rel=\"external\">0 to 1 : Getting started with Redux</a></li>\n<li><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Redux Chinese Document</a></li>\n<li><a href=\"https://github.com/chentsulin/redux\" target=\"_blank\" rel=\"external\">Redux Document (Traditional Chinese)</a></li>\n<li><a href=\"https://medium.com/@cpojer/relay-and-routing-36b5439bad9\" target=\"_blank\" rel=\"external\">Relay and Routing</a></li>\n<li><a href=\"https://medium.com/@meagle/understanding-87566abcfb7a\" target=\"_blank\" rel=\"external\">Understanding Redux Middleware</a></li>\n<li><a href=\"https://www.livecoding.tv/ekosz/videos\" target=\"_blank\" rel=\"external\">Several videos about Redux + Falcor</a> and <a href=\"https://github.com/ekosz/postcard-sender\" target=\"_blank\" rel=\"external\">Example code</a></li>\n<li><a href=\"http://briantroncone.com/?p=529\" target=\"_blank\" rel=\"external\">Redux Middleware: Behind the Scenes</a></li>\n<li><a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"external\">A proposal for bundling reducers, action types and actions when using Redux</a></li>\n<li><a href=\"http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html\" target=\"_blank\" rel=\"external\">Full-Stack Redux Tutorial - A Comprehensive Guide to Test-First Development with Redux, React, and Immutable</a> Source <a href=\"https://github.com/teropa/redux-voting-server\" target=\"_blank\" rel=\"external\">Server</a> + <a href=\"https://github.com/teropa/redux-voting-client\" target=\"_blank\" rel=\"external\">Client</a></li>\n<li><a href=\"https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e\" target=\"_blank\" rel=\"external\">Redux best practices</a></li>\n<li><a href=\"http://blog.workshape.io/the-3ree-stack-react-redux-rethinkdb-express-js\" target=\"_blank\" rel=\"external\">The 3REE Stack: React + Redux + RethinkDB + Express.js</a></li>\n<li><a href=\"http://engineering.wework.com/process/2015/10/01/react-reflux-to-redux\" target=\"_blank\" rel=\"external\">React Tutorial - Converting Reflux to Redux</a></li>\n<li><a href=\"https://github.com/yildizberkay/redux-example\" target=\"_blank\" rel=\"external\">Redux example using 500px API (with ES6)</a></li>\n<li><a href=\"http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/\" target=\"_blank\" rel=\"external\">Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS</a> - This article explains in detail how <a href=\"https://github.com/mezod/boilerplate-koa-redux-react\" target=\"_blank\" rel=\"external\">this koa-redux-react-boilerplate</a> was built and the technologies it uses.</li>\n<li><a href=\"http://jaysoo.ca/2015/09/26/typed-react-and-redux\" target=\"_blank\" rel=\"external\">Typed React and Redux</a></li>\n<li><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.8k7536uqu\" target=\"_blank\" rel=\"external\">A cartoon intro to Redux</a></li>\n<li><a href=\"http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors\" target=\"_blank\" rel=\"external\">Join The Dark Side Of The Flux: Responding to Actions with Actors</a></li>\n<li><a href=\"http://jamesknelson.com/can-i-dispatch-multiple-actions-from-redux-action-creators\" target=\"_blank\" rel=\"external\">Can I dispatch multiple actions from Redux action creators?</a></li>\n<li><a href=\"http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container\" target=\"_blank\" rel=\"external\">Understanding Redux (or, How I Fell in Love with a JavaScript State Container)</a></li>\n<li><a href=\"http://reactjsnews.com/your-first-redux-app\" target=\"_blank\" rel=\"external\">Your First Immutable React &amp; Redux App</a></li>\n<li><a href=\"https://egghead.io/series/getting-started-with-redux\" target=\"_blank\" rel=\"external\">Getting Started with Redux - Egghead’s video lessons from Dan Abramov</a></li>\n<li><a href=\"https://egghead.io/series/react-testing-cookbook\" target=\"_blank\" rel=\"external\">Redux Testing Video Lessons - a few short Egghead video lessons (some free, some require a subscription)</a></li>\n<li><a href=\"https://medium.com/@dorsha/implement-login-modal-with-redux-reselect-and-reactjs-668c468bcbe3#.lnwisap8c\" target=\"_blank\" rel=\"external\">Implementing a smart Login Modal with Redux, reselect and ReactJS</a></li>\n<li><a href=\"http://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js\" target=\"_blank\" rel=\"external\">How to Build a Todo App Using React, Redux, and Immutable.js</a></li>\n<li><a href=\"https://voice.kadira.io/rethinking-redux-f1e96daba60c#.hp5v516ie\" target=\"_blank\" rel=\"external\">Rethinking Redux</a></li>\n<li><a href=\"http://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas\" target=\"_blank\" rel=\"external\">Managing Side Effects In React + Redux Using Sagas</a></li>\n<li><a href=\"https://auth0.com/blog/2016/01/04/secure-your-react-and-redux-app-with-jwt-authentication\" target=\"_blank\" rel=\"external\">Secure Your React and Redux App with JWT Authentication</a></li>\n<li><a href=\"https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56#.3anuh1m7x\" target=\"_blank\" rel=\"external\">Getting started with Redux and GraphQL</a></li>\n<li><a href=\"http://www.sitepoint.com/data-flows-angular-2-redux\" target=\"_blank\" rel=\"external\">Data Flows with Angular 2 and Redux</a></li>\n<li><a href=\"http://jamesknelson.com/simple-routing-redux-react\" target=\"_blank\" rel=\"external\">Simple Routing with Redux and React</a></li>\n<li><a href=\"https://riadbenguella.com/2015/12/28/redux-nowadays-from-actions-creators-to-sagas/\" target=\"_blank\" rel=\"external\">Redux nowadays : From actions creators to sagas</a></li>\n<li><a href=\"http://konkle.us/master-complex-redux-workflows-with-sagas\" target=\"_blank\" rel=\"external\">Master Complex Redux Workflows with Sagas</a></li>\n<li><a href=\"http://blog.jhades.org/angular-2-application-architecture-building-flux-like-apps-using-redux-and-immutable-js-js\" target=\"_blank\" rel=\"external\">Angular 2 Application Architecture - Building Flux Apps with Redux and Immutable.js</a></li>\n<li><a href=\"http://www.toptal.com/react/react-redux-and-immutablejs\" target=\"_blank\" rel=\"external\">React, Redux and Immutable.js: Ingredients for Efficient Web Applications</a></li>\n<li><a href=\"https://shellmonger.com/2016/02/16/an-introduction-to-react-redux-part-1\" target=\"_blank\" rel=\"external\">An Introduction to React Redux (Part 1)</a></li>\n<li><a href=\"https://shellmonger.com/2016/02/19/an-introduction-to-react-redux-part-2\" target=\"_blank\" rel=\"external\">An Introduction to React Redux (Part 2)</a></li>\n<li><a href=\"http://jaysoo.ca/2016/02/28/organizing-redux-application\" target=\"_blank\" rel=\"external\">Rules For Structuring (Redux) Applications</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2016/01/22/redux-for-the-very-beginner\" target=\"_blank\" rel=\"external\">Redux for the very beginner</a></li>\n<li><a href=\"http://www.zohaib.me/redux-call-service-async/\" target=\"_blank\" rel=\"external\">Redux - Calling web service asynchronously</a></li>\n<li><a href=\"http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775\" target=\"_blank\" rel=\"external\">Animating with React, Redux, and d3</a></li>\n<li><a href=\"http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/\" target=\"_blank\" rel=\"external\">Build an Image Gallery Using React, Redux and redux-saga</a></li>\n<li><a href=\"https://medium.com/@matt.krick/introducing-redux-operations-332ab56e468b#.7e30nsxne\" target=\"_blank\" rel=\"external\">Introducing redux-operations</a></li>\n<li><a href=\"https://medium.com/@matt.krick/solving-redux-s-shortcoming-in-150-locs-540979ce6cf9#.sw0s478j6\" target=\"_blank\" rel=\"external\">Solving Redux’s shortcoming in 150 LOCs</a></li>\n<li><a href=\"https://medium.com/@rajaraodv/the-anatomy-of-a-react-redux-app-759282368c5a#.h05vq2uaj\" target=\"_blank\" rel=\"external\">The Anatomy Of A React Redux App</a></li>\n<li><a href=\"http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/\" target=\"_blank\" rel=\"external\">Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2)</a></li>\n<li><a href=\"https://css-tricks.com/learning-react-redux/\" target=\"_blank\" rel=\"external\">Leveling Up with React: Redux</a></li>\n<li><a href=\"http://btholt.github.io/complete-intro-to-react/\" target=\"_blank\" rel=\"external\">Complete intro to react</a></li>\n<li><a href=\"https://medium.com/@nicktho/recreating-redux-behind-the-magic-curtain-c21edd542c9c#.a93sgufyi\" target=\"_blank\" rel=\"external\">Recreating Redux — Behind the magic curtain</a></li>\n<li><a href=\"https://stormpath.com/blog/build-a-redux-powered-react-application/\" target=\"_blank\" rel=\"external\">Let’s Build a Redux Powered React Application</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/intro-to-react-redux-pros\" target=\"_blank\" rel=\"external\">Deep Introduction to Redux - Seriese 1/3</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/redux-server-rendering-react-router-universal-web-app\" target=\"_blank\" rel=\"external\">Universal Rendering with Redux and React-Router - Seriese 2/3</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/redux-unit-test-mocha-mocking\" target=\"_blank\" rel=\"external\">Unit Testing Redux Apps - Seriese 3/3</a></li>\n<li><a href=\"https://zen.id.au/using-aurelia-and-redux-together-for-good-times-all-around/\" target=\"_blank\" rel=\"external\">Using Aurelia and Redux together for good times all around</a></li>\n<li><a href=\"https://www.reindex.io/blog/redux-and-relay/\" target=\"_blank\" rel=\"external\">Comparing Redux and Relay</a></li>\n<li><a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"external\">Building React Applications with Idiomatic Redux</a></li>\n<li><a href=\"http://www.robinwieruch.de/the-soundcloud-client-in-react-redux\" target=\"_blank\" rel=\"external\">The SoundCloud Client in React + Redux</a></li>\n<li><a href=\"https://github.com/berwin/Blog/issues/4\" target=\"_blank\" rel=\"external\">深入浅出 Redux</a></li>\n<li><a href=\"http://houssein.me/redux/immutablejs/angular2/2016/07/04/angular2-with-immutablejs-and-redux.html\" target=\"_blank\" rel=\"external\">Building Angular 2 applications with Immutable.js and Redux</a></li>\n<li><a href=\"http://blog.ng-book.com/introduction-to-redux-with-typescript-and-angular-2/\" target=\"_blank\" rel=\"external\">Tutorial: Building Redux in TypeScript with Angular 2</a></li>\n<li><a href=\"http://blog.rangle.io/react-and-redux-performance-with-reselect/\" target=\"_blank\" rel=\"external\">Improving React and Redux performance with Reselect</a></li>\n<li><a href=\"http://blog.rangle.io/recipes-for-redux/\" target=\"_blank\" rel=\"external\">Recipes for Redux</a></li>\n<li><a href=\"http://blog.rangle.io/getting-started-with-redux-and-angular-2/\" target=\"_blank\" rel=\"external\">Getting Started with Redux &amp; Angular 2</a></li>\n<li><a href=\"https://el-tramo.be/blog/react-swift/\" target=\"_blank\" rel=\"external\">Universal/Isomorphic React+Redux on a Swift Web Backend</a></li>\n<li><a href=\"http://engineering.datadoghq.com/redux-doghouse--creating-reusable-react-redux-components-through-scoping/\" target=\"_blank\" rel=\"external\">Creating Reusable React-Redux Components Through Scoping</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\" target=\"_blank\" rel=\"external\">React+Redux系列教程</a></li>\n<li><a href=\"https://lewis617.github.io/2016/11/20/r2-book/\" target=\"_blank\" rel=\"external\">书籍：《React 与 Redux 开发实例精解》</a></li>\n</ul>\n<hr>\n<h3 id=\"Boilerplate\"><a href=\"#Boilerplate\" class=\"headerlink\" title=\"Boilerplate\"></a>Boilerplate</h3><ul>\n<li><a href=\"http://redux-minimal.js.org/\" target=\"_blank\" rel=\"external\"><strong>redux-minimal</strong> - Minimalist react-redux starter kit which let’s you build rich real world apps</a></li>\n<li><a href=\"https://github.com/nicksp/redux-webpack-es6-boilerplate\" target=\"_blank\" rel=\"external\"><strong>Modern and Scalable React/Redux Boilerplate</strong> - Flexible starter kit using Webpack 2 (tree-shaking) / React Hot Loader v3 / Code Splitting for React Router / PostCSS / CSS Modules / custom <em>Ducks pattern</em> app architecture / best practices / Sentry error tracking / Enzyme test environment</a> :rocket:</li>\n<li><a href=\"https://github.com/jaredpalmer/react-production-starter\" target=\"_blank\" rel=\"external\"><strong>react-production-starter</strong> - React boilerplate with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting.</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/hashnode/mern-starter\" target=\"_blank\" rel=\"external\"><strong>mern.io</strong> - Simple full-stack boilerplate to get started with building isomorphic/universal apps, handles api part and also offers a cli to generate the boilerplate</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/combine/universal-react-redux\" target=\"_blank\" rel=\"external\"><strong>universal-react-redux</strong> - Opinionated Universal React/Redux/Webpack with HMR. Continually updated.</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/coryhouse/react-slingshot\" target=\"_blank\" rel=\"external\"><strong>react-slingshot</strong> - React Redux Starter Kit with hot reloading, tests and example app</a></li>\n<li><a href=\"https://github.com/knowbody/react-redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-redux-boilerplate</strong> - React Redux Boilerplate</a></li>\n<li><a href=\"https://github.com/Keats/react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-boilerplate</strong> - React + Typescript + Sass boilerplate</a></li>\n<li><a href=\"https://github.com/lcjnil/react-redux-scaffold\" target=\"_blank\" rel=\"external\"><strong>react-redux-scaffold</strong> - Combination of redux, react-router and ES6+ support</a></li>\n<li><a href=\"https://github.com/tsaiDavid/simple-redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>simple-redux-boilerplate</strong> - Simple and guided React, Redux boilerplate w/ Transform HMR! :fire:</a></li>\n<li><a href=\"https://github.com/Amorino/reactv\" target=\"_blank\" rel=\"external\"><strong>reactv</strong> - React Redux example</a></li>\n<li><a href=\"https://github.com/ellbee/redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-boilerplate</strong> - Boilerplate for Redux</a></li>\n<li><a href=\"https://github.com/davezuko/react-redux-starter-kit\" target=\"_blank\" rel=\"external\"><strong>react-redux-starter-kit</strong> - Get started with React, Redux, and React-Router.</a></li>\n<li><a href=\"https://github.com/jackielii/simplest-redux-example\" target=\"_blank\" rel=\"external\"><strong>simplest-redux-example</strong> - Simplest Redux + React example for beginners</a></li>\n<li><a href=\"https://github.com/anorudes/redux-easy-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-easy-boilerplate</strong> - React Redux easy boilerplate</a></li>\n<li><a href=\"https://github.com/dictyBase/dicty-redux\" target=\"_blank\" rel=\"external\"><strong>dicty-redux</strong> - Starter kit to bootstrap React and Redux (Flux) based web application</a></li>\n<li><a href=\"https://github.com/GordyD/3ree\" target=\"_blank\" rel=\"external\"><strong>3ree</strong> - Boilerplate &amp; Demo for Universal Realtime Apps built with React + Redux + RethinkDB + Express</a></li>\n<li><a href=\"https://github.com/rafaelchiti/react_scaffolding\" target=\"_blank\" rel=\"external\"><strong>react_scaffolding</strong> - React + React Router 1.0 + Redux + Webpack &amp; Hot Module Replacement</a></li>\n<li><a href=\"https://github.com/aybmab/express-redux-sample\" target=\"_blank\" rel=\"external\"><strong>express-redux-sample</strong> - Express-Redux-PassportJs-MySQL Boilerplate</a></li>\n<li><a href=\"https://github.com/GetExpert/redux-blog-example\" target=\"_blank\" rel=\"external\"><strong>redux-blog-example</strong> - Redux-Webpack-Babel Blog Platform boilerplate</a></li>\n<li><a href=\"https://github.com/omnidan/redux-undo-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-undo-boilerplate</strong> - a magical boilerplate with hot reloading and awesome error handling</a></li>\n<li><a href=\"https://github.com/gpbl/redux500\" target=\"_blank\" rel=\"external\"><strong>redux500</strong> - The Redux version of isomorphic500</a></li>\n<li><a href=\"https://github.com/survivejs/redux-demo\" target=\"_blank\" rel=\"external\"><strong>redux-demo</strong> - Redux port of SurviveJS - Webpack and React Kanban app</a></li>\n<li><a href=\"https://github.com/erikras/react-redux-universal-hot-example\" target=\"_blank\" rel=\"external\"><strong>react-redux-universal-hot-example</strong> - A starter boilerplate for a universal webapp using express, react, redux, webpack, and react-hot-loader</a> :metal:</li>\n<li><a href=\"https://github.com/levjj/rde\" target=\"_blank\" rel=\"external\"><strong>rde</strong> - Reactive Live Programming Environment</a></li>\n<li><a href=\"https://github.com/cloudmu/react-redux-starter-kit\" target=\"_blank\" rel=\"external\"><strong>React Redux Starter Kit</strong> - Yet another React and Redux based web application starter kit</a></li>\n<li><a href=\"https://github.com/sullenor/skeleton\" target=\"_blank\" rel=\"external\"><strong>skeleton</strong> - A simple project-stub to show the basic ideas. Also serves you as a quick start for your project (Mori + Redux)</a></li>\n<li><a href=\"https://github.com/zalmoxisus/browser-redux\" target=\"_blank\" rel=\"external\"><strong>browser-redux</strong> - Building Chrome apps and cross-browser extensions with Redux and Webpack</a></li>\n<li><a href=\"https://github.com/chicoxyzzy/react-for-hipsters-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-for-hipsters-boilerplate</strong> - Fresh boilerplate with brand new hot reloading confing and other hipster stuff</a></li>\n<li><a href=\"https://github.com/mezod/boilerplate-koa-redux-react\" target=\"_blank\" rel=\"external\"><strong>Documented Koa Redux React Webpack boilerplate</strong></a>- The building process of this boilerplate is deeply documented from 0 for learning purposes. <a href=\"http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/\" target=\"_blank\" rel=\"external\">You can find the docs here</a>.</li>\n<li><a href=\"https://github.com/tuommii/err\" target=\"_blank\" rel=\"external\"><strong>err</strong> - Electron, React, Redux-devtools boilerplate for building cross-platform apps.</a></li>\n<li><a href=\"https://github.com/banzay/friends-app-redux\" target=\"_blank\" rel=\"external\"><strong>friends-app-redux</strong> - React Redux Universal Hot Example</a></li>\n<li><a href=\"https://github.com/caljrimmer/isomorphic-redux-app\" target=\"_blank\" rel=\"external\"><strong>isomorphic-redux-app</strong> - Redux Isomorphic App (with async content)</a></li>\n<li><a href=\"https://github.com/unicorn-standard/starter-kit\" target=\"_blank\" rel=\"external\"><strong>starter-kit</strong> - Project boilerplate using React, Redux and Uniloc http://unicornstandard.com/packages/boilerplate.html</a></li>\n<li><a href=\"https://github.com/tngan/loopback-redux-react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>loopback-redux-react-boilerplate</strong> - A boilerplate for a Redux-React application using LoopBack</a></li>\n<li><a href=\"https://github.com/tomatau/breko-hub\" target=\"_blank\" rel=\"external\"><strong>breko-hub</strong> - <strong>B</strong>abel <strong>Rea</strong>ct <strong>Ko</strong>a <strong>H</strong>ot <strong>U</strong>niversal <strong>B</strong>oilerplate – A simple, clean and consistent boilerplate for creating universal webapps with universal data fetching and SocketIO integration</a></li>\n<li><a href=\"https://github.com/inderps/react-redux-cordova-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Cordova Boilerplate</strong></a></li>\n<li><a href=\"https://github.com/mxstbr/react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-boilerplate</strong> - Performance orientated, offline-first boilerplate feat. hot-reloading, PostCSS and the best developer experience.</a></li>\n<li><a href=\"https://github.com/choonkending/react-webpack-node\" target=\"_blank\" rel=\"external\"><strong>react-webpack-node</strong> - Boilerplate for an universal React + Redux/alt Flux application using Webpack running on a node express server</a></li>\n<li>[<strong>Hapi React Starter Kit</strong> - Universal, Redux, Redis, Socket.io, Intl] (<a href=\"https://github.com/Dindaleon/hapi-react-starter-kit\" target=\"_blank\" rel=\"external\">https://github.com/Dindaleon/hapi-react-starter-kit</a>)</li>\n<li>[<strong>Universal Redux Template</strong> - A clean, extensible react + redux boilerplate with universal rendering, testing and more] (<a href=\"https://github.com/mz026/universal-redux-template\" target=\"_blank\" rel=\"external\">https://github.com/mz026/universal-redux-template</a>)</li>\n<li><a href=\"https://github.com/colinmeinke/universal-js\" target=\"_blank\" rel=\"external\"><strong>universal-js</strong> - A universal Javascript starter kit inc. React, Redux, Redux Dev Tools, Universal Redux Router, CSS Modules, hot module reloading, Babel for ES2015+ and ESLint</a></li>\n<li><a href=\"https://github.com/WapGeaR/redux-react-material-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-react-material-boilerplate</strong> - Simple boilerplate inc. React, Redux, Hot reload and Material-ui</a></li>\n<li><a href=\"https://github.com/exeto/react-redux-starter\" target=\"_blank\" rel=\"external\"><strong>react-redux-starter</strong> - React Redux Starter</a></li>\n<li><a href=\"https://github.com/Pitzcarraldo/reduxible\" target=\"_blank\" rel=\"external\"><strong>Reduxible</strong> - The Fast and Easy way to make a React + Redux apps</a></li>\n<li><a href=\"https://github.com/chen844033231/react-workflow\" target=\"_blank\" rel=\"external\"><strong>react-workflow</strong> - A large SPA boilerplate for web development built on top of Facebook’s React library,use redux architecture</a></li>\n<li><a href=\"https://github.com/PBRT/reactogo\" target=\"_blank\" rel=\"external\"><strong>ReacToGo</strong> - A simple ES6 boilerplate with Redux architecture and ImmutableJS: Hot Reload, React UI Comp, Firebase, Router</a></li>\n<li><a href=\"https://github.com/cristianszwarc/react_crud_localStorage\" target=\"_blank\" rel=\"external\"><strong>React/Redux simple CRUD</strong> with persistent state and local async actions (add a manifest file and you get an offline webapp) </a></li>\n<li><a href=\"https://github.com/FredericHeem/starhackit\" target=\"_blank\" rel=\"external\"><strong>StarHackIt</strong> - An React/Redux Node full-stack starter kit with authentication and authorization code</a></li>\n<li><a href=\"https://github.com/andrewcoelho/react-seed\" target=\"_blank\" rel=\"external\"><strong>React Seed</strong> - A barebones scalable directory structure and package.json for facilitating new React + Redux projects. No fat to trim here!</a></li>\n<li>[<strong>React/Redux with Auth boilerplate</strong> - Very simple boilerplate, good for fast creating admin panels / dashboard. Included: React, Redux, ReduxForm, React-Router, Simple Authenticate, Hot Reload and Webpack (with babel) :fire:] (<a href=\"https://github.com/WapGeaR/react-redux-boilerplate-auth\" target=\"_blank\" rel=\"external\">https://github.com/WapGeaR/react-redux-boilerplate-auth</a>)</li>\n<li><a href=\"https://github.com/Producters/docker-node-react-starter\" target=\"_blank\" rel=\"external\"><strong>Docker + React/Redux + Node + PostgreSQL</strong> - full stack boilerplate with fully dockerized workflows for development, deployment, testing</a></li>\n<li><a href=\"https://github.com/ufocoder/redux-universal-boilerplate\" target=\"_blank\" rel=\"external\"><strong>Redux universal boilerplate</strong> - boilerplate for react universal application building on flux architecture based on redux implementation.</a></li>\n<li><a href=\"https://github.com/kiki-le-singe/react-redux-universal-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Universal Boilerplate</strong> - An Universal ReactJS/Redux Boilerplate.</a></li>\n<li><a href=\"https://github.com/douglascorrea/react-hot-redux-firebase-starter\" target=\"_blank\" rel=\"external\"><strong>react-hot-redux-firebase-starter</strong> - Starter boilerplate for using React/Redux with Firebase 3.0 API, include the new React Hot Loader 3.0 :fire:</a></li>\n<li><a href=\"https://github.com/btomashvili/react-redux-firebase-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Firebase Boilerplate</strong> - Designed for quickly spin up your apps with Firebase, using bunch of awesome new front-end technologies includes webpack build system, hot reloading, routing &amp; sass support. :fire:</a></li>\n<li><a href=\"https://github.com/xkawi/react-universal-saga\" target=\"_blank\" rel=\"external\"><strong>React Universal Saga</strong> - Universal React Starter Kit ft. Redux Saga</a></li>\n<li><a href=\"https://github.com/rwieruch/react-redux-soundcloud\" target=\"_blank\" rel=\"external\"><strong>React Redux SoundCloud Client</strong> - Seed Project for a SoundCloud Client with working Login + Extension Seed Projects</a></li>\n<li><a href=\"https://github.com/barbar/vortigern\" target=\"_blank\" rel=\"external\"><strong>vortigern</strong> - A universal boilerplate for building web applications w/ TypeScript, React, Redux and more.</a></li>\n<li><a href=\"https://github.com/hdjirdeh/angular2-redux-contact-list\" target=\"_blank\" rel=\"external\"><strong>angular2-redux-contact-list</strong> - Simple contact list built with Angular 2, Immutable.js and Redux</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-seed\" target=\"_blank\" rel=\"external\"><strong>react-redux-seed</strong> - 使用 React 与 Redux 实现 Universal 渲染的种子工程</a></li>\n<li><a href=\"https://arc.js.org\" target=\"_blank\" rel=\"external\"><strong>ARc</strong> - A progressive React starter kit based on Atomic Design with redux, redux-saga and redux-form</a></li>\n<li><a href=\"https://github.com/dogada/edux\" target=\"_blank\" rel=\"external\"><strong>edux</strong> - fast Redux without constants and switches. Actions and reducers are generated from single source.</a></li>\n</ul>\n<hr>\n<h3 id=\"React-Native-A-framework-for-building-native-apps-using-React\"><a href=\"#React-Native-A-framework-for-building-native-apps-using-React\" class=\"headerlink\" title=\"React Native - A framework for building native apps using React\"></a><a href=\"https://facebook.github.io/react-native\" target=\"_blank\" rel=\"external\">React Native - A framework for building native apps using React</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/nikgraf/CarteJaune\" target=\"_blank\" rel=\"external\">CarteJaune - An open source Redux/ExponentJS (React Native) app leveraging redux-saga to keep track of your vaccinations</a></li>\n<li><a href=\"https://github.com/soliury/noder-react-native\" target=\"_blank\" rel=\"external\">noder-react-native - The mobile app of cnodejs.org written in React Native</a></li>\n<li><a href=\"https://github.com/hzyIO/react-native-redux-counter\" target=\"_blank\" rel=\"external\">react-native-redux-counter</a></li>\n<li><a href=\"https://github.com/chentsulin/react-native-counter-ios-android\" target=\"_blank\" rel=\"external\">react-native-counter-ios-android</a></li>\n<li><a href=\"https://github.com/bruz/react-native-redux-groceries\" target=\"_blank\" rel=\"external\">react-native-redux-groceries - An example app using React Native, Redux, Firebase, and AsyncStorage for offline data</a></li>\n<li><a href=\"https://github.com/fraserxu/soundredux-native\" target=\"_blank\" rel=\"external\">react-native-sound-cloud</a></li>\n<li><a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"external\">snowflake - mobile app starter: Login, Logout, Reset Password, Update Profile, Hot Reload</a></li>\n<li><a href=\"https://github.com/just4fun/uestc-bbs-react-native\" target=\"_blank\" rel=\"external\">uestc-bbs-react-native - An iOS client for http://bbs.uestc.edu.cn/ written in React Native with Redux</a></li>\n<li><a href=\"https://github.com/nara/movies-redux\" target=\"_blank\" rel=\"external\">movies-redux - redux implementation of react-native movies example that is included in react-native source</a></li>\n<li><a href=\"https://github.com/uiheros/react-native-redux-todo-list\" target=\"_blank\" rel=\"external\">react-native-redux-todo-list - A sample todo list app developed by using react-native and redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"React-A-JavaScript-library-for-building-user-interfaces\"><a href=\"#React-A-JavaScript-library-for-building-user-interfaces\" class=\"headerlink\" title=\"React - A JavaScript library for building user interfaces\"></a><a href=\"http://facebook.github.io/react\" target=\"_blank\" rel=\"external\">React - A JavaScript library for building user interfaces</a></h3><ul>\n<li><p>Containers</p>\n<ul>\n<li><a href=\"https://github.com/LouisBarranqueiro/reapop\" target=\"_blank\" rel=\"external\"><strong>reapop</strong> - A React &amp; Redux notifications system</a></li>\n</ul>\n</li>\n<li><p>Middlewares</p>\n<ul>\n<li><a href=\"https://github.com/therewillbecode/redux-cheerio\" target=\"_blank\" rel=\"external\"><strong>redux-cheerio</strong> - Make HTTP requests and then parse the responses with jQuery selectors using Cheerio</a><ul>\n<li><a href=\"https://github.com/ezekielchentnik/redux-reporter\" target=\"_blank\" rel=\"external\"><strong>redux-reporter</strong> - Report actions &amp; metadata to 3rd party providers, extremely useful for analytics and error handling (New Relic, Sentry, Adobe DTM, Keen, etc.)</a></li>\n<li><a href=\"https://github.com/acdlite/redux-transduce\" target=\"_blank\" rel=\"external\"><strong>redux-transduce</strong> - Transducer utilities for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-actions\" target=\"_blank\" rel=\"external\"><strong>redux-actions</strong> - Flux Standard Action utilities for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-promise\" target=\"_blank\" rel=\"external\"><strong>redux-promise</strong> - FSA-compliant promise middleware for Redux</a></li>\n<li><a href=\"https://github.com/shanhaichik/redux-sync-promise\" target=\"_blank\" rel=\"external\"><strong>redux-sync-promise</strong> - Middleware for writing asynchronous actions in synchronous style</a></li>\n<li><a href=\"https://github.com/alanrubin/redux-simple-promise\" target=\"_blank\" rel=\"external\"><strong>redux-simple-promise</strong> - FSA-compliant promise middleware for Redux with simple behaviour with minimal boilerplate declarations</a></li>\n<li><a href=\"https://github.com/symbiont-io/redux-async\" target=\"_blank\" rel=\"external\"><strong>redux-async</strong> - FSA-compliant promise property middleware for Redux</a></li>\n<li><a href=\"https://github.com/zackargyle/redux-async-queue\" target=\"_blank\" rel=\"external\"><strong>redux-async-queue</strong> - Manage queues of thunk actions</a></li>\n<li><a href=\"https://github.com/KELiON/redux-async-initial-state\" target=\"_blank\" rel=\"external\"><strong>redux-async-initial-state</strong> - Set initial Redux state asynchronously</a></li>\n<li><a href=\"https://github.com/kolodny/redux-await\" target=\"_blank\" rel=\"external\"><strong>redux-await</strong> - Manage async redux actions sanely</a></li>\n<li><a href=\"https://github.com/acdlite/redux-rx\" target=\"_blank\" rel=\"external\"><strong>redux-rx</strong> - RxJS utilities for Redux</a></li>\n<li><a href=\"https://github.com/faassen/reselect\" target=\"_blank\" rel=\"external\"><strong>reselect</strong> - Selector library for Redux like in NuclearJS</a></li>\n<li><a href=\"https://github.com/rackt/react-redux\" target=\"_blank\" rel=\"external\"><strong>react-redux</strong> - React bindings for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-react-router\" target=\"_blank\" rel=\"external\"><strong>redux-react-router</strong> - Redux bindings for React Router – keep your router state inside your Redux store</a></li>\n<li><a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-promise-middleware</strong> - Redux middleware for resolving and rejecting promises</a></li>\n<li><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\"><strong>redux-thunk</strong> - Thunk middleware for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-batched-updates\" target=\"_blank\" rel=\"external\"><strong>redux-batched-updates</strong> - Batch React updates that occur as a result of Redux dispatches, to prevent cascading renders.</a></li>\n<li><a href=\"https://github.com/itsmepetrov/redux-combine-actions\" target=\"_blank\" rel=\"external\"><strong>redux-combine-actions</strong> - Redux middleware that allows you to easy combine actions and dispatch them sequentially</a></li>\n<li><a href=\"https://github.com/DenisIzmaylov/redux-catch-promise\" target=\"_blank\" rel=\"external\"><strong>redux-catch-promise</strong> - Extended replacement of redux-thunk middleware to supporting async-await functions and implement server-side rendering for React components with async state</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-delegator\" target=\"_blank\" rel=\"external\"><strong>redux-delegator</strong> - Compose redux reducers in a structured way</a></li>\n<li><a href=\"https://github.com/michalkvasnicak/routex\" target=\"_blank\" rel=\"external\"><strong>routex</strong> - Simple router for Redux universal applications. Can be used with React too</a></li>\n<li><a href=\"https://github.com/rt2zz/redux-persist-store\" target=\"_blank\" rel=\"external\"><strong>redux-persist-store</strong> - Persist and rehydrate a redux store</a></li>\n<li><a href=\"https://github.com/gyzerok/adrenaline\" target=\"_blank\" rel=\"external\"><strong>adrenaline</strong> - React bindings for Redux with Relay in mind</a></li>\n<li><a href=\"https://github.com/elgerlambert/redux-localstorage\" target=\"_blank\" rel=\"external\"><strong>redux-localstorage</strong> - Store enhancer that syncs (a subset) of your Redux store state to localstorage.</a></li>\n<li><a href=\"https://github.com/michaelcontento/redux-storage\" target=\"_blank\" rel=\"external\"><strong>redux-storage</strong> - Persistence layer for redux with flexible backends</a></li>\n<li><a href=\"https://github.com/vicentedealencar/redux-pouchdb\" target=\"_blank\" rel=\"external\"><strong>redux-pouchdb</strong> - sync store state to pouchdb</a></li>\n<li><a href=\"https://github.com/vslinko/redux-vstack-router\" target=\"_blank\" rel=\"external\"><strong>redux-vstack-router</strong> - Helpers to bind vstack-router to redux</a></li>\n<li><a href=\"https://github.com/phated/redux-create-store\" target=\"_blank\" rel=\"external\"><strong>redux-create-store</strong></a></li>\n<li><a href=\"https://github.com/tappleby/redux-batched-subscribe\" target=\"_blank\" rel=\"external\"><strong>redux-batched-subscribe</strong> - Batch calls to subscribe handlers with a custom function, including debouncing or React batched updates.</a></li>\n<li><a href=\"https://github.com/fcomb/redux-logger\" target=\"_blank\" rel=\"external\"><strong>redux-logger</strong> - Logger middleware for Redux</a></li>\n<li><a href=\"https://github.com/low-ghost/redux-node-logger\" target=\"_blank\" rel=\"external\"><strong>redux-node-logger</strong> - A Redux Logger for Node Environments</a></li>\n<li><a href=\"https://github.com/fcomb/redux-diff-logger\" target=\"_blank\" rel=\"external\"><strong>redux-diff-logger</strong> - Diff logger between states for Redux</a></li>\n<li><a href=\"https://github.com/lapwinglabs/redux-debug\" target=\"_blank\" rel=\"external\"><strong>redux-debug</strong> - debug(…) middleware for Redux</a></li>\n<li><a href=\"https://github.com/idolize/redux-requests\" target=\"_blank\" rel=\"external\"><strong>redux-requests</strong> - Avoid issuing duplicate HTTP requests</a></li>\n<li><a href=\"https://github.com/rt2zz/redux-owl\" target=\"_blank\" rel=\"external\"><strong>redux-owl</strong> - Redux One Way Linking</a></li>\n<li><a href=\"https://github.com/pauldijou/redux-act\" target=\"_blank\" rel=\"external\"><strong>redux-act</strong> - An opinionated lib to create actions and reducers for Redux</a></li>\n<li><a href=\"https://github.com/FredericHeem/redux-act-async\" target=\"_blank\" rel=\"external\"><strong>redux-act-async</strong> - Reducing boilerplate when creating asynchronous actions in Redux</a></li>\n<li><a href=\"https://github.com/ngokevin/redux-raven-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-raven-middleware</strong> - Redux middleware for sending error reports to Sentry through raven-js</a></li>\n<li><a href=\"https://github.com/callum/redux-routing\" target=\"_blank\" rel=\"external\"><strong>redux-routing</strong> - Universal routing built on top of redux</a></li>\n<li><a href=\"https://github.com/omnidan/redux-undo\" target=\"_blank\" rel=\"external\"><strong>redux-undo</strong> - Simple undo/redo functionality for redux state containers</a></li>\n<li><a href=\"https://github.com/danscan/rn-redux-mixpanel\" target=\"_blank\" rel=\"external\"><strong>rn-redux-mixpanel</strong> - Configurable Redux middleware that sends your actions &amp; user profile data to Mixpanel</a></li>\n<li><a href=\"https://github.com/ekosz/redux-falcor\" target=\"_blank\" rel=\"external\"><strong>redux-falcor</strong> - Connect your redux front-end to your falcor back-end</a></li>\n<li><a href=\"https://github.com/markdalgleish/redux-analytics\" target=\"_blank\" rel=\"external\"><strong>redux-analytics</strong> - Trigger analytics events based on your event metadata</a></li>\n<li><a href=\"https://github.com/omnidan/redux-ignore\" target=\"_blank\" rel=\"external\"><strong>redux-ignore</strong> - Ignore redux actions by array or filter function</a></li>\n<li><a href=\"https://github.com/omnidan/redux-recycle\" target=\"_blank\" rel=\"external\"><strong>redux-recycle</strong> - Reset the redux state on certain actions</a></li>\n<li><a href=\"https://github.com/indexiatech/re-notif\" target=\"_blank\" rel=\"external\"><strong>re-notif</strong></a> A notification center based on React &amp; Redux.</li>\n<li><a href=\"https://github.com/swennemans/redux-lunr\" target=\"_blank\" rel=\"external\"><strong>redux-lunr</strong> - Make your redux store searchable with Lunr.js</a></li>\n<li><a href=\"https://github.com/meadow/redux-ensure-fsa\" target=\"_blank\" rel=\"external\"><strong>redux-ensure-fsa</strong> - Development middleware to check for FSA-compliant actions</a></li>\n<li><a href=\"https://github.com/alexkuz/redux-pagan\" target=\"_blank\" rel=\"external\"><strong>redux-pagan</strong> - internationalization via redux</a></li>\n<li><a href=\"//github.com/wyze/redux-debounce\"><strong>redux-debounce</strong></a> - Debounce your actions!</li>\n<li><a href=\"https://github.com/stoeffel/redux-future\" target=\"_blank\" rel=\"external\"><strong>redux-future</strong> - FSA-compliant future monad middleware for redux</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-io\" target=\"_blank\" rel=\"external\"><strong>redux-io</strong> - FSA-compliant io monad middleware for redux</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-either\" target=\"_blank\" rel=\"external\"><strong>redux-either</strong> - FSA-compliant either monad middleware for redux</a></li>\n<li><a href=\"https://github.com/gpfunk/redux-timeout\" target=\"_blank\" rel=\"external\"><strong>redux-timeout</strong> - Trigger actions based on timeouts</a></li>\n<li><a href=\"https://github.com/d6u/redux-observable-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-observable-middleware</strong> - Redux middleware for subscribing to observables</a></li>\n<li><a href=\"https://github.com/redux-observable/redux-observable\" target=\"_blank\" rel=\"external\"><strong>redux-observable</strong> - RxJS 5-based middleware for Redux. Compose and cancel actions as epics.</a></li>\n<li><a href=\"https://github.com/wyvernnot/redux-deferred\" target=\"_blank\" rel=\"external\"><strong>redux-deferred</strong> - Redux middleware for jQuery Deferred Object</a></li>\n<li><a href=\"https://github.com/sskyy/redux-task\" target=\"_blank\" rel=\"external\"><strong>redux-task</strong> - A simple Side Effects manager for redux</a></li>\n<li><a href=\"https://github.com/weo-edu/redux-gen\" target=\"_blank\" rel=\"external\"><strong>redux-gen</strong> - Generator based middleware for redux</a></li>\n<li><a href=\"https://github.com/Jackong/redux-authentication\" target=\"_blank\" rel=\"external\"><strong>redux-authentication</strong> - Authentication component for Redux</a></li>\n<li><a href=\"https://github.com/sergiodxa/socket.io-redux\" target=\"_blank\" rel=\"external\"><strong>socket.io-redux</strong> - Redux middleware to emit action via socket.io</a></li>\n<li><a href=\"https://github.com/sergiodxa/redux-catch\" target=\"_blank\" rel=\"external\"><strong>redux-catch</strong> - Error catcher middleware for Redux reducers and middlewares</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-elm-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-elm-middleware</strong> - Elm middleware for redux</a></li>\n<li><a href=\"https://github.com/agraboso/redux-api-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-api-middleware</strong> - Redux API middleware based on the real-world example</a></li>\n<li><a href=\"https://github.com/Yaska/redux-mediaquery\" target=\"_blank\" rel=\"external\"><strong>redux-mediaquery</strong> - Redux ActionCreator to put responsive-design breakpoints in your store</a></li>\n<li><a href=\"https://github.com/lewis617/redux-amrc\" target=\"_blank\" rel=\"external\"><strong>redux-amrc</strong> - Redux async middleware and reducer creator</a></li>\n<li><a href=\"https://github.com/zslucky/redux-fetch-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-fetch-middleware</strong> - Redux middleware that help user to treat simple request via fetch api</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Tools</p>\n<ul>\n<li><a href=\"https://github.com/skellock/reactotron\" target=\"_blank\" rel=\"external\"><strong>reactotron</strong> - Control, monitor, and instrument your React Native apps from the comfort of your TTY</a></li>\n<li><a href=\"https://github.com/conorhastings/redux-test-recorder\" target=\"_blank\" rel=\"external\"><strong>redux-test-recorder</strong> - Redux test recorder is a redux middleware + included component for automagically generating tests for your reducers based on the actions in your app</a></li>\n<li><a href=\"https://github.com/gaearon/redux-devtools\" target=\"_blank\" rel=\"external\"><strong>redux-devtools</strong> - DevTools for Redux with hot reloading, action replay, and customizable UI</a></li>\n<li><a href=\"https://github.com/rackt/react-router-redux\" target=\"_blank\" rel=\"external\"><strong>react-router-redux</strong> - Ruthlessly simple bindings to keep react-router and redux in sync</a></li>\n<li><a href=\"https://github.com/Agamennon/redux-tiny-router\" target=\"_blank\" rel=\"external\"><strong>redux-tiny-router</strong> - A Router made for Redux, stop using the router as a controller it’s just state!</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-devtools-gentest-plugin\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-gentest-plugin</strong> - Generate mocha like tests from redux-devtools session</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\"><strong>generator-redux</strong> - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\"><strong>generator-reactapp</strong> - Yeoman generator for react app with redux</a></li>\n<li><a href=\"https://github.com/chentsulin/generator-redux-app\" target=\"_blank\" rel=\"external\"><strong>generator-redux-app</strong> - Scaffold out a redux app with counter example and react-router</a></li>\n<li><a href=\"https://github.com/sporto/redux-loader\" target=\"_blank\" rel=\"external\"><strong>redux-loader</strong> - A high order component for Redux. This components loads resources and passes them to the child components via props</a></li>\n<li><a href=\"https://github.com/Kvoti/redux-rest\" target=\"_blank\" rel=\"external\"><strong>redux-rest</strong> - Automatically create Flux action constants, action creators and Redux reducers for your REST API</a></li>\n<li><a href=\"https://github.com/kennetpostigo/react-reach\" target=\"_blank\" rel=\"external\"><strong>react-reach</strong> - A library to communicate with Graphql through Redux</a></li>\n<li><a href=\"https://github.com/lexich/redux-api\" target=\"_blank\" rel=\"external\"><strong>redux-api</strong> - Flux REST API for redux infrastructure</a></li>\n<li><a href=\"https://github.com/alixander/redux-store-validator\" target=\"_blank\" rel=\"external\"><strong>redux-store-validator</strong> - Add validation to your Redux reducers</a></li>\n<li><a href=\"https://github.com/adjohnson916/firedux\" target=\"_blank\" rel=\"external\"><strong>firedux</strong> - Firebase + Redux for ReactJS</a></li>\n<li><a href=\"https://github.com/vslinko/vstack-router\" target=\"_blank\" rel=\"external\"><strong>vstack-router</strong> - Universal router</a></li>\n<li><a href=\"https://github.com/Tom-Alexander/redux-ecommerce\" target=\"_blank\" rel=\"external\"><strong>redux-ecommerce</strong> - E-commerce flux with redux</a></li>\n<li><a href=\"https://github.com/erikras/redux-form\" target=\"_blank\" rel=\"external\"><strong>redux-form</strong> - An ES7 decorator for forms using Redux and React</a></li>\n<li><a href=\"https://github.com/posabsolute/redux-form-validator\" target=\"_blank\" rel=\"external\"><strong>redux-form-validation</strong> - Form validation for controlled &amp; uncontrolled inputs</a></li>\n<li><a href=\"https://github.com/mihirsoni/simple-redux-form\" target=\"_blank\" rel=\"external\"><strong>simple-redux-form</strong> - A tiny redux-form alternative Higher Order Component for forms</a>.</li>\n<li><a href=\"https://github.com/calesce/redux-slider-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-slider-monitor</strong> - A custom monitor for Redux DevTools to replay recorded Redux actions</a></li>\n<li><a href=\"https://github.com/substantial/updeep\" target=\"_blank\" rel=\"external\"><strong>updeep</strong> - Easily update nested frozen objects and arrays in a declarative and immutable manner</a></li>\n<li><a href=\"https://github.com/gajus/redux-immutable\" target=\"_blank\" rel=\"external\"><strong>redux-immutable</strong> - Streamlines use of Immutable.js with Redux reducers.</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-import-export-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-import-export-monitor</strong> - A monitor for copying your serialized action log to the clipboard, as well as pasting it in from somewhere else</a></li>\n<li><a href=\"https://github.com/winkler1/icedam\" target=\"_blank\" rel=\"external\"><strong>icedam</strong> - Just-in-time immutability: freezes data sent to views.</a></li>\n<li><a href=\"https://github.com/broucz/react-inline-grid\" target=\"_blank\" rel=\"external\"><strong>react-inline-grid</strong> - Predictable flexbox based grid for React using Redux and Immutable-js.</a></li>\n<li><a href=\"https://github.com/grigory-leonenko/redux-easy-actions\" target=\"_blank\" rel=\"external\"><strong>redux-easy-actions</strong> - Sugar library for creating Redux or Flux actions</a></li>\n<li><a href=\"https://github.com/popc0rn/redux-mount\" target=\"_blank\" rel=\"external\"><strong>redux-mount</strong> - Mount state data and change its state values on the fly</a></li>\n<li><a href=\"https://github.com/ashaffer/redux-multi\" target=\"_blank\" rel=\"external\"><strong>redux-multi</strong> - Dispatch multiple actions from one action creator</a></li>\n<li><a href=\"https://github.com/scottcorgan/immu\" target=\"_blank\" rel=\"external\"><strong>immu</strong> - A tiny, fail-fast, lazy, immutable Javascript objects library</a></li>\n<li><a href=\"https://github.com/Versent/redux-crud\" target=\"_blank\" rel=\"external\"><strong>Generate standard action creators and reducers for CRUD applications</strong></a></li>\n<li><a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"><strong>Redux &amp; ImmutableJs</strong> - Integration of Redux &amp; ImmutableJs that 100% conforms Redux standards</a></li>\n<li><a href=\"https://github.com/gcanti/redux-tcomb\" target=\"_blank\" rel=\"external\"><strong>redux-tcomb</strong> - Immutable and type-checked state and actions for Redux</a></li>\n<li><a href=\"https://github.com/johanneslumpe/redux-react-router-transitions\" target=\"_blank\" rel=\"external\"><strong>redux-react-router-transitions</strong> - Attach react-router transitions to arbitrary actions</a></li>\n<li><a href=\"https://github.com/ForbesLindesay/redux-optimist\" target=\"_blank\" rel=\"external\"><strong>redux-optimist</strong> - Optimistically apply actions that can be later commited or reverted.</a></li>\n<li><a href=\"https://github.com/whetstone/redux-devtools-diff-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-diff-monitor</strong> - Redux DevTools – Diff Monitor</a></li>\n<li><a href=\"https://github.com/romseguy/redux-store-visualizer\" target=\"_blank\" rel=\"external\"><strong>redux-store-visualizer</strong> - Visualize Redux store in real time</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\"><strong>generator-redux</strong> - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\"><strong>generator-reactapp</strong> - Yeoman generator for react app with redux</a></li>\n<li><a href=\"https://github.com/tdzl2003/redux-viewmodel\" target=\"_blank\" rel=\"external\"><strong>redux-viewmodel</strong> - ViewModel wrapping for Redux &amp; React</a></li>\n<li><a href=\"https://github.com/newtack/redux-utils\" target=\"_blank\" rel=\"external\"><strong>redux-utils</strong> - Utility functions for Redux</a></li>\n<li><a href=\"https://github.com/erikras/multireducer\" target=\"_blank\" rel=\"external\"><strong>multireducer</strong> - A utility to wrap many copies of a single Redux reducer into a single key-based reducer</a></li>\n<li><a href=\"https://github.com/philholden/subdivide\" target=\"_blank\" rel=\"external\"><strong>subdivide</strong> - User defined UI layout: Every pane can be subdivided and any widget assigned to any pane</a></li>\n<li><a href=\"https://github.com/gregthebusker/replux\" target=\"_blank\" rel=\"external\"><strong>replux</strong> - Self contained components and enhancements for Redux</a></li>\n<li><a href=\"https://github.com/aparticka/redux-immutable-utils\" target=\"_blank\" rel=\"external\"><strong>redux-immutable-utils</strong> - Utilities for using Immutable with Redux</a></li>\n<li><a href=\"https://github.com/acdlite/recompose\" target=\"_blank\" rel=\"external\"><strong>recompose</strong> - A microcomponentization toolkit for React</a></li>\n<li><a href=\"https://github.com/izaakschroeder/redux-lift\" target=\"_blank\" rel=\"external\"><strong>redux-lift</strong> - Lifting for Redux</a></li>\n<li><a href=\"https://github.com/router5/redux-router5\" target=\"_blank\" rel=\"external\"><strong>redux-router5</strong> - router5 integration with Redux</a></li>\n<li><a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-extension</strong> - Redux DevTools Extension</a></li>\n<li><a href=\"https://github.com/colinmeinke/universal-redux-router\" target=\"_blank\" rel=\"external\"><strong>universal-redux-router</strong> - A very simple router for Redux and React that works on both server and client</a></li>\n<li><a href=\"https://github.com/jprichardson/redux-watch\" target=\"_blank\" rel=\"external\"><strong>redux-watch</strong> - Watch/monitor for state changes on an object path</a></li>\n<li><a href=\"https://github.com/bvaughn/redux-devtools-filterable-log-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-filterable-log-monitor</strong> - Filterable tree view monitor for Redux DevTools</a></li>\n<li><a href=\"https://github.com/posabsolute/redux-flash-notification\" target=\"_blank\" rel=\"external\"><strong>redux-flash-notification</strong> -  A flash notification component for Redux</a></li>\n<li><a href=\"https://github.com/yelouafi/redux-saga\" target=\"_blank\" rel=\"external\"><strong>redux-saga</strong> - An alternative side effect model for Redux apps</a></li>\n<li><a href=\"https://github.com/zalmoxisus/remote-redux-devtools\" target=\"_blank\" rel=\"external\"><strong>remote-redux-devtools</strong> - Use Redux DevTools remotely for React Native, hybrid, desktop and server side Redux apps</a></li>\n<li><a href=\"https://github.com/YoruNoHikage/redux-devtools-dispatch\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-dispatch</strong> - Dispatch your actions manually to test if your app reacts well</a></li>\n<li><a href=\"https://github.com/raisemarketplace/redux-loop\" target=\"_blank\" rel=\"external\"><strong>redux-loop</strong> - Sequence your effects naturally and purely by returning them from your reducers</a></li>\n<li><a href=\"https://github.com/tommikaikkonen/redux-orm\" target=\"_blank\" rel=\"external\"><strong>redux-orm</strong> - A small, simple and immutable ORM to manage data in your Redux store</a></li>\n<li><a href=\"https://github.com/aparticka/redux-bacon\" target=\"_blank\" rel=\"external\"><strong>redux-bacon</strong> - Utilities for attaching Bacon.js to Redux</a></li>\n<li><a href=\"https://github.com/slorber/rereduce\" target=\"_blank\" rel=\"external\"><strong>rereduce</strong> - Reducer library for Redux</a></li>\n<li><a href=\"https://github.com/KarlPurk/redux-decorators\" target=\"_blank\" rel=\"external\"><strong>redux-decorators</strong> - A ridiculously good syntax for working with Redux and TypeScript. Currently limited to Angular 2 but could potentially be used elsewhere</a></li>\n<li><a href=\"https://github.com/amsardesai/redux-test-reducer\" target=\"_blank\" rel=\"external\"><strong>redux-test-reducer</strong> - Simple and clean testing mechanism for Redux reducers</a></li>\n<li><a href=\"https://github.com/alexkuz/redux-devtools-inspector\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-inspector</strong> - Another Redux DevTools Monitor</a></li>\n<li><a href=\"https://github.com/sotojuan/redux-ava\" target=\"_blank\" rel=\"external\"><strong>redux-ava</strong> - Helpers for writing Redux tests in AVA</a></li>\n<li><a href=\"https://github.com/SpencerCDixon/redux-cli\" target=\"_blank\" rel=\"external\"><strong>redux-cli</strong> - An opinionated CLI for building redux/react apps quicker</a></li>\n<li><a href=\"https://github.com/salsita/redux-saga-rxjs\" target=\"_blank\" rel=\"external\"><strong>redux-saga-rxjs</strong> - RxJS implementation of Saga pattern for redux</a></li>\n<li><a href=\"https://github.com/dmitry-zaets/redux-actions-assertions\" target=\"_blank\" rel=\"external\"><strong>redux-actions-assertions</strong> - Assertions for redux actions testing</a></li>\n<li><a href=\"https://github.com/sergiodxa/redux-duck\" target=\"_blank\" rel=\"external\"><strong>redux-duck</strong> - Helper function to create Redux modules using the ducks-modular-redux proposal</a></li>\n<li><a href=\"https://github.com/jhen0409/redux-dispatch-cli\" target=\"_blank\" rel=\"external\"><strong>redux-dispatch-cli</strong> - A CLI tool for Redux remote dispatch. Used in remote-redux-devtools</a></li>\n<li><a href=\"https://github.com/zackargyle/redux-immutable-reducer\" target=\"_blank\" rel=\"external\"><strong>redux-immutable-reducer</strong> - Immutable reducer states with Redux</a></li>\n<li><a href=\"https://github.com/redux-bootstrap/redux-bootstrap\" target=\"_blank\" rel=\"external\"><strong>redux-bootstrap</strong> - configure React + React-Router + Redux + Immutable.js with one function!</a></li>\n<li><a href=\"https://github.com/mandeepbrar/redux-director\" target=\"_blank\" rel=\"external\"><strong>redux-director</strong> - Redux bindings to director router</a></li>\n<li><a href=\"https://github.com/ConciergeAuctions/redux-q\" target=\"_blank\" rel=\"external\"><strong>redux-q</strong> - Provides a way to queue callbacks until an action is dispatched</a></li>\n<li><a href=\"https://github.com/exeto/redux-apist\" target=\"_blank\" rel=\"external\"><strong>redux-apist</strong> - Creator API actions for redux-thunk</a></li>\n<li><a href=\"https://github.com/chiefGui/reswitch\" target=\"_blank\" rel=\"external\"><strong>reswitch</strong> — Write reducers with less boilerplate</a></li>\n<li><a href=\"https://github.com/redux-autoform/redux-autoform\" target=\"_blank\" rel=\"external\"><strong>redux-autoform</strong> - Create Redux-Forms dynamically out of metadata</a></li>\n<li><a href=\"https://github.com/clarus/redux-ship\" target=\"_blank\" rel=\"external\"><strong>redux-ship</strong> - Composable, testable and typable side effects</a></li>\n</ul>\n</li>\n<li><p>Frameworks</p>\n<ul>\n<li><a href=\"https://github.com/jumpsuit/jumpsuit\" target=\"_blank\" rel=\"external\"><strong>Jumpsuit</strong> - A powerful &amp; efficient React framework. Jump in. Zip up. Build great apps.</a></li>\n<li><a href=\"https://github.com/jumpsuit/jumpstate\" target=\"_blank\" rel=\"external\"><strong>Jumpstate</strong> - Simple and powerful state management for Redux</a></li>\n<li><a href=\"https://github.com/sorrycc/dva\" target=\"_blank\" rel=\"external\"><strong>dva</strong> - Front-end framework based on react, redux, react-redux, react-router and redux-saga.</a></li>\n<li><a href=\"https://github.com/ashaffer/vdux\" target=\"_blank\" rel=\"external\"><strong>Vdux</strong> - World’s smallest framework.  Stateless Virtual DOM &lt;-&gt; Redux</a></li>\n<li><a href=\"https://github.com/esex/esex\" target=\"_blank\" rel=\"external\"><strong>Esex</strong> - Full-stack Universal JavaScript Framework (Redux+RxJs)</a></li>\n<li><a href=\"https://github.com/vslinko/ripster\" target=\"_blank\" rel=\"external\"><strong>Ripster</strong></a></li>\n<li><a href=\"https://github.com/este/este\" target=\"_blank\" rel=\"external\"><strong>Este</strong> - The most complete minimal dev stack / boilerplate for React &amp; Redux universal web apps</a></li>\n<li><a href=\"https://github.com/littlstar/stardux\" target=\"_blank\" rel=\"external\"><strong>stardux</strong> - Functional DOM containers based on starplate, IncrementalDOM, and redux</a></li>\n<li><a href=\"https://github.com/marknutter/nux\" target=\"_blank\" rel=\"external\"><strong>nux</strong> - A Push-Based Functional Reactive Web Application Framework</a></li>\n<li><a href=\"https://github.com/Wildhoney/Keo\" target=\"_blank\" rel=\"external\"><strong>Keo</strong> - Plain functions for a more functional Deku approach to creating React components, with functional goodies such as compose, memoize, etc… for free</a></li>\n<li><a href=\"https://github.com/wildlyinaccurate/plait\" target=\"_blank\" rel=\"external\"><strong>plait</strong> - A minimal JavaScript framework for building reactive web components</a></li>\n<li><a href=\"https://github.com/reactuate/reactuate\" target=\"_blank\" rel=\"external\"><strong>reactuate</strong> — A React/Redux stack (not a boilerplate!) with a focus on Domain-Driven Design</a></li>\n<li><a href=\"https://github.com/mattkrick/meatier\" target=\"_blank\" rel=\"external\"><strong>meatier</strong> - Like meteor, but meatier</a></li>\n<li><a href=\"https://github.com/relax/relax\" target=\"_blank\" rel=\"external\"><strong>relax</strong> - New generation CMS on top of React, Redux and GraphQL</a></li>\n<li><a href=\"https://github.com/flipace/lovli.js\" target=\"_blank\" rel=\"external\"><strong>lovli.js</strong> - A boilerplate for developing react+redux applications with rethinkdb/horizon as realtime database and express for the server</a></li>\n<li><a href=\"https://github.com/mariusandra/kea-logic\" target=\"_blank\" rel=\"external\"><strong>kea</strong> - Well-readable, self-documenting and easily refactorable framework that brings your data to life! Comes with scaffolding tools</a> :bird:</li>\n<li><a href=\"https://github.com/tianche/feeble\" target=\"_blank\" rel=\"external\"><strong>Feeble</strong> - A framework built on top of React/Redux/redux-saga which aims to make building React/Redux applications easier and better.</a></li>\n<li><a href=\"https://github.com/mjaneczek/conventional-redux\" target=\"_blank\" rel=\"external\"><strong>Conventional-Redux</strong> - A wrapper for react-redux which provides API based on convention over configuration pattern.</a></li>\n<li><a href=\"https://github.com/derzunov/redux-react-i18n\" target=\"_blank\" rel=\"external\"><strong>redux-react-i18n</strong> - An i18n solution for redux/react✌🏿✊🏽🤘🏻</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a><a href=\"examples/README.md\">Examples</a></h3><hr>\n<h3 id=\"Similar-libraries\"><a href=\"#Similar-libraries\" class=\"headerlink\" title=\"Similar libraries\"></a>Similar libraries</h3><ul>\n<li><a href=\"https://github.com/BobBuehler/flux-ts\" target=\"_blank\" rel=\"external\"><strong>flux-ts</strong> - A small flux implementation heavily inspired by redux</a></li>\n<li><a href=\"https://github.com/acstll/chopped-redux\" target=\"_blank\" rel=\"external\"><strong>chopped-redux</strong> - A very small Flux implementation based on Redux</a></li>\n<li><a href=\"https://github.com/edge/fluxette\" target=\"_blank\" rel=\"external\"><strong>fluxette</strong> - Minimalist, functional, and concise Flux</a></li>\n<li><a href=\"https://github.com/jas-chen/rx-redux\" target=\"_blank\" rel=\"external\"><strong>rx-redux</strong> - A reimplementation of redux using RxJS</a></li>\n<li><a href=\"https://github.com/johnhenry/understate\" target=\"_blank\" rel=\"external\"><strong>understate</strong> - A simple state manager</a></li>\n<li><a href=\"https://github.com/Lucifier129/refer\" target=\"_blank\" rel=\"external\"><strong>refer</strong> - Redux-like library for handling global state on functional style</a></li>\n<li><a href=\"https://github.com/karelsteinmetz/bobflux\" target=\"_blank\" rel=\"external\"><strong>bobflux</strong> - Bobflux is pure functional implementation of FLUX pattern and is fitted to Bobril</a></li>\n<li><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"external\"><strong>mobx</strong> - Simple, scalable state management</a></li>\n</ul>\n<hr>\n<h3 id=\"Deku-Functional-view-library-for-building-UI-components-as-an-alternative-to-React\"><a href=\"#Deku-Functional-view-library-for-building-UI-components-as-an-alternative-to-React\" class=\"headerlink\" title=\"Deku - Functional view library for building UI components as an alternative to React\"></a><a href=\"https://github.com/dekujs/deku\" target=\"_blank\" rel=\"external\">Deku - Functional view library for building UI components as an alternative to React</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/nivanson/deku-redux-universal-hot-example\" target=\"_blank\" rel=\"external\">Deku + Express + Redux + Crossroads Router</a></li>\n<li><a href=\"https://github.com/troch/deku-redux\" target=\"_blank\" rel=\"external\">deku-redux - Bindings for redux in deku (Standalone plugin)</a><br>)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Incremental-DOM-Incremental-DOM-is-a-library-for-building-up-DOM-trees-and-updating-them-in-place-when-data-changes\"><a href=\"#Incremental-DOM-Incremental-DOM-is-a-library-for-building-up-DOM-trees-and-updating-them-in-place-when-data-changes\" class=\"headerlink\" title=\"Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes\"></a><a href=\"http://google.github.io/incremental-dom\" target=\"_blank\" rel=\"external\">Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/joshthecoder/idom-redux-todomvc-app\" target=\"_blank\" rel=\"external\">Incremental DOM + Redux Flux = Todo App</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"WinJS-Windows-Library-for-JavaScript\"><a href=\"#WinJS-Windows-Library-for-JavaScript\" class=\"headerlink\" title=\"WinJS - Windows Library for JavaScript\"></a><a href=\"http://try.buildwinjs.com\" target=\"_blank\" rel=\"external\">WinJS - Windows Library for JavaScript</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/unindented/react-redux-winjs-example\" target=\"_blank\" rel=\"external\">react-redux-winjs-example</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Angular-HTML-enhanced-for-web-apps\"><a href=\"#Angular-HTML-enhanced-for-web-apps\" class=\"headerlink\" title=\"Angular - HTML enhanced for web apps\"></a><a href=\"https://angularjs.org\" target=\"_blank\" rel=\"external\">Angular - HTML enhanced for web apps</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/wbuchwalter/tsRedux\" target=\"_blank\" rel=\"external\">Angular + Typescript + Redux</a></li>\n<li><a href=\"https://github.com/wbuchwalter/ng-redux\" target=\"_blank\" rel=\"external\">ng-redux - Standalone plugin</a></li>\n<li><a href=\"https://github.com/neilff/redux-ui-router\" target=\"_blank\" rel=\"external\">redux-ui-router - ngRedux middleware for Angular UI Router</a></li>\n<li><a href=\"https://github.com/r-park/todo-angular-redux\" target=\"_blank\" rel=\"external\">Todo app with ng-redux • ES6 • Webpack</a></li>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux-example\" target=\"_blank\" rel=\"external\">https://github.com/InfomediaLtd/angular2-redux-example</a></li>\n<li><a href=\"https://github.com/tomusdrw/angular2-redux-example\" target=\"_blank\" rel=\"external\">https://github.com/tomusdrw/angular2-redux-example</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Angular-2-One-framework-Mobile-and-desktop\"><a href=\"#Angular-2-One-framework-Mobile-and-desktop\" class=\"headerlink\" title=\"Angular 2 - One framework. Mobile and desktop\"></a><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2 - One framework. Mobile and desktop</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux-example\" target=\"_blank\" rel=\"external\">angular2-redux-example - Example project for using pure Redux with Angular 2 and TypeScript</a></li>\n<li><a href=\"https://github.com/angular-redux/store\" target=\"_blank\" rel=\"external\">@angular-redux/store - Angular 2 bindings for Redux</a></li>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux\" target=\"_blank\" rel=\"external\">angular2-redux - Wrapper components for using Redux in an Angular2 application</a></li>\n<li><a href=\"https://github.com/forforeach/ng2redux\" target=\"_blank\" rel=\"external\">ng2redux - Angular 2 bindings for Redux implemented with TypeScript and decorators</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Vue-A-library-for-building-modern-web-interfaces\"><a href=\"#Vue-A-library-for-building-modern-web-interfaces\" class=\"headerlink\" title=\"Vue - A library for building modern web interfaces\"></a><a href=\"http://vuejs.org\" target=\"_blank\" rel=\"external\">Vue - A library for building modern web interfaces</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/revue/revue\" target=\"_blank\" rel=\"external\">Revue - Redux binding for Vue</a></li>\n<li><a href=\"https://github.com/yang-wei/vue-flux\" target=\"_blank\" rel=\"external\">Vue + Redux</a></li>\n<li><a href=\"https://github.com/zhongqf/meteor-vue-redux-example\" target=\"_blank\" rel=\"external\">Meteor + Vue + Redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Polymer-Build-modern-apps-using-web-components\"><a href=\"#Polymer-Build-modern-apps-using-web-components\" class=\"headerlink\" title=\"Polymer - Build modern apps using web components\"></a><a href=\"https://www.polymer-project.org\" target=\"_blank\" rel=\"external\">Polymer - Build modern apps using web components</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/tur-nr/polymer-redux\" target=\"_blank\" rel=\"external\">polymer-redux</a></li>\n<li><a href=\"https://github.com/lastmjs/redux-store-element\" target=\"_blank\" rel=\"external\">redux-store-element</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Ember-A-framework-for-creating-ambitious-web-applications\"><a href=\"#Ember-A-framework-for-creating-ambitious-web-applications\" class=\"headerlink\" title=\"Ember - A framework for creating ambitious web applications\"></a><a href=\"http://emberjs.com\" target=\"_blank\" rel=\"external\">Ember - A framework for creating ambitious web applications</a></h3><ul>\n<li>Examples</li>\n</ul>\n<hr>\n<h3 id=\"Meteor-Build-apps-that-are-a-delight-to-use-faster-than-you-ever-thought-possible\"><a href=\"#Meteor-Build-apps-that-are-a-delight-to-use-faster-than-you-ever-thought-possible\" class=\"headerlink\" title=\"Meteor - Build apps that are a delight to use, faster than you ever thought possible\"></a><a href=\"https://www.meteor.com\" target=\"_blank\" rel=\"external\">Meteor - Build apps that are a delight to use, faster than you ever thought possible</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/zhongqf/meteor-react-redux-example\" target=\"_blank\" rel=\"external\">meteor-react-redux-example</a></li>\n<li><a href=\"https://github.com/AdamBrodzinski/meteor-flux-leaderboard/tree/redux\" target=\"_blank\" rel=\"external\">meteor-flux-leaderboard</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Mithril-A-Javascript-Framework-for-Building-Brilliant-Applications\"><a href=\"#Mithril-A-Javascript-Framework-for-Building-Brilliant-Applications\" class=\"headerlink\" title=\"Mithril - A Javascript Framework for Building Brilliant Applications\"></a><a href=\"http://mithril.js.org/\" target=\"_blank\" rel=\"external\">Mithril - A Javascript Framework for Building Brilliant Applications</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/mijime/mithril-redux-starter-hmr\" target=\"_blank\" rel=\"external\">mithril-redux-starter-hmr</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Backbone-Give-your-JS-App-some-Backbone-with-Models-Views-Collections-and-Events\"><a href=\"#Backbone-Give-your-JS-App-some-Backbone-with-Models-Views-Collections-and-Events\" class=\"headerlink\" title=\"Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events\"></a><a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"external\">Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events</a></h3><ul>\n<li>Tools<ul>\n<li><a href=\"https://github.com/redbooth/backbone-redux\" target=\"_blank\" rel=\"external\">backbone-redux — The easy way to keep your backbone collections and redux store in sync</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Aurelia-is-a-next-gen-JavaScript-client-framework-for-mobile-desktop-and-web-that-leverages-simple-conventions-to-empower-your-creativity\"><a href=\"#Aurelia-is-a-next-gen-JavaScript-client-framework-for-mobile-desktop-and-web-that-leverages-simple-conventions-to-empower-your-creativity\" class=\"headerlink\" title=\"Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity\"></a><a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/voidberg/aurelia-redux-todo\" target=\"_blank\" rel=\"external\">aurelia-redux-todo - An implementation of the Redux todo demo app using Aurelia</a></li>\n<li><a href=\"https://www.sitepoint.com/managing-state-aurelia-with-redux/\" target=\"_blank\" rel=\"external\">Managing State in Aurelia: How to Use Aurelia with Redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Riot-A-React-like-user-interface-micro-library\"><a href=\"#Riot-A-React-like-user-interface-micro-library\" class=\"headerlink\" title=\"Riot - A React-like user interface micro-library\"></a><a href=\"http://riotjs.com\" target=\"_blank\" rel=\"external\">Riot - A React-like user interface micro-library</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/remyhonig/riotredux-budget\" target=\"_blank\" rel=\"external\">riotredux-budget</a></li>\n<li><a href=\"https://github.com/zesty-io/app-skeleton\" target=\"_blank\" rel=\"external\">app-skeleton</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Electron-Build-cross-platform-desktop-apps-with-web-technologies\"><a href=\"#Electron-Build-cross-platform-desktop-apps-with-web-technologies\" class=\"headerlink\" title=\"Electron - Build cross platform desktop apps with web technologies\"></a><a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron - Build cross platform desktop apps with web technologies</a></h3><ul>\n<li><a href=\"https://github.com/chentsulin/electron-react-boilerplate\" target=\"_blank\" rel=\"external\">electron-react-boilerplate (Electron + Redux + Hot Reload)</a></li>\n</ul>\n<hr>\n<h3 id=\"A-Frame-A-web-framework-for-building-VR-experiences\"><a href=\"#A-Frame-A-web-framework-for-building-VR-experiences\" class=\"headerlink\" title=\"A-Frame - A web framework for building VR experiences\"></a><a href=\"https://aframe.io\" target=\"_blank\" rel=\"external\">A-Frame - A web framework for building VR experiences</a></h3><ul>\n<li><a href=\"https://github.com/ngokevin/kframe/tree/master/components/redux\" target=\"_blank\" rel=\"external\">aframe-redux-component</a></li>\n</ul>\n<hr>\n<h3 id=\"Chrome-Extensions\"><a href=\"#Chrome-Extensions\" class=\"headerlink\" title=\"Chrome Extensions\"></a>Chrome Extensions</h3><ul>\n<li><a href=\"https://github.com/Dharmoslap/redux-chrome-extension\" target=\"_blank\" rel=\"external\">Redux Chrome Extension</a></li>\n<li><p><a href=\"https://github.com/jhen0409/react-chrome-extension-boilerplate\" target=\"_blank\" rel=\"external\">React Chrome Extension Boilerplate (Webpack + Redux + Babel and etc</a></p>\n</li>\n<li><p>Examples</p>\n<ul>\n<li><a href=\"https://github.com/Pumgrana/plugin\" target=\"_blank\" rel=\"external\">Pumgrana Plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Ruby-on-Rails-Resources\"><a href=\"#Ruby-on-Rails-Resources\" class=\"headerlink\" title=\"Ruby on Rails Resources\"></a>Ruby on Rails Resources</h2><ul>\n<li><a href=\"https://github.com/shakacode/react-webpack-rails-tutorial\" target=\"_blank\" rel=\"external\">React Webpack Rails Tutorial Using Redux</a></li>\n<li><a href=\"https://github.com/shakacode/react_on_rails\" target=\"_blank\" rel=\"external\">react_on_rails gem</a></li>\n</ul>\n<h2 id=\"Other-languages\"><a href=\"#Other-languages\" class=\"headerlink\" title=\"Other languages\"></a>Other languages</h2><ul>\n<li><p>.NET</p>\n<ul>\n<li><a href=\"https://github.com/GuillaumeSalles/redux.NET\" target=\"_blank\" rel=\"external\">https://github.com/GuillaumeSalles/redux.NET</a></li>\n<li><a href=\"https://github.com/pshomov/reducto\" target=\"_blank\" rel=\"external\">https://github.com/pshomov/reducto</a></li>\n</ul>\n</li>\n<li><p>Java</p>\n<ul>\n<li><a href=\"https://github.com/glung/redux-java\" target=\"_blank\" rel=\"external\">https://github.com/glung/redux-java</a></li>\n<li><a href=\"https://github.com/trikita/jedux\" target=\"_blank\" rel=\"external\">https://github.com/trikita/jedux</a></li>\n<li><a href=\"https://github.com/izumin5210/Droidux\" target=\"_blank\" rel=\"external\">https://github.com/izumin5210/Droidux</a></li>\n</ul>\n</li>\n<li><p>Swift</p>\n<ul>\n<li><a href=\"https://github.com/ReSwift/reduxSwift\" target=\"_blank\" rel=\"external\">https://github.com/ReSwift/reduxSwift</a></li>\n<li><a href=\"https://github.com/Swift-Flow/Swift-Flow\" target=\"_blank\" rel=\"external\">https://github.com/Swift-Flow/Swift-Flow</a></li>\n<li><a href=\"https://github.com/ReSwift/ReSwift\" target=\"_blank\" rel=\"external\">https://github.com/ReSwift/ReSwift</a> and <a href=\"http://reswift.github.io/ReSwift/master\" target=\"_blank\" rel=\"external\">docs</a></li>\n</ul>\n</li>\n<li><p>Purescript</p>\n<ul>\n<li><a href=\"https://github.com/brakmic/purescript-redux\" target=\"_blank\" rel=\"external\">https://github.com/brakmic/purescript-redux</a></li>\n<li><a href=\"https://github.com/faber/purescript-purdux\" target=\"_blank\" rel=\"external\">https://github.com/faber/purescript-purdux</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Awesome-Redux\"><a href=\"#Awesome-Redux\" class=\"headerlink\" title=\"Awesome Redux \"></a>Awesome Redux <a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"external\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\"></a></h1><blockquote>\n<p>List of repositories which use Redux</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a><a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"external\">Redux</a></h2><h2 id=\"Documentation-of-Redux\"><a href=\"#Documentation-of-Redux\" class=\"headerlink\" title=\"Documentation of Redux\"></a><a href=\"http://redux.js.org\" target=\"_blank\" rel=\"external\">Documentation of Redux</a></h2><h2 id=\"Documentation-of-Redux-Simple-Chinese-version\"><a href=\"#Documentation-of-Redux-Simple-Chinese-version\" class=\"headerlink\" title=\"Documentation of Redux(Simple Chinese version)\"></a><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Documentation of Redux(Simple Chinese version)</a></h2><h2 id=\"Documentation-of-Redux-Russian-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Russian-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Russian version) (Work in progress)\"></a><a href=\"https://rajdee.gitbooks.io/redux-in-russian/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Russian version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Traditional-Chinese-version\"><a href=\"#Documentation-of-Redux-Traditional-Chinese-version\" class=\"headerlink\" title=\"Documentation of Redux(Traditional Chinese version)\"></a><a href=\"http://chentsulin.github.io/redux/index.html\" target=\"_blank\" rel=\"external\">Documentation of Redux(Traditional Chinese version)</a></h2><h2 id=\"Documentation-of-Redux-Japanese-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Japanese-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Japanese version) (Work in progress)\"></a><a href=\"https://github.com/jposts/redux\" target=\"_blank\" rel=\"external\">Documentation of Redux(Japanese version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Portuguese-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Portuguese-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Portuguese version) (Work in progress)\"></a><a href=\"https://github.com/franzejr/redux-in-portuguese/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Portuguese version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Spanish-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Spanish-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Spanish version) (Work in progress)\"></a><a href=\"https://sergiodxa.gitbooks.io/redux-en-espanol/content/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Spanish version)</a> (Work in progress)</h2><h2 id=\"Documentation-of-Redux-Korean-version\"><a href=\"#Documentation-of-Redux-Korean-version\" class=\"headerlink\" title=\"Documentation of Redux(Korean version)\"></a><a href=\"http://dobbit.github.io/redux/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Korean version)</a></h2><h2 id=\"Documentation-of-Redux-Sinhala-සිංහල-version-Work-in-progress\"><a href=\"#Documentation-of-Redux-Sinhala-සිංහල-version-Work-in-progress\" class=\"headerlink\" title=\"Documentation of Redux(Sinhala|සිංහල version) (Work in progress)\"></a><a href=\"https://sandaruny.github.io/redux-sin/\" target=\"_blank\" rel=\"external\">Documentation of Redux(Sinhala|සිංහල version)</a> (Work in progress)</h2><blockquote>\n<p>Predictable state container for JavaScript apps</p>\n</blockquote>\n<h2 id=\"Marks\"><a href=\"#Marks\" class=\"headerlink\" title=\"Marks\"></a>Marks</h2><ul>\n<li><a href=\"http://isomorphic.net\" target=\"_blank\" rel=\"external\">Universal (Isomorphic)</a> - :metal:</li>\n<li><a href=\"https://github.com/gaearon/react-transform-hmr\" target=\"_blank\" rel=\"external\">Hot Reload</a> - :fire:</li>\n</ul>\n<h3 id=\"Presentations\"><a href=\"#Presentations\" class=\"headerlink\" title=\"Presentations\"></a>Presentations</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=d0oUGmSE6IY&amp;list=PLJBrYU54JD2pTblB20OmV7GL6H5J-p2g8\" target=\"_blank\" rel=\"external\">Let’s learn React and Redux with Javascript’s new ES6 syntax, from Beginner to Intermediate to Advanced.</a></li>\n<li><a href=\"https://github.com/chentsulin/redux-intro\" target=\"_blank\" rel=\"external\">A introduction about Redux</a></li>\n<li><a href=\"https://speakerdeck.com/chrisui/real-world-redux\" target=\"_blank\" rel=\"external\">Real World Redux</a></li>\n<li><a href=\"http://slides.com/omnidan/hor\" target=\"_blank\" rel=\"external\">The power of higher-order reducers</a></li>\n<li><a href=\"http://slides.com/evanschultz-1/reactive-angular\" target=\"_blank\" rel=\"external\">Reactive Architecture with Redux and Angular</a></li>\n<li><a href=\"http://slides.com/vladimirnovick/reduxinternals\" target=\"_blank\" rel=\"external\">Redux Internals</a></li>\n<li><a href=\"http://slides.com/scottprue-2/deck\" target=\"_blank\" rel=\"external\">Replacing Angular 1 with React and Redux</a></li>\n<li><a href=\"http://slides.com/cguedes/a-tour-on-react-ecosystem\" target=\"_blank\" rel=\"external\">A tour on the React ecosystem</a></li>\n<li><a href=\"http://slides.com/jenyaterpil/redux-from-twitter-hype-to-production#/\" target=\"_blank\" rel=\"external\">Redux from Twitter hype to production</a></li>\n</ul>\n<hr>\n<h3 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h3><ul>\n<li><a href=\"https://github.com/redux-effects\" target=\"_blank\" rel=\"external\">Many tools and middlewares</a></li>\n<li><a href=\"https://github.com/paulwittmann/redux-offline-docs\" target=\"_blank\" rel=\"external\">Redux offline docs</a></li>\n<li><a href=\"https://github.com/staltz/flux-challenge\" target=\"_blank\" rel=\"external\">Flux challenge</a></li>\n<li><a href=\"https://github.com/andrewngu/sound-redux\" target=\"_blank\" rel=\"external\">Sound Redux - a simple Soundcloud client</a></li>\n<li><a href=\"https://github.com/rwieruch/favesound-redux\" target=\"_blank\" rel=\"external\">Favesound Redux - SoundCloud Client for Artists</a></li>\n<li><a href=\"https://github.com/ipselon/structor\" target=\"_blank\" rel=\"external\">Structor - a user interface builder for React</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\">generator-redux - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\">generator-reactapp - Yeoman generator for react app with redux</a></li>\n<li><a href=\"http://rekit.js.org\" target=\"_blank\" rel=\"external\">Rekit - Toolkit for building scalable web apps with React, Redux and React-router</a></li>\n<li><a href=\"https://github.com/FormidableLabs/spectacle\" target=\"_blank\" rel=\"external\">Spectacle - ReactJS based Presentation Library</a></li>\n<li><a href=\"https://github.com/tayiorbeii/egghead.io_redux_course_notes\" target=\"_blank\" rel=\"external\">Notes (and partial transcription) of Dan Abramov’s Redux course videos on http://egghead.io</a></li>\n<li><a href=\"https://github.com/dwyl/learn-redux\" target=\"_blank\" rel=\"external\">Comprehensive Notes for Learning (how to use) Redux to manage state in your Web/Mobile Apps</a></li>\n<li><a href=\"https://maxfarseer.gitbooks.io/redux-course-ru/content/\" target=\"_blank\" rel=\"external\">React Redux [RU tutorial]</a></li>\n<li><a href=\"https://tonyhb.gitbooks.io/redux-without-profanity/content/index.html\" target=\"_blank\" rel=\"external\">Redux without profanity</a></li>\n<li><a href=\"https://medium.com/@sapegin/react-and-redux-single-page-applications-resources-22cd859b0c1d#.o66rolp0p\" target=\"_blank\" rel=\"external\">React and Redux Single Page Applications Resources</a></li>\n<li><a href=\"https://github.com/markerikson/redux-ecosystem-links\" target=\"_blank\" rel=\"external\">A categorized list of Redux-related addons, libraries, and utilities</a></li>\n<li><a href=\"http://makeitopen.com/tutorials/building-the-f8-app/planning/\" target=\"_blank\" rel=\"external\">Building the F8 2016 App (Redux, GraphQL, React Native)</a></li>\n<li><a href=\"https://github.com/salsita/redux-elm\" target=\"_blank\" rel=\"external\">The Elm Architecture in JavaScript</a></li>\n</ul>\n<hr>\n<h3 id=\"Articles-And-Tutorials\"><a href=\"#Articles-And-Tutorials\" class=\"headerlink\" title=\"Articles And Tutorials\"></a>Articles And Tutorials</h3><ul>\n<li><a href=\"https://app.pluralsight.com/library/courses/react-redux-react-router-es6\" target=\"_blank\" rel=\"external\">Building Applications with React and Redux in ES6 on Pluralsight</a></li>\n<li><a href=\"http://davidandsuzi.com/writing-a-basic-app-in-redux\" target=\"_blank\" rel=\"external\">Writing a Basic App in Redux</a></li>\n<li><a href=\"https://github.com/happypoulp/redux-tutorial\" target=\"_blank\" rel=\"external\">Learn how to use Redux step by step</a></li>\n<li><a href=\"https://medium.com/@bananaoomarang/handcrafting-an-isomorphic-redux-application-with-love-40ada4468af4\" target=\"_blank\" rel=\"external\">Tutorial: Handcrafting an Isomorphic Redux Application (With Love)</a></li>\n<li><a href=\"http://www.jchapron.com/2015/08/14/getting-started-with-redux\" target=\"_blank\" rel=\"external\">0 to 1 : Getting started with Redux</a></li>\n<li><a href=\"https://github.com/camsong/redux-in-chinese\" target=\"_blank\" rel=\"external\">Redux Chinese Document</a></li>\n<li><a href=\"https://github.com/chentsulin/redux\" target=\"_blank\" rel=\"external\">Redux Document (Traditional Chinese)</a></li>\n<li><a href=\"https://medium.com/@cpojer/relay-and-routing-36b5439bad9\" target=\"_blank\" rel=\"external\">Relay and Routing</a></li>\n<li><a href=\"https://medium.com/@meagle/understanding-87566abcfb7a\" target=\"_blank\" rel=\"external\">Understanding Redux Middleware</a></li>\n<li><a href=\"https://www.livecoding.tv/ekosz/videos\" target=\"_blank\" rel=\"external\">Several videos about Redux + Falcor</a> and <a href=\"https://github.com/ekosz/postcard-sender\" target=\"_blank\" rel=\"external\">Example code</a></li>\n<li><a href=\"http://briantroncone.com/?p=529\" target=\"_blank\" rel=\"external\">Redux Middleware: Behind the Scenes</a></li>\n<li><a href=\"https://github.com/erikras/ducks-modular-redux\" target=\"_blank\" rel=\"external\">A proposal for bundling reducers, action types and actions when using Redux</a></li>\n<li><a href=\"http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html\" target=\"_blank\" rel=\"external\">Full-Stack Redux Tutorial - A Comprehensive Guide to Test-First Development with Redux, React, and Immutable</a> Source <a href=\"https://github.com/teropa/redux-voting-server\" target=\"_blank\" rel=\"external\">Server</a> + <a href=\"https://github.com/teropa/redux-voting-client\" target=\"_blank\" rel=\"external\">Client</a></li>\n<li><a href=\"https://medium.com/lexical-labs-engineering/redux-best-practices-64d59775802e\" target=\"_blank\" rel=\"external\">Redux best practices</a></li>\n<li><a href=\"http://blog.workshape.io/the-3ree-stack-react-redux-rethinkdb-express-js\" target=\"_blank\" rel=\"external\">The 3REE Stack: React + Redux + RethinkDB + Express.js</a></li>\n<li><a href=\"http://engineering.wework.com/process/2015/10/01/react-reflux-to-redux\" target=\"_blank\" rel=\"external\">React Tutorial - Converting Reflux to Redux</a></li>\n<li><a href=\"https://github.com/yildizberkay/redux-example\" target=\"_blank\" rel=\"external\">Redux example using 500px API (with ES6)</a></li>\n<li><a href=\"http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/\" target=\"_blank\" rel=\"external\">Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS</a> - This article explains in detail how <a href=\"https://github.com/mezod/boilerplate-koa-redux-react\" target=\"_blank\" rel=\"external\">this koa-redux-react-boilerplate</a> was built and the technologies it uses.</li>\n<li><a href=\"http://jaysoo.ca/2015/09/26/typed-react-and-redux\" target=\"_blank\" rel=\"external\">Typed React and Redux</a></li>\n<li><a href=\"https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6#.8k7536uqu\" target=\"_blank\" rel=\"external\">A cartoon intro to Redux</a></li>\n<li><a href=\"http://jamesknelson.com/join-the-dark-side-of-the-flux-responding-to-actions-with-actors\" target=\"_blank\" rel=\"external\">Join The Dark Side Of The Flux: Responding to Actions with Actors</a></li>\n<li><a href=\"http://jamesknelson.com/can-i-dispatch-multiple-actions-from-redux-action-creators\" target=\"_blank\" rel=\"external\">Can I dispatch multiple actions from Redux action creators?</a></li>\n<li><a href=\"http://www.youhavetolearncomputers.com/blog/2015/9/15/a-conceptual-overview-of-redux-or-how-i-fell-in-love-with-a-javascript-state-container\" target=\"_blank\" rel=\"external\">Understanding Redux (or, How I Fell in Love with a JavaScript State Container)</a></li>\n<li><a href=\"http://reactjsnews.com/your-first-redux-app\" target=\"_blank\" rel=\"external\">Your First Immutable React &amp; Redux App</a></li>\n<li><a href=\"https://egghead.io/series/getting-started-with-redux\" target=\"_blank\" rel=\"external\">Getting Started with Redux - Egghead’s video lessons from Dan Abramov</a></li>\n<li><a href=\"https://egghead.io/series/react-testing-cookbook\" target=\"_blank\" rel=\"external\">Redux Testing Video Lessons - a few short Egghead video lessons (some free, some require a subscription)</a></li>\n<li><a href=\"https://medium.com/@dorsha/implement-login-modal-with-redux-reselect-and-reactjs-668c468bcbe3#.lnwisap8c\" target=\"_blank\" rel=\"external\">Implementing a smart Login Modal with Redux, reselect and ReactJS</a></li>\n<li><a href=\"http://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js\" target=\"_blank\" rel=\"external\">How to Build a Todo App Using React, Redux, and Immutable.js</a></li>\n<li><a href=\"https://voice.kadira.io/rethinking-redux-f1e96daba60c#.hp5v516ie\" target=\"_blank\" rel=\"external\">Rethinking Redux</a></li>\n<li><a href=\"http://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas\" target=\"_blank\" rel=\"external\">Managing Side Effects In React + Redux Using Sagas</a></li>\n<li><a href=\"https://auth0.com/blog/2016/01/04/secure-your-react-and-redux-app-with-jwt-authentication\" target=\"_blank\" rel=\"external\">Secure Your React and Redux App with JWT Authentication</a></li>\n<li><a href=\"https://medium.com/@thisbejim/getting-started-with-redux-and-graphql-8384b3b25c56#.3anuh1m7x\" target=\"_blank\" rel=\"external\">Getting started with Redux and GraphQL</a></li>\n<li><a href=\"http://www.sitepoint.com/data-flows-angular-2-redux\" target=\"_blank\" rel=\"external\">Data Flows with Angular 2 and Redux</a></li>\n<li><a href=\"http://jamesknelson.com/simple-routing-redux-react\" target=\"_blank\" rel=\"external\">Simple Routing with Redux and React</a></li>\n<li><a href=\"https://riadbenguella.com/2015/12/28/redux-nowadays-from-actions-creators-to-sagas/\" target=\"_blank\" rel=\"external\">Redux nowadays : From actions creators to sagas</a></li>\n<li><a href=\"http://konkle.us/master-complex-redux-workflows-with-sagas\" target=\"_blank\" rel=\"external\">Master Complex Redux Workflows with Sagas</a></li>\n<li><a href=\"http://blog.jhades.org/angular-2-application-architecture-building-flux-like-apps-using-redux-and-immutable-js-js\" target=\"_blank\" rel=\"external\">Angular 2 Application Architecture - Building Flux Apps with Redux and Immutable.js</a></li>\n<li><a href=\"http://www.toptal.com/react/react-redux-and-immutablejs\" target=\"_blank\" rel=\"external\">React, Redux and Immutable.js: Ingredients for Efficient Web Applications</a></li>\n<li><a href=\"https://shellmonger.com/2016/02/16/an-introduction-to-react-redux-part-1\" target=\"_blank\" rel=\"external\">An Introduction to React Redux (Part 1)</a></li>\n<li><a href=\"https://shellmonger.com/2016/02/19/an-introduction-to-react-redux-part-2\" target=\"_blank\" rel=\"external\">An Introduction to React Redux (Part 2)</a></li>\n<li><a href=\"http://jaysoo.ca/2016/02/28/organizing-redux-application\" target=\"_blank\" rel=\"external\">Rules For Structuring (Redux) Applications</a></li>\n<li><a href=\"http://toranbillups.com/blog/archive/2016/01/22/redux-for-the-very-beginner\" target=\"_blank\" rel=\"external\">Redux for the very beginner</a></li>\n<li><a href=\"http://www.zohaib.me/redux-call-service-async/\" target=\"_blank\" rel=\"external\">Redux - Calling web service asynchronously</a></li>\n<li><a href=\"http://swizec.com/blog/animating-with-react-redux-and-d3/swizec/6775\" target=\"_blank\" rel=\"external\">Animating with React, Redux, and d3</a></li>\n<li><a href=\"http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/\" target=\"_blank\" rel=\"external\">Build an Image Gallery Using React, Redux and redux-saga</a></li>\n<li><a href=\"https://medium.com/@matt.krick/introducing-redux-operations-332ab56e468b#.7e30nsxne\" target=\"_blank\" rel=\"external\">Introducing redux-operations</a></li>\n<li><a href=\"https://medium.com/@matt.krick/solving-redux-s-shortcoming-in-150-locs-540979ce6cf9#.sw0s478j6\" target=\"_blank\" rel=\"external\">Solving Redux’s shortcoming in 150 LOCs</a></li>\n<li><a href=\"https://medium.com/@rajaraodv/the-anatomy-of-a-react-redux-app-759282368c5a#.h05vq2uaj\" target=\"_blank\" rel=\"external\">The Anatomy Of A React Redux App</a></li>\n<li><a href=\"http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/\" target=\"_blank\" rel=\"external\">Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2)</a></li>\n<li><a href=\"https://css-tricks.com/learning-react-redux/\" target=\"_blank\" rel=\"external\">Leveling Up with React: Redux</a></li>\n<li><a href=\"http://btholt.github.io/complete-intro-to-react/\" target=\"_blank\" rel=\"external\">Complete intro to react</a></li>\n<li><a href=\"https://medium.com/@nicktho/recreating-redux-behind-the-magic-curtain-c21edd542c9c#.a93sgufyi\" target=\"_blank\" rel=\"external\">Recreating Redux — Behind the magic curtain</a></li>\n<li><a href=\"https://stormpath.com/blog/build-a-redux-powered-react-application/\" target=\"_blank\" rel=\"external\">Let’s Build a Redux Powered React Application</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/intro-to-react-redux-pros\" target=\"_blank\" rel=\"external\">Deep Introduction to Redux - Seriese 1/3</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/redux-server-rendering-react-router-universal-web-app\" target=\"_blank\" rel=\"external\">Universal Rendering with Redux and React-Router - Seriese 2/3</a></li>\n<li><a href=\"https://www.codementor.io/reactjs/tutorial/redux-unit-test-mocha-mocking\" target=\"_blank\" rel=\"external\">Unit Testing Redux Apps - Seriese 3/3</a></li>\n<li><a href=\"https://zen.id.au/using-aurelia-and-redux-together-for-good-times-all-around/\" target=\"_blank\" rel=\"external\">Using Aurelia and Redux together for good times all around</a></li>\n<li><a href=\"https://www.reindex.io/blog/redux-and-relay/\" target=\"_blank\" rel=\"external\">Comparing Redux and Relay</a></li>\n<li><a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" target=\"_blank\" rel=\"external\">Building React Applications with Idiomatic Redux</a></li>\n<li><a href=\"http://www.robinwieruch.de/the-soundcloud-client-in-react-redux\" target=\"_blank\" rel=\"external\">The SoundCloud Client in React + Redux</a></li>\n<li><a href=\"https://github.com/berwin/Blog/issues/4\" target=\"_blank\" rel=\"external\">深入浅出 Redux</a></li>\n<li><a href=\"http://houssein.me/redux/immutablejs/angular2/2016/07/04/angular2-with-immutablejs-and-redux.html\" target=\"_blank\" rel=\"external\">Building Angular 2 applications with Immutable.js and Redux</a></li>\n<li><a href=\"http://blog.ng-book.com/introduction-to-redux-with-typescript-and-angular-2/\" target=\"_blank\" rel=\"external\">Tutorial: Building Redux in TypeScript with Angular 2</a></li>\n<li><a href=\"http://blog.rangle.io/react-and-redux-performance-with-reselect/\" target=\"_blank\" rel=\"external\">Improving React and Redux performance with Reselect</a></li>\n<li><a href=\"http://blog.rangle.io/recipes-for-redux/\" target=\"_blank\" rel=\"external\">Recipes for Redux</a></li>\n<li><a href=\"http://blog.rangle.io/getting-started-with-redux-and-angular-2/\" target=\"_blank\" rel=\"external\">Getting Started with Redux &amp; Angular 2</a></li>\n<li><a href=\"https://el-tramo.be/blog/react-swift/\" target=\"_blank\" rel=\"external\">Universal/Isomorphic React+Redux on a Swift Web Backend</a></li>\n<li><a href=\"http://engineering.datadoghq.com/redux-doghouse--creating-reusable-react-redux-components-through-scoping/\" target=\"_blank\" rel=\"external\">Creating Reusable React-Redux Components Through Scoping</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\" target=\"_blank\" rel=\"external\">React+Redux系列教程</a></li>\n<li><a href=\"https://lewis617.github.io/2016/11/20/r2-book/\" target=\"_blank\" rel=\"external\">书籍：《React 与 Redux 开发实例精解》</a></li>\n</ul>\n<hr>\n<h3 id=\"Boilerplate\"><a href=\"#Boilerplate\" class=\"headerlink\" title=\"Boilerplate\"></a>Boilerplate</h3><ul>\n<li><a href=\"http://redux-minimal.js.org/\" target=\"_blank\" rel=\"external\"><strong>redux-minimal</strong> - Minimalist react-redux starter kit which let’s you build rich real world apps</a></li>\n<li><a href=\"https://github.com/nicksp/redux-webpack-es6-boilerplate\" target=\"_blank\" rel=\"external\"><strong>Modern and Scalable React/Redux Boilerplate</strong> - Flexible starter kit using Webpack 2 (tree-shaking) / React Hot Loader v3 / Code Splitting for React Router / PostCSS / CSS Modules / custom <em>Ducks pattern</em> app architecture / best practices / Sentry error tracking / Enzyme test environment</a> :rocket:</li>\n<li><a href=\"https://github.com/jaredpalmer/react-production-starter\" target=\"_blank\" rel=\"external\"><strong>react-production-starter</strong> - React boilerplate with isomorphic rendering, async react-router routes, async redux reducers, async data fetching, and code-splitting.</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/hashnode/mern-starter\" target=\"_blank\" rel=\"external\"><strong>mern.io</strong> - Simple full-stack boilerplate to get started with building isomorphic/universal apps, handles api part and also offers a cli to generate the boilerplate</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/combine/universal-react-redux\" target=\"_blank\" rel=\"external\"><strong>universal-react-redux</strong> - Opinionated Universal React/Redux/Webpack with HMR. Continually updated.</a> :metal: :fire:</li>\n<li><a href=\"https://github.com/coryhouse/react-slingshot\" target=\"_blank\" rel=\"external\"><strong>react-slingshot</strong> - React Redux Starter Kit with hot reloading, tests and example app</a></li>\n<li><a href=\"https://github.com/knowbody/react-redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-redux-boilerplate</strong> - React Redux Boilerplate</a></li>\n<li><a href=\"https://github.com/Keats/react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-boilerplate</strong> - React + Typescript + Sass boilerplate</a></li>\n<li><a href=\"https://github.com/lcjnil/react-redux-scaffold\" target=\"_blank\" rel=\"external\"><strong>react-redux-scaffold</strong> - Combination of redux, react-router and ES6+ support</a></li>\n<li><a href=\"https://github.com/tsaiDavid/simple-redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>simple-redux-boilerplate</strong> - Simple and guided React, Redux boilerplate w/ Transform HMR! :fire:</a></li>\n<li><a href=\"https://github.com/Amorino/reactv\" target=\"_blank\" rel=\"external\"><strong>reactv</strong> - React Redux example</a></li>\n<li><a href=\"https://github.com/ellbee/redux-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-boilerplate</strong> - Boilerplate for Redux</a></li>\n<li><a href=\"https://github.com/davezuko/react-redux-starter-kit\" target=\"_blank\" rel=\"external\"><strong>react-redux-starter-kit</strong> - Get started with React, Redux, and React-Router.</a></li>\n<li><a href=\"https://github.com/jackielii/simplest-redux-example\" target=\"_blank\" rel=\"external\"><strong>simplest-redux-example</strong> - Simplest Redux + React example for beginners</a></li>\n<li><a href=\"https://github.com/anorudes/redux-easy-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-easy-boilerplate</strong> - React Redux easy boilerplate</a></li>\n<li><a href=\"https://github.com/dictyBase/dicty-redux\" target=\"_blank\" rel=\"external\"><strong>dicty-redux</strong> - Starter kit to bootstrap React and Redux (Flux) based web application</a></li>\n<li><a href=\"https://github.com/GordyD/3ree\" target=\"_blank\" rel=\"external\"><strong>3ree</strong> - Boilerplate &amp; Demo for Universal Realtime Apps built with React + Redux + RethinkDB + Express</a></li>\n<li><a href=\"https://github.com/rafaelchiti/react_scaffolding\" target=\"_blank\" rel=\"external\"><strong>react_scaffolding</strong> - React + React Router 1.0 + Redux + Webpack &amp; Hot Module Replacement</a></li>\n<li><a href=\"https://github.com/aybmab/express-redux-sample\" target=\"_blank\" rel=\"external\"><strong>express-redux-sample</strong> - Express-Redux-PassportJs-MySQL Boilerplate</a></li>\n<li><a href=\"https://github.com/GetExpert/redux-blog-example\" target=\"_blank\" rel=\"external\"><strong>redux-blog-example</strong> - Redux-Webpack-Babel Blog Platform boilerplate</a></li>\n<li><a href=\"https://github.com/omnidan/redux-undo-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-undo-boilerplate</strong> - a magical boilerplate with hot reloading and awesome error handling</a></li>\n<li><a href=\"https://github.com/gpbl/redux500\" target=\"_blank\" rel=\"external\"><strong>redux500</strong> - The Redux version of isomorphic500</a></li>\n<li><a href=\"https://github.com/survivejs/redux-demo\" target=\"_blank\" rel=\"external\"><strong>redux-demo</strong> - Redux port of SurviveJS - Webpack and React Kanban app</a></li>\n<li><a href=\"https://github.com/erikras/react-redux-universal-hot-example\" target=\"_blank\" rel=\"external\"><strong>react-redux-universal-hot-example</strong> - A starter boilerplate for a universal webapp using express, react, redux, webpack, and react-hot-loader</a> :metal:</li>\n<li><a href=\"https://github.com/levjj/rde\" target=\"_blank\" rel=\"external\"><strong>rde</strong> - Reactive Live Programming Environment</a></li>\n<li><a href=\"https://github.com/cloudmu/react-redux-starter-kit\" target=\"_blank\" rel=\"external\"><strong>React Redux Starter Kit</strong> - Yet another React and Redux based web application starter kit</a></li>\n<li><a href=\"https://github.com/sullenor/skeleton\" target=\"_blank\" rel=\"external\"><strong>skeleton</strong> - A simple project-stub to show the basic ideas. Also serves you as a quick start for your project (Mori + Redux)</a></li>\n<li><a href=\"https://github.com/zalmoxisus/browser-redux\" target=\"_blank\" rel=\"external\"><strong>browser-redux</strong> - Building Chrome apps and cross-browser extensions with Redux and Webpack</a></li>\n<li><a href=\"https://github.com/chicoxyzzy/react-for-hipsters-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-for-hipsters-boilerplate</strong> - Fresh boilerplate with brand new hot reloading confing and other hipster stuff</a></li>\n<li><a href=\"https://github.com/mezod/boilerplate-koa-redux-react\" target=\"_blank\" rel=\"external\"><strong>Documented Koa Redux React Webpack boilerplate</strong></a>- The building process of this boilerplate is deeply documented from 0 for learning purposes. <a href=\"http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/\" target=\"_blank\" rel=\"external\">You can find the docs here</a>.</li>\n<li><a href=\"https://github.com/tuommii/err\" target=\"_blank\" rel=\"external\"><strong>err</strong> - Electron, React, Redux-devtools boilerplate for building cross-platform apps.</a></li>\n<li><a href=\"https://github.com/banzay/friends-app-redux\" target=\"_blank\" rel=\"external\"><strong>friends-app-redux</strong> - React Redux Universal Hot Example</a></li>\n<li><a href=\"https://github.com/caljrimmer/isomorphic-redux-app\" target=\"_blank\" rel=\"external\"><strong>isomorphic-redux-app</strong> - Redux Isomorphic App (with async content)</a></li>\n<li><a href=\"https://github.com/unicorn-standard/starter-kit\" target=\"_blank\" rel=\"external\"><strong>starter-kit</strong> - Project boilerplate using React, Redux and Uniloc http://unicornstandard.com/packages/boilerplate.html</a></li>\n<li><a href=\"https://github.com/tngan/loopback-redux-react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>loopback-redux-react-boilerplate</strong> - A boilerplate for a Redux-React application using LoopBack</a></li>\n<li><a href=\"https://github.com/tomatau/breko-hub\" target=\"_blank\" rel=\"external\"><strong>breko-hub</strong> - <strong>B</strong>abel <strong>Rea</strong>ct <strong>Ko</strong>a <strong>H</strong>ot <strong>U</strong>niversal <strong>B</strong>oilerplate – A simple, clean and consistent boilerplate for creating universal webapps with universal data fetching and SocketIO integration</a></li>\n<li><a href=\"https://github.com/inderps/react-redux-cordova-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Cordova Boilerplate</strong></a></li>\n<li><a href=\"https://github.com/mxstbr/react-boilerplate\" target=\"_blank\" rel=\"external\"><strong>react-boilerplate</strong> - Performance orientated, offline-first boilerplate feat. hot-reloading, PostCSS and the best developer experience.</a></li>\n<li><a href=\"https://github.com/choonkending/react-webpack-node\" target=\"_blank\" rel=\"external\"><strong>react-webpack-node</strong> - Boilerplate for an universal React + Redux/alt Flux application using Webpack running on a node express server</a></li>\n<li>[<strong>Hapi React Starter Kit</strong> - Universal, Redux, Redis, Socket.io, Intl] (<a href=\"https://github.com/Dindaleon/hapi-react-starter-kit\" target=\"_blank\" rel=\"external\">https://github.com/Dindaleon/hapi-react-starter-kit</a>)</li>\n<li>[<strong>Universal Redux Template</strong> - A clean, extensible react + redux boilerplate with universal rendering, testing and more] (<a href=\"https://github.com/mz026/universal-redux-template\" target=\"_blank\" rel=\"external\">https://github.com/mz026/universal-redux-template</a>)</li>\n<li><a href=\"https://github.com/colinmeinke/universal-js\" target=\"_blank\" rel=\"external\"><strong>universal-js</strong> - A universal Javascript starter kit inc. React, Redux, Redux Dev Tools, Universal Redux Router, CSS Modules, hot module reloading, Babel for ES2015+ and ESLint</a></li>\n<li><a href=\"https://github.com/WapGeaR/redux-react-material-boilerplate\" target=\"_blank\" rel=\"external\"><strong>redux-react-material-boilerplate</strong> - Simple boilerplate inc. React, Redux, Hot reload and Material-ui</a></li>\n<li><a href=\"https://github.com/exeto/react-redux-starter\" target=\"_blank\" rel=\"external\"><strong>react-redux-starter</strong> - React Redux Starter</a></li>\n<li><a href=\"https://github.com/Pitzcarraldo/reduxible\" target=\"_blank\" rel=\"external\"><strong>Reduxible</strong> - The Fast and Easy way to make a React + Redux apps</a></li>\n<li><a href=\"https://github.com/chen844033231/react-workflow\" target=\"_blank\" rel=\"external\"><strong>react-workflow</strong> - A large SPA boilerplate for web development built on top of Facebook’s React library,use redux architecture</a></li>\n<li><a href=\"https://github.com/PBRT/reactogo\" target=\"_blank\" rel=\"external\"><strong>ReacToGo</strong> - A simple ES6 boilerplate with Redux architecture and ImmutableJS: Hot Reload, React UI Comp, Firebase, Router</a></li>\n<li><a href=\"https://github.com/cristianszwarc/react_crud_localStorage\" target=\"_blank\" rel=\"external\"><strong>React/Redux simple CRUD</strong> with persistent state and local async actions (add a manifest file and you get an offline webapp) </a></li>\n<li><a href=\"https://github.com/FredericHeem/starhackit\" target=\"_blank\" rel=\"external\"><strong>StarHackIt</strong> - An React/Redux Node full-stack starter kit with authentication and authorization code</a></li>\n<li><a href=\"https://github.com/andrewcoelho/react-seed\" target=\"_blank\" rel=\"external\"><strong>React Seed</strong> - A barebones scalable directory structure and package.json for facilitating new React + Redux projects. No fat to trim here!</a></li>\n<li>[<strong>React/Redux with Auth boilerplate</strong> - Very simple boilerplate, good for fast creating admin panels / dashboard. Included: React, Redux, ReduxForm, React-Router, Simple Authenticate, Hot Reload and Webpack (with babel) :fire:] (<a href=\"https://github.com/WapGeaR/react-redux-boilerplate-auth\" target=\"_blank\" rel=\"external\">https://github.com/WapGeaR/react-redux-boilerplate-auth</a>)</li>\n<li><a href=\"https://github.com/Producters/docker-node-react-starter\" target=\"_blank\" rel=\"external\"><strong>Docker + React/Redux + Node + PostgreSQL</strong> - full stack boilerplate with fully dockerized workflows for development, deployment, testing</a></li>\n<li><a href=\"https://github.com/ufocoder/redux-universal-boilerplate\" target=\"_blank\" rel=\"external\"><strong>Redux universal boilerplate</strong> - boilerplate for react universal application building on flux architecture based on redux implementation.</a></li>\n<li><a href=\"https://github.com/kiki-le-singe/react-redux-universal-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Universal Boilerplate</strong> - An Universal ReactJS/Redux Boilerplate.</a></li>\n<li><a href=\"https://github.com/douglascorrea/react-hot-redux-firebase-starter\" target=\"_blank\" rel=\"external\"><strong>react-hot-redux-firebase-starter</strong> - Starter boilerplate for using React/Redux with Firebase 3.0 API, include the new React Hot Loader 3.0 :fire:</a></li>\n<li><a href=\"https://github.com/btomashvili/react-redux-firebase-boilerplate\" target=\"_blank\" rel=\"external\"><strong>React Redux Firebase Boilerplate</strong> - Designed for quickly spin up your apps with Firebase, using bunch of awesome new front-end technologies includes webpack build system, hot reloading, routing &amp; sass support. :fire:</a></li>\n<li><a href=\"https://github.com/xkawi/react-universal-saga\" target=\"_blank\" rel=\"external\"><strong>React Universal Saga</strong> - Universal React Starter Kit ft. Redux Saga</a></li>\n<li><a href=\"https://github.com/rwieruch/react-redux-soundcloud\" target=\"_blank\" rel=\"external\"><strong>React Redux SoundCloud Client</strong> - Seed Project for a SoundCloud Client with working Login + Extension Seed Projects</a></li>\n<li><a href=\"https://github.com/barbar/vortigern\" target=\"_blank\" rel=\"external\"><strong>vortigern</strong> - A universal boilerplate for building web applications w/ TypeScript, React, Redux and more.</a></li>\n<li><a href=\"https://github.com/hdjirdeh/angular2-redux-contact-list\" target=\"_blank\" rel=\"external\"><strong>angular2-redux-contact-list</strong> - Simple contact list built with Angular 2, Immutable.js and Redux</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-seed\" target=\"_blank\" rel=\"external\"><strong>react-redux-seed</strong> - 使用 React 与 Redux 实现 Universal 渲染的种子工程</a></li>\n<li><a href=\"https://arc.js.org\" target=\"_blank\" rel=\"external\"><strong>ARc</strong> - A progressive React starter kit based on Atomic Design with redux, redux-saga and redux-form</a></li>\n<li><a href=\"https://github.com/dogada/edux\" target=\"_blank\" rel=\"external\"><strong>edux</strong> - fast Redux without constants and switches. Actions and reducers are generated from single source.</a></li>\n</ul>\n<hr>\n<h3 id=\"React-Native-A-framework-for-building-native-apps-using-React\"><a href=\"#React-Native-A-framework-for-building-native-apps-using-React\" class=\"headerlink\" title=\"React Native - A framework for building native apps using React\"></a><a href=\"https://facebook.github.io/react-native\" target=\"_blank\" rel=\"external\">React Native - A framework for building native apps using React</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/nikgraf/CarteJaune\" target=\"_blank\" rel=\"external\">CarteJaune - An open source Redux/ExponentJS (React Native) app leveraging redux-saga to keep track of your vaccinations</a></li>\n<li><a href=\"https://github.com/soliury/noder-react-native\" target=\"_blank\" rel=\"external\">noder-react-native - The mobile app of cnodejs.org written in React Native</a></li>\n<li><a href=\"https://github.com/hzyIO/react-native-redux-counter\" target=\"_blank\" rel=\"external\">react-native-redux-counter</a></li>\n<li><a href=\"https://github.com/chentsulin/react-native-counter-ios-android\" target=\"_blank\" rel=\"external\">react-native-counter-ios-android</a></li>\n<li><a href=\"https://github.com/bruz/react-native-redux-groceries\" target=\"_blank\" rel=\"external\">react-native-redux-groceries - An example app using React Native, Redux, Firebase, and AsyncStorage for offline data</a></li>\n<li><a href=\"https://github.com/fraserxu/soundredux-native\" target=\"_blank\" rel=\"external\">react-native-sound-cloud</a></li>\n<li><a href=\"https://github.com/bartonhammond/snowflake\" target=\"_blank\" rel=\"external\">snowflake - mobile app starter: Login, Logout, Reset Password, Update Profile, Hot Reload</a></li>\n<li><a href=\"https://github.com/just4fun/uestc-bbs-react-native\" target=\"_blank\" rel=\"external\">uestc-bbs-react-native - An iOS client for http://bbs.uestc.edu.cn/ written in React Native with Redux</a></li>\n<li><a href=\"https://github.com/nara/movies-redux\" target=\"_blank\" rel=\"external\">movies-redux - redux implementation of react-native movies example that is included in react-native source</a></li>\n<li><a href=\"https://github.com/uiheros/react-native-redux-todo-list\" target=\"_blank\" rel=\"external\">react-native-redux-todo-list - A sample todo list app developed by using react-native and redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"React-A-JavaScript-library-for-building-user-interfaces\"><a href=\"#React-A-JavaScript-library-for-building-user-interfaces\" class=\"headerlink\" title=\"React - A JavaScript library for building user interfaces\"></a><a href=\"http://facebook.github.io/react\" target=\"_blank\" rel=\"external\">React - A JavaScript library for building user interfaces</a></h3><ul>\n<li><p>Containers</p>\n<ul>\n<li><a href=\"https://github.com/LouisBarranqueiro/reapop\" target=\"_blank\" rel=\"external\"><strong>reapop</strong> - A React &amp; Redux notifications system</a></li>\n</ul>\n</li>\n<li><p>Middlewares</p>\n<ul>\n<li><a href=\"https://github.com/therewillbecode/redux-cheerio\" target=\"_blank\" rel=\"external\"><strong>redux-cheerio</strong> - Make HTTP requests and then parse the responses with jQuery selectors using Cheerio</a><ul>\n<li><a href=\"https://github.com/ezekielchentnik/redux-reporter\" target=\"_blank\" rel=\"external\"><strong>redux-reporter</strong> - Report actions &amp; metadata to 3rd party providers, extremely useful for analytics and error handling (New Relic, Sentry, Adobe DTM, Keen, etc.)</a></li>\n<li><a href=\"https://github.com/acdlite/redux-transduce\" target=\"_blank\" rel=\"external\"><strong>redux-transduce</strong> - Transducer utilities for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-actions\" target=\"_blank\" rel=\"external\"><strong>redux-actions</strong> - Flux Standard Action utilities for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-promise\" target=\"_blank\" rel=\"external\"><strong>redux-promise</strong> - FSA-compliant promise middleware for Redux</a></li>\n<li><a href=\"https://github.com/shanhaichik/redux-sync-promise\" target=\"_blank\" rel=\"external\"><strong>redux-sync-promise</strong> - Middleware for writing asynchronous actions in synchronous style</a></li>\n<li><a href=\"https://github.com/alanrubin/redux-simple-promise\" target=\"_blank\" rel=\"external\"><strong>redux-simple-promise</strong> - FSA-compliant promise middleware for Redux with simple behaviour with minimal boilerplate declarations</a></li>\n<li><a href=\"https://github.com/symbiont-io/redux-async\" target=\"_blank\" rel=\"external\"><strong>redux-async</strong> - FSA-compliant promise property middleware for Redux</a></li>\n<li><a href=\"https://github.com/zackargyle/redux-async-queue\" target=\"_blank\" rel=\"external\"><strong>redux-async-queue</strong> - Manage queues of thunk actions</a></li>\n<li><a href=\"https://github.com/KELiON/redux-async-initial-state\" target=\"_blank\" rel=\"external\"><strong>redux-async-initial-state</strong> - Set initial Redux state asynchronously</a></li>\n<li><a href=\"https://github.com/kolodny/redux-await\" target=\"_blank\" rel=\"external\"><strong>redux-await</strong> - Manage async redux actions sanely</a></li>\n<li><a href=\"https://github.com/acdlite/redux-rx\" target=\"_blank\" rel=\"external\"><strong>redux-rx</strong> - RxJS utilities for Redux</a></li>\n<li><a href=\"https://github.com/faassen/reselect\" target=\"_blank\" rel=\"external\"><strong>reselect</strong> - Selector library for Redux like in NuclearJS</a></li>\n<li><a href=\"https://github.com/rackt/react-redux\" target=\"_blank\" rel=\"external\"><strong>react-redux</strong> - React bindings for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-react-router\" target=\"_blank\" rel=\"external\"><strong>redux-react-router</strong> - Redux bindings for React Router – keep your router state inside your Redux store</a></li>\n<li><a href=\"https://github.com/pburtchaell/redux-promise-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-promise-middleware</strong> - Redux middleware for resolving and rejecting promises</a></li>\n<li><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\"><strong>redux-thunk</strong> - Thunk middleware for Redux</a></li>\n<li><a href=\"https://github.com/acdlite/redux-batched-updates\" target=\"_blank\" rel=\"external\"><strong>redux-batched-updates</strong> - Batch React updates that occur as a result of Redux dispatches, to prevent cascading renders.</a></li>\n<li><a href=\"https://github.com/itsmepetrov/redux-combine-actions\" target=\"_blank\" rel=\"external\"><strong>redux-combine-actions</strong> - Redux middleware that allows you to easy combine actions and dispatch them sequentially</a></li>\n<li><a href=\"https://github.com/DenisIzmaylov/redux-catch-promise\" target=\"_blank\" rel=\"external\"><strong>redux-catch-promise</strong> - Extended replacement of redux-thunk middleware to supporting async-await functions and implement server-side rendering for React components with async state</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-delegator\" target=\"_blank\" rel=\"external\"><strong>redux-delegator</strong> - Compose redux reducers in a structured way</a></li>\n<li><a href=\"https://github.com/michalkvasnicak/routex\" target=\"_blank\" rel=\"external\"><strong>routex</strong> - Simple router for Redux universal applications. Can be used with React too</a></li>\n<li><a href=\"https://github.com/rt2zz/redux-persist-store\" target=\"_blank\" rel=\"external\"><strong>redux-persist-store</strong> - Persist and rehydrate a redux store</a></li>\n<li><a href=\"https://github.com/gyzerok/adrenaline\" target=\"_blank\" rel=\"external\"><strong>adrenaline</strong> - React bindings for Redux with Relay in mind</a></li>\n<li><a href=\"https://github.com/elgerlambert/redux-localstorage\" target=\"_blank\" rel=\"external\"><strong>redux-localstorage</strong> - Store enhancer that syncs (a subset) of your Redux store state to localstorage.</a></li>\n<li><a href=\"https://github.com/michaelcontento/redux-storage\" target=\"_blank\" rel=\"external\"><strong>redux-storage</strong> - Persistence layer for redux with flexible backends</a></li>\n<li><a href=\"https://github.com/vicentedealencar/redux-pouchdb\" target=\"_blank\" rel=\"external\"><strong>redux-pouchdb</strong> - sync store state to pouchdb</a></li>\n<li><a href=\"https://github.com/vslinko/redux-vstack-router\" target=\"_blank\" rel=\"external\"><strong>redux-vstack-router</strong> - Helpers to bind vstack-router to redux</a></li>\n<li><a href=\"https://github.com/phated/redux-create-store\" target=\"_blank\" rel=\"external\"><strong>redux-create-store</strong></a></li>\n<li><a href=\"https://github.com/tappleby/redux-batched-subscribe\" target=\"_blank\" rel=\"external\"><strong>redux-batched-subscribe</strong> - Batch calls to subscribe handlers with a custom function, including debouncing or React batched updates.</a></li>\n<li><a href=\"https://github.com/fcomb/redux-logger\" target=\"_blank\" rel=\"external\"><strong>redux-logger</strong> - Logger middleware for Redux</a></li>\n<li><a href=\"https://github.com/low-ghost/redux-node-logger\" target=\"_blank\" rel=\"external\"><strong>redux-node-logger</strong> - A Redux Logger for Node Environments</a></li>\n<li><a href=\"https://github.com/fcomb/redux-diff-logger\" target=\"_blank\" rel=\"external\"><strong>redux-diff-logger</strong> - Diff logger between states for Redux</a></li>\n<li><a href=\"https://github.com/lapwinglabs/redux-debug\" target=\"_blank\" rel=\"external\"><strong>redux-debug</strong> - debug(…) middleware for Redux</a></li>\n<li><a href=\"https://github.com/idolize/redux-requests\" target=\"_blank\" rel=\"external\"><strong>redux-requests</strong> - Avoid issuing duplicate HTTP requests</a></li>\n<li><a href=\"https://github.com/rt2zz/redux-owl\" target=\"_blank\" rel=\"external\"><strong>redux-owl</strong> - Redux One Way Linking</a></li>\n<li><a href=\"https://github.com/pauldijou/redux-act\" target=\"_blank\" rel=\"external\"><strong>redux-act</strong> - An opinionated lib to create actions and reducers for Redux</a></li>\n<li><a href=\"https://github.com/FredericHeem/redux-act-async\" target=\"_blank\" rel=\"external\"><strong>redux-act-async</strong> - Reducing boilerplate when creating asynchronous actions in Redux</a></li>\n<li><a href=\"https://github.com/ngokevin/redux-raven-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-raven-middleware</strong> - Redux middleware for sending error reports to Sentry through raven-js</a></li>\n<li><a href=\"https://github.com/callum/redux-routing\" target=\"_blank\" rel=\"external\"><strong>redux-routing</strong> - Universal routing built on top of redux</a></li>\n<li><a href=\"https://github.com/omnidan/redux-undo\" target=\"_blank\" rel=\"external\"><strong>redux-undo</strong> - Simple undo/redo functionality for redux state containers</a></li>\n<li><a href=\"https://github.com/danscan/rn-redux-mixpanel\" target=\"_blank\" rel=\"external\"><strong>rn-redux-mixpanel</strong> - Configurable Redux middleware that sends your actions &amp; user profile data to Mixpanel</a></li>\n<li><a href=\"https://github.com/ekosz/redux-falcor\" target=\"_blank\" rel=\"external\"><strong>redux-falcor</strong> - Connect your redux front-end to your falcor back-end</a></li>\n<li><a href=\"https://github.com/markdalgleish/redux-analytics\" target=\"_blank\" rel=\"external\"><strong>redux-analytics</strong> - Trigger analytics events based on your event metadata</a></li>\n<li><a href=\"https://github.com/omnidan/redux-ignore\" target=\"_blank\" rel=\"external\"><strong>redux-ignore</strong> - Ignore redux actions by array or filter function</a></li>\n<li><a href=\"https://github.com/omnidan/redux-recycle\" target=\"_blank\" rel=\"external\"><strong>redux-recycle</strong> - Reset the redux state on certain actions</a></li>\n<li><a href=\"https://github.com/indexiatech/re-notif\" target=\"_blank\" rel=\"external\"><strong>re-notif</strong></a> A notification center based on React &amp; Redux.</li>\n<li><a href=\"https://github.com/swennemans/redux-lunr\" target=\"_blank\" rel=\"external\"><strong>redux-lunr</strong> - Make your redux store searchable with Lunr.js</a></li>\n<li><a href=\"https://github.com/meadow/redux-ensure-fsa\" target=\"_blank\" rel=\"external\"><strong>redux-ensure-fsa</strong> - Development middleware to check for FSA-compliant actions</a></li>\n<li><a href=\"https://github.com/alexkuz/redux-pagan\" target=\"_blank\" rel=\"external\"><strong>redux-pagan</strong> - internationalization via redux</a></li>\n<li><a href=\"//github.com/wyze/redux-debounce\"><strong>redux-debounce</strong></a> - Debounce your actions!</li>\n<li><a href=\"https://github.com/stoeffel/redux-future\" target=\"_blank\" rel=\"external\"><strong>redux-future</strong> - FSA-compliant future monad middleware for redux</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-io\" target=\"_blank\" rel=\"external\"><strong>redux-io</strong> - FSA-compliant io monad middleware for redux</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-either\" target=\"_blank\" rel=\"external\"><strong>redux-either</strong> - FSA-compliant either monad middleware for redux</a></li>\n<li><a href=\"https://github.com/gpfunk/redux-timeout\" target=\"_blank\" rel=\"external\"><strong>redux-timeout</strong> - Trigger actions based on timeouts</a></li>\n<li><a href=\"https://github.com/d6u/redux-observable-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-observable-middleware</strong> - Redux middleware for subscribing to observables</a></li>\n<li><a href=\"https://github.com/redux-observable/redux-observable\" target=\"_blank\" rel=\"external\"><strong>redux-observable</strong> - RxJS 5-based middleware for Redux. Compose and cancel actions as epics.</a></li>\n<li><a href=\"https://github.com/wyvernnot/redux-deferred\" target=\"_blank\" rel=\"external\"><strong>redux-deferred</strong> - Redux middleware for jQuery Deferred Object</a></li>\n<li><a href=\"https://github.com/sskyy/redux-task\" target=\"_blank\" rel=\"external\"><strong>redux-task</strong> - A simple Side Effects manager for redux</a></li>\n<li><a href=\"https://github.com/weo-edu/redux-gen\" target=\"_blank\" rel=\"external\"><strong>redux-gen</strong> - Generator based middleware for redux</a></li>\n<li><a href=\"https://github.com/Jackong/redux-authentication\" target=\"_blank\" rel=\"external\"><strong>redux-authentication</strong> - Authentication component for Redux</a></li>\n<li><a href=\"https://github.com/sergiodxa/socket.io-redux\" target=\"_blank\" rel=\"external\"><strong>socket.io-redux</strong> - Redux middleware to emit action via socket.io</a></li>\n<li><a href=\"https://github.com/sergiodxa/redux-catch\" target=\"_blank\" rel=\"external\"><strong>redux-catch</strong> - Error catcher middleware for Redux reducers and middlewares</a></li>\n<li><a href=\"https://github.com/stoeffel/redux-elm-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-elm-middleware</strong> - Elm middleware for redux</a></li>\n<li><a href=\"https://github.com/agraboso/redux-api-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-api-middleware</strong> - Redux API middleware based on the real-world example</a></li>\n<li><a href=\"https://github.com/Yaska/redux-mediaquery\" target=\"_blank\" rel=\"external\"><strong>redux-mediaquery</strong> - Redux ActionCreator to put responsive-design breakpoints in your store</a></li>\n<li><a href=\"https://github.com/lewis617/redux-amrc\" target=\"_blank\" rel=\"external\"><strong>redux-amrc</strong> - Redux async middleware and reducer creator</a></li>\n<li><a href=\"https://github.com/zslucky/redux-fetch-middleware\" target=\"_blank\" rel=\"external\"><strong>redux-fetch-middleware</strong> - Redux middleware that help user to treat simple request via fetch api</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Tools</p>\n<ul>\n<li><a href=\"https://github.com/skellock/reactotron\" target=\"_blank\" rel=\"external\"><strong>reactotron</strong> - Control, monitor, and instrument your React Native apps from the comfort of your TTY</a></li>\n<li><a href=\"https://github.com/conorhastings/redux-test-recorder\" target=\"_blank\" rel=\"external\"><strong>redux-test-recorder</strong> - Redux test recorder is a redux middleware + included component for automagically generating tests for your reducers based on the actions in your app</a></li>\n<li><a href=\"https://github.com/gaearon/redux-devtools\" target=\"_blank\" rel=\"external\"><strong>redux-devtools</strong> - DevTools for Redux with hot reloading, action replay, and customizable UI</a></li>\n<li><a href=\"https://github.com/rackt/react-router-redux\" target=\"_blank\" rel=\"external\"><strong>react-router-redux</strong> - Ruthlessly simple bindings to keep react-router and redux in sync</a></li>\n<li><a href=\"https://github.com/Agamennon/redux-tiny-router\" target=\"_blank\" rel=\"external\"><strong>redux-tiny-router</strong> - A Router made for Redux, stop using the router as a controller it’s just state!</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-devtools-gentest-plugin\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-gentest-plugin</strong> - Generate mocha like tests from redux-devtools session</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\"><strong>generator-redux</strong> - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\"><strong>generator-reactapp</strong> - Yeoman generator for react app with redux</a></li>\n<li><a href=\"https://github.com/chentsulin/generator-redux-app\" target=\"_blank\" rel=\"external\"><strong>generator-redux-app</strong> - Scaffold out a redux app with counter example and react-router</a></li>\n<li><a href=\"https://github.com/sporto/redux-loader\" target=\"_blank\" rel=\"external\"><strong>redux-loader</strong> - A high order component for Redux. This components loads resources and passes them to the child components via props</a></li>\n<li><a href=\"https://github.com/Kvoti/redux-rest\" target=\"_blank\" rel=\"external\"><strong>redux-rest</strong> - Automatically create Flux action constants, action creators and Redux reducers for your REST API</a></li>\n<li><a href=\"https://github.com/kennetpostigo/react-reach\" target=\"_blank\" rel=\"external\"><strong>react-reach</strong> - A library to communicate with Graphql through Redux</a></li>\n<li><a href=\"https://github.com/lexich/redux-api\" target=\"_blank\" rel=\"external\"><strong>redux-api</strong> - Flux REST API for redux infrastructure</a></li>\n<li><a href=\"https://github.com/alixander/redux-store-validator\" target=\"_blank\" rel=\"external\"><strong>redux-store-validator</strong> - Add validation to your Redux reducers</a></li>\n<li><a href=\"https://github.com/adjohnson916/firedux\" target=\"_blank\" rel=\"external\"><strong>firedux</strong> - Firebase + Redux for ReactJS</a></li>\n<li><a href=\"https://github.com/vslinko/vstack-router\" target=\"_blank\" rel=\"external\"><strong>vstack-router</strong> - Universal router</a></li>\n<li><a href=\"https://github.com/Tom-Alexander/redux-ecommerce\" target=\"_blank\" rel=\"external\"><strong>redux-ecommerce</strong> - E-commerce flux with redux</a></li>\n<li><a href=\"https://github.com/erikras/redux-form\" target=\"_blank\" rel=\"external\"><strong>redux-form</strong> - An ES7 decorator for forms using Redux and React</a></li>\n<li><a href=\"https://github.com/posabsolute/redux-form-validator\" target=\"_blank\" rel=\"external\"><strong>redux-form-validation</strong> - Form validation for controlled &amp; uncontrolled inputs</a></li>\n<li><a href=\"https://github.com/mihirsoni/simple-redux-form\" target=\"_blank\" rel=\"external\"><strong>simple-redux-form</strong> - A tiny redux-form alternative Higher Order Component for forms</a>.</li>\n<li><a href=\"https://github.com/calesce/redux-slider-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-slider-monitor</strong> - A custom monitor for Redux DevTools to replay recorded Redux actions</a></li>\n<li><a href=\"https://github.com/substantial/updeep\" target=\"_blank\" rel=\"external\"><strong>updeep</strong> - Easily update nested frozen objects and arrays in a declarative and immutable manner</a></li>\n<li><a href=\"https://github.com/gajus/redux-immutable\" target=\"_blank\" rel=\"external\"><strong>redux-immutable</strong> - Streamlines use of Immutable.js with Redux reducers.</a></li>\n<li><a href=\"https://github.com/lapanoid/redux-import-export-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-import-export-monitor</strong> - A monitor for copying your serialized action log to the clipboard, as well as pasting it in from somewhere else</a></li>\n<li><a href=\"https://github.com/winkler1/icedam\" target=\"_blank\" rel=\"external\"><strong>icedam</strong> - Just-in-time immutability: freezes data sent to views.</a></li>\n<li><a href=\"https://github.com/broucz/react-inline-grid\" target=\"_blank\" rel=\"external\"><strong>react-inline-grid</strong> - Predictable flexbox based grid for React using Redux and Immutable-js.</a></li>\n<li><a href=\"https://github.com/grigory-leonenko/redux-easy-actions\" target=\"_blank\" rel=\"external\"><strong>redux-easy-actions</strong> - Sugar library for creating Redux or Flux actions</a></li>\n<li><a href=\"https://github.com/popc0rn/redux-mount\" target=\"_blank\" rel=\"external\"><strong>redux-mount</strong> - Mount state data and change its state values on the fly</a></li>\n<li><a href=\"https://github.com/ashaffer/redux-multi\" target=\"_blank\" rel=\"external\"><strong>redux-multi</strong> - Dispatch multiple actions from one action creator</a></li>\n<li><a href=\"https://github.com/scottcorgan/immu\" target=\"_blank\" rel=\"external\"><strong>immu</strong> - A tiny, fail-fast, lazy, immutable Javascript objects library</a></li>\n<li><a href=\"https://github.com/Versent/redux-crud\" target=\"_blank\" rel=\"external\"><strong>Generate standard action creators and reducers for CRUD applications</strong></a></li>\n<li><a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"><strong>Redux &amp; ImmutableJs</strong> - Integration of Redux &amp; ImmutableJs that 100% conforms Redux standards</a></li>\n<li><a href=\"https://github.com/gcanti/redux-tcomb\" target=\"_blank\" rel=\"external\"><strong>redux-tcomb</strong> - Immutable and type-checked state and actions for Redux</a></li>\n<li><a href=\"https://github.com/johanneslumpe/redux-react-router-transitions\" target=\"_blank\" rel=\"external\"><strong>redux-react-router-transitions</strong> - Attach react-router transitions to arbitrary actions</a></li>\n<li><a href=\"https://github.com/ForbesLindesay/redux-optimist\" target=\"_blank\" rel=\"external\"><strong>redux-optimist</strong> - Optimistically apply actions that can be later commited or reverted.</a></li>\n<li><a href=\"https://github.com/whetstone/redux-devtools-diff-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-diff-monitor</strong> - Redux DevTools – Diff Monitor</a></li>\n<li><a href=\"https://github.com/romseguy/redux-store-visualizer\" target=\"_blank\" rel=\"external\"><strong>redux-store-visualizer</strong> - Visualize Redux store in real time</a></li>\n<li><a href=\"https://github.com/banderson/generator-redux\" target=\"_blank\" rel=\"external\"><strong>generator-redux</strong> - CLI tools for Redux: next-gen functional Flux/React with devtools</a></li>\n<li><a href=\"https://github.com/Jackong/generator-reactapp\" target=\"_blank\" rel=\"external\"><strong>generator-reactapp</strong> - Yeoman generator for react app with redux</a></li>\n<li><a href=\"https://github.com/tdzl2003/redux-viewmodel\" target=\"_blank\" rel=\"external\"><strong>redux-viewmodel</strong> - ViewModel wrapping for Redux &amp; React</a></li>\n<li><a href=\"https://github.com/newtack/redux-utils\" target=\"_blank\" rel=\"external\"><strong>redux-utils</strong> - Utility functions for Redux</a></li>\n<li><a href=\"https://github.com/erikras/multireducer\" target=\"_blank\" rel=\"external\"><strong>multireducer</strong> - A utility to wrap many copies of a single Redux reducer into a single key-based reducer</a></li>\n<li><a href=\"https://github.com/philholden/subdivide\" target=\"_blank\" rel=\"external\"><strong>subdivide</strong> - User defined UI layout: Every pane can be subdivided and any widget assigned to any pane</a></li>\n<li><a href=\"https://github.com/gregthebusker/replux\" target=\"_blank\" rel=\"external\"><strong>replux</strong> - Self contained components and enhancements for Redux</a></li>\n<li><a href=\"https://github.com/aparticka/redux-immutable-utils\" target=\"_blank\" rel=\"external\"><strong>redux-immutable-utils</strong> - Utilities for using Immutable with Redux</a></li>\n<li><a href=\"https://github.com/acdlite/recompose\" target=\"_blank\" rel=\"external\"><strong>recompose</strong> - A microcomponentization toolkit for React</a></li>\n<li><a href=\"https://github.com/izaakschroeder/redux-lift\" target=\"_blank\" rel=\"external\"><strong>redux-lift</strong> - Lifting for Redux</a></li>\n<li><a href=\"https://github.com/router5/redux-router5\" target=\"_blank\" rel=\"external\"><strong>redux-router5</strong> - router5 integration with Redux</a></li>\n<li><a href=\"https://github.com/zalmoxisus/redux-devtools-extension\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-extension</strong> - Redux DevTools Extension</a></li>\n<li><a href=\"https://github.com/colinmeinke/universal-redux-router\" target=\"_blank\" rel=\"external\"><strong>universal-redux-router</strong> - A very simple router for Redux and React that works on both server and client</a></li>\n<li><a href=\"https://github.com/jprichardson/redux-watch\" target=\"_blank\" rel=\"external\"><strong>redux-watch</strong> - Watch/monitor for state changes on an object path</a></li>\n<li><a href=\"https://github.com/bvaughn/redux-devtools-filterable-log-monitor\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-filterable-log-monitor</strong> - Filterable tree view monitor for Redux DevTools</a></li>\n<li><a href=\"https://github.com/posabsolute/redux-flash-notification\" target=\"_blank\" rel=\"external\"><strong>redux-flash-notification</strong> -  A flash notification component for Redux</a></li>\n<li><a href=\"https://github.com/yelouafi/redux-saga\" target=\"_blank\" rel=\"external\"><strong>redux-saga</strong> - An alternative side effect model for Redux apps</a></li>\n<li><a href=\"https://github.com/zalmoxisus/remote-redux-devtools\" target=\"_blank\" rel=\"external\"><strong>remote-redux-devtools</strong> - Use Redux DevTools remotely for React Native, hybrid, desktop and server side Redux apps</a></li>\n<li><a href=\"https://github.com/YoruNoHikage/redux-devtools-dispatch\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-dispatch</strong> - Dispatch your actions manually to test if your app reacts well</a></li>\n<li><a href=\"https://github.com/raisemarketplace/redux-loop\" target=\"_blank\" rel=\"external\"><strong>redux-loop</strong> - Sequence your effects naturally and purely by returning them from your reducers</a></li>\n<li><a href=\"https://github.com/tommikaikkonen/redux-orm\" target=\"_blank\" rel=\"external\"><strong>redux-orm</strong> - A small, simple and immutable ORM to manage data in your Redux store</a></li>\n<li><a href=\"https://github.com/aparticka/redux-bacon\" target=\"_blank\" rel=\"external\"><strong>redux-bacon</strong> - Utilities for attaching Bacon.js to Redux</a></li>\n<li><a href=\"https://github.com/slorber/rereduce\" target=\"_blank\" rel=\"external\"><strong>rereduce</strong> - Reducer library for Redux</a></li>\n<li><a href=\"https://github.com/KarlPurk/redux-decorators\" target=\"_blank\" rel=\"external\"><strong>redux-decorators</strong> - A ridiculously good syntax for working with Redux and TypeScript. Currently limited to Angular 2 but could potentially be used elsewhere</a></li>\n<li><a href=\"https://github.com/amsardesai/redux-test-reducer\" target=\"_blank\" rel=\"external\"><strong>redux-test-reducer</strong> - Simple and clean testing mechanism for Redux reducers</a></li>\n<li><a href=\"https://github.com/alexkuz/redux-devtools-inspector\" target=\"_blank\" rel=\"external\"><strong>redux-devtools-inspector</strong> - Another Redux DevTools Monitor</a></li>\n<li><a href=\"https://github.com/sotojuan/redux-ava\" target=\"_blank\" rel=\"external\"><strong>redux-ava</strong> - Helpers for writing Redux tests in AVA</a></li>\n<li><a href=\"https://github.com/SpencerCDixon/redux-cli\" target=\"_blank\" rel=\"external\"><strong>redux-cli</strong> - An opinionated CLI for building redux/react apps quicker</a></li>\n<li><a href=\"https://github.com/salsita/redux-saga-rxjs\" target=\"_blank\" rel=\"external\"><strong>redux-saga-rxjs</strong> - RxJS implementation of Saga pattern for redux</a></li>\n<li><a href=\"https://github.com/dmitry-zaets/redux-actions-assertions\" target=\"_blank\" rel=\"external\"><strong>redux-actions-assertions</strong> - Assertions for redux actions testing</a></li>\n<li><a href=\"https://github.com/sergiodxa/redux-duck\" target=\"_blank\" rel=\"external\"><strong>redux-duck</strong> - Helper function to create Redux modules using the ducks-modular-redux proposal</a></li>\n<li><a href=\"https://github.com/jhen0409/redux-dispatch-cli\" target=\"_blank\" rel=\"external\"><strong>redux-dispatch-cli</strong> - A CLI tool for Redux remote dispatch. Used in remote-redux-devtools</a></li>\n<li><a href=\"https://github.com/zackargyle/redux-immutable-reducer\" target=\"_blank\" rel=\"external\"><strong>redux-immutable-reducer</strong> - Immutable reducer states with Redux</a></li>\n<li><a href=\"https://github.com/redux-bootstrap/redux-bootstrap\" target=\"_blank\" rel=\"external\"><strong>redux-bootstrap</strong> - configure React + React-Router + Redux + Immutable.js with one function!</a></li>\n<li><a href=\"https://github.com/mandeepbrar/redux-director\" target=\"_blank\" rel=\"external\"><strong>redux-director</strong> - Redux bindings to director router</a></li>\n<li><a href=\"https://github.com/ConciergeAuctions/redux-q\" target=\"_blank\" rel=\"external\"><strong>redux-q</strong> - Provides a way to queue callbacks until an action is dispatched</a></li>\n<li><a href=\"https://github.com/exeto/redux-apist\" target=\"_blank\" rel=\"external\"><strong>redux-apist</strong> - Creator API actions for redux-thunk</a></li>\n<li><a href=\"https://github.com/chiefGui/reswitch\" target=\"_blank\" rel=\"external\"><strong>reswitch</strong> — Write reducers with less boilerplate</a></li>\n<li><a href=\"https://github.com/redux-autoform/redux-autoform\" target=\"_blank\" rel=\"external\"><strong>redux-autoform</strong> - Create Redux-Forms dynamically out of metadata</a></li>\n<li><a href=\"https://github.com/clarus/redux-ship\" target=\"_blank\" rel=\"external\"><strong>redux-ship</strong> - Composable, testable and typable side effects</a></li>\n</ul>\n</li>\n<li><p>Frameworks</p>\n<ul>\n<li><a href=\"https://github.com/jumpsuit/jumpsuit\" target=\"_blank\" rel=\"external\"><strong>Jumpsuit</strong> - A powerful &amp; efficient React framework. Jump in. Zip up. Build great apps.</a></li>\n<li><a href=\"https://github.com/jumpsuit/jumpstate\" target=\"_blank\" rel=\"external\"><strong>Jumpstate</strong> - Simple and powerful state management for Redux</a></li>\n<li><a href=\"https://github.com/sorrycc/dva\" target=\"_blank\" rel=\"external\"><strong>dva</strong> - Front-end framework based on react, redux, react-redux, react-router and redux-saga.</a></li>\n<li><a href=\"https://github.com/ashaffer/vdux\" target=\"_blank\" rel=\"external\"><strong>Vdux</strong> - World’s smallest framework.  Stateless Virtual DOM &lt;-&gt; Redux</a></li>\n<li><a href=\"https://github.com/esex/esex\" target=\"_blank\" rel=\"external\"><strong>Esex</strong> - Full-stack Universal JavaScript Framework (Redux+RxJs)</a></li>\n<li><a href=\"https://github.com/vslinko/ripster\" target=\"_blank\" rel=\"external\"><strong>Ripster</strong></a></li>\n<li><a href=\"https://github.com/este/este\" target=\"_blank\" rel=\"external\"><strong>Este</strong> - The most complete minimal dev stack / boilerplate for React &amp; Redux universal web apps</a></li>\n<li><a href=\"https://github.com/littlstar/stardux\" target=\"_blank\" rel=\"external\"><strong>stardux</strong> - Functional DOM containers based on starplate, IncrementalDOM, and redux</a></li>\n<li><a href=\"https://github.com/marknutter/nux\" target=\"_blank\" rel=\"external\"><strong>nux</strong> - A Push-Based Functional Reactive Web Application Framework</a></li>\n<li><a href=\"https://github.com/Wildhoney/Keo\" target=\"_blank\" rel=\"external\"><strong>Keo</strong> - Plain functions for a more functional Deku approach to creating React components, with functional goodies such as compose, memoize, etc… for free</a></li>\n<li><a href=\"https://github.com/wildlyinaccurate/plait\" target=\"_blank\" rel=\"external\"><strong>plait</strong> - A minimal JavaScript framework for building reactive web components</a></li>\n<li><a href=\"https://github.com/reactuate/reactuate\" target=\"_blank\" rel=\"external\"><strong>reactuate</strong> — A React/Redux stack (not a boilerplate!) with a focus on Domain-Driven Design</a></li>\n<li><a href=\"https://github.com/mattkrick/meatier\" target=\"_blank\" rel=\"external\"><strong>meatier</strong> - Like meteor, but meatier</a></li>\n<li><a href=\"https://github.com/relax/relax\" target=\"_blank\" rel=\"external\"><strong>relax</strong> - New generation CMS on top of React, Redux and GraphQL</a></li>\n<li><a href=\"https://github.com/flipace/lovli.js\" target=\"_blank\" rel=\"external\"><strong>lovli.js</strong> - A boilerplate for developing react+redux applications with rethinkdb/horizon as realtime database and express for the server</a></li>\n<li><a href=\"https://github.com/mariusandra/kea-logic\" target=\"_blank\" rel=\"external\"><strong>kea</strong> - Well-readable, self-documenting and easily refactorable framework that brings your data to life! Comes with scaffolding tools</a> :bird:</li>\n<li><a href=\"https://github.com/tianche/feeble\" target=\"_blank\" rel=\"external\"><strong>Feeble</strong> - A framework built on top of React/Redux/redux-saga which aims to make building React/Redux applications easier and better.</a></li>\n<li><a href=\"https://github.com/mjaneczek/conventional-redux\" target=\"_blank\" rel=\"external\"><strong>Conventional-Redux</strong> - A wrapper for react-redux which provides API based on convention over configuration pattern.</a></li>\n<li><a href=\"https://github.com/derzunov/redux-react-i18n\" target=\"_blank\" rel=\"external\"><strong>redux-react-i18n</strong> - An i18n solution for redux/react✌🏿✊🏽🤘🏻</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a><a href=\"examples/README.md\">Examples</a></h3><hr>\n<h3 id=\"Similar-libraries\"><a href=\"#Similar-libraries\" class=\"headerlink\" title=\"Similar libraries\"></a>Similar libraries</h3><ul>\n<li><a href=\"https://github.com/BobBuehler/flux-ts\" target=\"_blank\" rel=\"external\"><strong>flux-ts</strong> - A small flux implementation heavily inspired by redux</a></li>\n<li><a href=\"https://github.com/acstll/chopped-redux\" target=\"_blank\" rel=\"external\"><strong>chopped-redux</strong> - A very small Flux implementation based on Redux</a></li>\n<li><a href=\"https://github.com/edge/fluxette\" target=\"_blank\" rel=\"external\"><strong>fluxette</strong> - Minimalist, functional, and concise Flux</a></li>\n<li><a href=\"https://github.com/jas-chen/rx-redux\" target=\"_blank\" rel=\"external\"><strong>rx-redux</strong> - A reimplementation of redux using RxJS</a></li>\n<li><a href=\"https://github.com/johnhenry/understate\" target=\"_blank\" rel=\"external\"><strong>understate</strong> - A simple state manager</a></li>\n<li><a href=\"https://github.com/Lucifier129/refer\" target=\"_blank\" rel=\"external\"><strong>refer</strong> - Redux-like library for handling global state on functional style</a></li>\n<li><a href=\"https://github.com/karelsteinmetz/bobflux\" target=\"_blank\" rel=\"external\"><strong>bobflux</strong> - Bobflux is pure functional implementation of FLUX pattern and is fitted to Bobril</a></li>\n<li><a href=\"https://github.com/mobxjs/mobx\" target=\"_blank\" rel=\"external\"><strong>mobx</strong> - Simple, scalable state management</a></li>\n</ul>\n<hr>\n<h3 id=\"Deku-Functional-view-library-for-building-UI-components-as-an-alternative-to-React\"><a href=\"#Deku-Functional-view-library-for-building-UI-components-as-an-alternative-to-React\" class=\"headerlink\" title=\"Deku - Functional view library for building UI components as an alternative to React\"></a><a href=\"https://github.com/dekujs/deku\" target=\"_blank\" rel=\"external\">Deku - Functional view library for building UI components as an alternative to React</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/nivanson/deku-redux-universal-hot-example\" target=\"_blank\" rel=\"external\">Deku + Express + Redux + Crossroads Router</a></li>\n<li><a href=\"https://github.com/troch/deku-redux\" target=\"_blank\" rel=\"external\">deku-redux - Bindings for redux in deku (Standalone plugin)</a><br>)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Incremental-DOM-Incremental-DOM-is-a-library-for-building-up-DOM-trees-and-updating-them-in-place-when-data-changes\"><a href=\"#Incremental-DOM-Incremental-DOM-is-a-library-for-building-up-DOM-trees-and-updating-them-in-place-when-data-changes\" class=\"headerlink\" title=\"Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes\"></a><a href=\"http://google.github.io/incremental-dom\" target=\"_blank\" rel=\"external\">Incremental DOM - Incremental DOM is a library for building up DOM trees and updating them in-place when data changes</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/joshthecoder/idom-redux-todomvc-app\" target=\"_blank\" rel=\"external\">Incremental DOM + Redux Flux = Todo App</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"WinJS-Windows-Library-for-JavaScript\"><a href=\"#WinJS-Windows-Library-for-JavaScript\" class=\"headerlink\" title=\"WinJS - Windows Library for JavaScript\"></a><a href=\"http://try.buildwinjs.com\" target=\"_blank\" rel=\"external\">WinJS - Windows Library for JavaScript</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/unindented/react-redux-winjs-example\" target=\"_blank\" rel=\"external\">react-redux-winjs-example</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Angular-HTML-enhanced-for-web-apps\"><a href=\"#Angular-HTML-enhanced-for-web-apps\" class=\"headerlink\" title=\"Angular - HTML enhanced for web apps\"></a><a href=\"https://angularjs.org\" target=\"_blank\" rel=\"external\">Angular - HTML enhanced for web apps</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/wbuchwalter/tsRedux\" target=\"_blank\" rel=\"external\">Angular + Typescript + Redux</a></li>\n<li><a href=\"https://github.com/wbuchwalter/ng-redux\" target=\"_blank\" rel=\"external\">ng-redux - Standalone plugin</a></li>\n<li><a href=\"https://github.com/neilff/redux-ui-router\" target=\"_blank\" rel=\"external\">redux-ui-router - ngRedux middleware for Angular UI Router</a></li>\n<li><a href=\"https://github.com/r-park/todo-angular-redux\" target=\"_blank\" rel=\"external\">Todo app with ng-redux • ES6 • Webpack</a></li>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux-example\" target=\"_blank\" rel=\"external\">https://github.com/InfomediaLtd/angular2-redux-example</a></li>\n<li><a href=\"https://github.com/tomusdrw/angular2-redux-example\" target=\"_blank\" rel=\"external\">https://github.com/tomusdrw/angular2-redux-example</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Angular-2-One-framework-Mobile-and-desktop\"><a href=\"#Angular-2-One-framework-Mobile-and-desktop\" class=\"headerlink\" title=\"Angular 2 - One framework. Mobile and desktop\"></a><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">Angular 2 - One framework. Mobile and desktop</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux-example\" target=\"_blank\" rel=\"external\">angular2-redux-example - Example project for using pure Redux with Angular 2 and TypeScript</a></li>\n<li><a href=\"https://github.com/angular-redux/store\" target=\"_blank\" rel=\"external\">@angular-redux/store - Angular 2 bindings for Redux</a></li>\n<li><a href=\"https://github.com/InfomediaLtd/angular2-redux\" target=\"_blank\" rel=\"external\">angular2-redux - Wrapper components for using Redux in an Angular2 application</a></li>\n<li><a href=\"https://github.com/forforeach/ng2redux\" target=\"_blank\" rel=\"external\">ng2redux - Angular 2 bindings for Redux implemented with TypeScript and decorators</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Vue-A-library-for-building-modern-web-interfaces\"><a href=\"#Vue-A-library-for-building-modern-web-interfaces\" class=\"headerlink\" title=\"Vue - A library for building modern web interfaces\"></a><a href=\"http://vuejs.org\" target=\"_blank\" rel=\"external\">Vue - A library for building modern web interfaces</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/revue/revue\" target=\"_blank\" rel=\"external\">Revue - Redux binding for Vue</a></li>\n<li><a href=\"https://github.com/yang-wei/vue-flux\" target=\"_blank\" rel=\"external\">Vue + Redux</a></li>\n<li><a href=\"https://github.com/zhongqf/meteor-vue-redux-example\" target=\"_blank\" rel=\"external\">Meteor + Vue + Redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Polymer-Build-modern-apps-using-web-components\"><a href=\"#Polymer-Build-modern-apps-using-web-components\" class=\"headerlink\" title=\"Polymer - Build modern apps using web components\"></a><a href=\"https://www.polymer-project.org\" target=\"_blank\" rel=\"external\">Polymer - Build modern apps using web components</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/tur-nr/polymer-redux\" target=\"_blank\" rel=\"external\">polymer-redux</a></li>\n<li><a href=\"https://github.com/lastmjs/redux-store-element\" target=\"_blank\" rel=\"external\">redux-store-element</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Ember-A-framework-for-creating-ambitious-web-applications\"><a href=\"#Ember-A-framework-for-creating-ambitious-web-applications\" class=\"headerlink\" title=\"Ember - A framework for creating ambitious web applications\"></a><a href=\"http://emberjs.com\" target=\"_blank\" rel=\"external\">Ember - A framework for creating ambitious web applications</a></h3><ul>\n<li>Examples</li>\n</ul>\n<hr>\n<h3 id=\"Meteor-Build-apps-that-are-a-delight-to-use-faster-than-you-ever-thought-possible\"><a href=\"#Meteor-Build-apps-that-are-a-delight-to-use-faster-than-you-ever-thought-possible\" class=\"headerlink\" title=\"Meteor - Build apps that are a delight to use, faster than you ever thought possible\"></a><a href=\"https://www.meteor.com\" target=\"_blank\" rel=\"external\">Meteor - Build apps that are a delight to use, faster than you ever thought possible</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/zhongqf/meteor-react-redux-example\" target=\"_blank\" rel=\"external\">meteor-react-redux-example</a></li>\n<li><a href=\"https://github.com/AdamBrodzinski/meteor-flux-leaderboard/tree/redux\" target=\"_blank\" rel=\"external\">meteor-flux-leaderboard</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Mithril-A-Javascript-Framework-for-Building-Brilliant-Applications\"><a href=\"#Mithril-A-Javascript-Framework-for-Building-Brilliant-Applications\" class=\"headerlink\" title=\"Mithril - A Javascript Framework for Building Brilliant Applications\"></a><a href=\"http://mithril.js.org/\" target=\"_blank\" rel=\"external\">Mithril - A Javascript Framework for Building Brilliant Applications</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/mijime/mithril-redux-starter-hmr\" target=\"_blank\" rel=\"external\">mithril-redux-starter-hmr</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Backbone-Give-your-JS-App-some-Backbone-with-Models-Views-Collections-and-Events\"><a href=\"#Backbone-Give-your-JS-App-some-Backbone-with-Models-Views-Collections-and-Events\" class=\"headerlink\" title=\"Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events\"></a><a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"external\">Backbone - Give your JS App some Backbone with Models, Views, Collections, and Events</a></h3><ul>\n<li>Tools<ul>\n<li><a href=\"https://github.com/redbooth/backbone-redux\" target=\"_blank\" rel=\"external\">backbone-redux — The easy way to keep your backbone collections and redux store in sync</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Aurelia-is-a-next-gen-JavaScript-client-framework-for-mobile-desktop-and-web-that-leverages-simple-conventions-to-empower-your-creativity\"><a href=\"#Aurelia-is-a-next-gen-JavaScript-client-framework-for-mobile-desktop-and-web-that-leverages-simple-conventions-to-empower-your-creativity\" class=\"headerlink\" title=\"Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity\"></a><a href=\"http://aurelia.io\" target=\"_blank\" rel=\"external\">Aurelia - is a next gen JavaScript client framework for mobile, desktop and web that leverages simple conventions to empower your creativity</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/voidberg/aurelia-redux-todo\" target=\"_blank\" rel=\"external\">aurelia-redux-todo - An implementation of the Redux todo demo app using Aurelia</a></li>\n<li><a href=\"https://www.sitepoint.com/managing-state-aurelia-with-redux/\" target=\"_blank\" rel=\"external\">Managing State in Aurelia: How to Use Aurelia with Redux</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Riot-A-React-like-user-interface-micro-library\"><a href=\"#Riot-A-React-like-user-interface-micro-library\" class=\"headerlink\" title=\"Riot - A React-like user interface micro-library\"></a><a href=\"http://riotjs.com\" target=\"_blank\" rel=\"external\">Riot - A React-like user interface micro-library</a></h3><ul>\n<li>Examples<ul>\n<li><a href=\"https://github.com/remyhonig/riotredux-budget\" target=\"_blank\" rel=\"external\">riotredux-budget</a></li>\n<li><a href=\"https://github.com/zesty-io/app-skeleton\" target=\"_blank\" rel=\"external\">app-skeleton</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"Electron-Build-cross-platform-desktop-apps-with-web-technologies\"><a href=\"#Electron-Build-cross-platform-desktop-apps-with-web-technologies\" class=\"headerlink\" title=\"Electron - Build cross platform desktop apps with web technologies\"></a><a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"external\">Electron - Build cross platform desktop apps with web technologies</a></h3><ul>\n<li><a href=\"https://github.com/chentsulin/electron-react-boilerplate\" target=\"_blank\" rel=\"external\">electron-react-boilerplate (Electron + Redux + Hot Reload)</a></li>\n</ul>\n<hr>\n<h3 id=\"A-Frame-A-web-framework-for-building-VR-experiences\"><a href=\"#A-Frame-A-web-framework-for-building-VR-experiences\" class=\"headerlink\" title=\"A-Frame - A web framework for building VR experiences\"></a><a href=\"https://aframe.io\" target=\"_blank\" rel=\"external\">A-Frame - A web framework for building VR experiences</a></h3><ul>\n<li><a href=\"https://github.com/ngokevin/kframe/tree/master/components/redux\" target=\"_blank\" rel=\"external\">aframe-redux-component</a></li>\n</ul>\n<hr>\n<h3 id=\"Chrome-Extensions\"><a href=\"#Chrome-Extensions\" class=\"headerlink\" title=\"Chrome Extensions\"></a>Chrome Extensions</h3><ul>\n<li><a href=\"https://github.com/Dharmoslap/redux-chrome-extension\" target=\"_blank\" rel=\"external\">Redux Chrome Extension</a></li>\n<li><p><a href=\"https://github.com/jhen0409/react-chrome-extension-boilerplate\" target=\"_blank\" rel=\"external\">React Chrome Extension Boilerplate (Webpack + Redux + Babel and etc</a></p>\n</li>\n<li><p>Examples</p>\n<ul>\n<li><a href=\"https://github.com/Pumgrana/plugin\" target=\"_blank\" rel=\"external\">Pumgrana Plugin</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Ruby-on-Rails-Resources\"><a href=\"#Ruby-on-Rails-Resources\" class=\"headerlink\" title=\"Ruby on Rails Resources\"></a>Ruby on Rails Resources</h2><ul>\n<li><a href=\"https://github.com/shakacode/react-webpack-rails-tutorial\" target=\"_blank\" rel=\"external\">React Webpack Rails Tutorial Using Redux</a></li>\n<li><a href=\"https://github.com/shakacode/react_on_rails\" target=\"_blank\" rel=\"external\">react_on_rails gem</a></li>\n</ul>\n<h2 id=\"Other-languages\"><a href=\"#Other-languages\" class=\"headerlink\" title=\"Other languages\"></a>Other languages</h2><ul>\n<li><p>.NET</p>\n<ul>\n<li><a href=\"https://github.com/GuillaumeSalles/redux.NET\" target=\"_blank\" rel=\"external\">https://github.com/GuillaumeSalles/redux.NET</a></li>\n<li><a href=\"https://github.com/pshomov/reducto\" target=\"_blank\" rel=\"external\">https://github.com/pshomov/reducto</a></li>\n</ul>\n</li>\n<li><p>Java</p>\n<ul>\n<li><a href=\"https://github.com/glung/redux-java\" target=\"_blank\" rel=\"external\">https://github.com/glung/redux-java</a></li>\n<li><a href=\"https://github.com/trikita/jedux\" target=\"_blank\" rel=\"external\">https://github.com/trikita/jedux</a></li>\n<li><a href=\"https://github.com/izumin5210/Droidux\" target=\"_blank\" rel=\"external\">https://github.com/izumin5210/Droidux</a></li>\n</ul>\n</li>\n<li><p>Swift</p>\n<ul>\n<li><a href=\"https://github.com/ReSwift/reduxSwift\" target=\"_blank\" rel=\"external\">https://github.com/ReSwift/reduxSwift</a></li>\n<li><a href=\"https://github.com/Swift-Flow/Swift-Flow\" target=\"_blank\" rel=\"external\">https://github.com/Swift-Flow/Swift-Flow</a></li>\n<li><a href=\"https://github.com/ReSwift/ReSwift\" target=\"_blank\" rel=\"external\">https://github.com/ReSwift/ReSwift</a> and <a href=\"http://reswift.github.io/ReSwift/master\" target=\"_blank\" rel=\"external\">docs</a></li>\n</ul>\n</li>\n<li><p>Purescript</p>\n<ul>\n<li><a href=\"https://github.com/brakmic/purescript-redux\" target=\"_blank\" rel=\"external\">https://github.com/brakmic/purescript-redux</a></li>\n<li><a href=\"https://github.com/faber/purescript-purdux\" target=\"_blank\" rel=\"external\">https://github.com/faber/purescript-purdux</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Immutable-collections","date":"2017-03-21T16:04:10.000Z","_content":"Immutable collections for JavaScript\n====================================\n\n[![Build Status](https://travis-ci.org/facebook/immutable-js.svg?branch=master)](https://travis-ci.org/facebook/immutable-js)\n\n[Immutable][] data cannot be changed once created, leading to much simpler\napplication development, no defensive copying, and enabling advanced memoization\nand change detection techniques with simple logic. [Persistent][] data presents\na mutative API which does not update the data in-place, but instead always\nyields new updated data.\n\nImmutable.js provides many Persistent Immutable data structures including:\n`List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet` and `Record`.\n\nThese data structures are highly efficient on modern JavaScript VMs by using\nstructural sharing via [hash maps tries][] and [vector tries][] as popularized\nby Clojure and Scala, minimizing the need to copy or cache data.\n\n`Immutable` also provides a lazy `Seq`, allowing efficient\nchaining of collection methods like `map` and `filter` without creating\nintermediate representations. Create some `Seq` with `Range` and `Repeat`.\n\nWant to hear more? Watch the presentation about Immutable.js:\n\n<a href=\"https://youtu.be/I7IdS-PbEgI\" target=\"_blank\" alt=\"Immutable Data and React\"><img src=\"https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg\" /></a>\n\n[Persistent]: http://en.wikipedia.org/wiki/Persistent_data_structure\n[Immutable]: http://en.wikipedia.org/wiki/Immutable_object\n[hash maps tries]: http://en.wikipedia.org/wiki/Hash_array_mapped_trie\n[vector tries]: http://hypirion.com/musings/understanding-persistent-vector-pt-1\n\n\nGetting started\n---------------\n\nInstall `immutable` using npm.\n\n```shell\nnpm install immutable\n```\n\nThen require it into any module.\n\n```javascript\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n### Browser\n\nTo use `immutable` from a browser, download [dist/immutable.min.js](https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js)\nor use a CDN such as [CDNJS](https://cdnjs.com/libraries/immutable)\nor [jsDelivr](http://www.jsdelivr.com/#!immutable.js).\n\nThen, add it as a script tag to your page:\n\n```html\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\nOr use an AMD loader (such as [RequireJS](http://requirejs.org/)):\n\n```javascript\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\nIf you're using [browserify](http://browserify.org/), the `immutable` npm module\nalso works from the browser.\n\n### TypeScript\n\nUse these Immutable collections and sequences as you would use native\ncollections in your [TypeScript](http://typescriptlang.org) programs while still taking\nadvantage of type generics, error detection, and auto-complete in your IDE.\n\nJust add a reference with a relative path to the type declarations at the top\nof your file.\n\n```javascript\n///<reference path='./node_modules/immutable/dist/immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n\nThe case for Immutability\n-------------------------\n\nMuch of what makes application development difficult is tracking mutation and\nmaintaining state. Developing with immutable data encourages you to think\ndifferently about how data flows through your application.\n\nSubscribing to data events throughout your application creates a huge overhead of\nbook-keeping which can hurt performance, sometimes dramatically, and creates\nopportunities for areas of your application to get out of sync with each other\ndue to easy to make programmer error. Since immutable data never changes,\nsubscribing to changes throughout the model is a dead-end and new data can only\never be passed from above.\n\nThis model of data flow aligns well with the architecture of [React][]\nand especially well with an application designed using the ideas of [Flux][].\n\nWhen data is passed from above rather than being subscribed to, and you're only\ninterested in doing work when something has changed, you can use equality.\n\nImmutable collections should be treated as *values* rather than *objects*. While\nobjects represent some thing which could change over time, a value represents\nthe state of that thing at a particular instance of time. This principle is most\nimportant to understanding the appropriate use of immutable data. In order to\ntreat Immutable.js collections as values, it's important to use the\n`Immutable.is()` function or `.equals()` method to determine value equality\ninstead of the `===` operator which determines object reference identity.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\nNote: As a performance optimization `Immutable` attempts to return the existing\ncollection when an operation would result in an identical collection, allowing\nfor using `===` reference equality to determine if something definitely has not\nchanged. This can be extremely useful when used within a memoization function\nwhich would prefer to re-run the function if a deeper equality check could\npotentially be more costly. The `===` equality check is also used internally by\n`Immutable.is` and `.equals()` as a performance optimization.\n\nIf an object is immutable, it can be \"copied\" simply by making another reference\nto it instead of copying the entire object. Because a reference is much smaller\nthan the object itself, this results in memory savings and a potential boost in\nexecution speed for programs which rely on copies (such as an undo-stack).\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n[React]: http://facebook.github.io/react/\n[Flux]: http://facebook.github.io/flux/docs/overview.html\n\n\nJavaScript-first API\n--------------------\n\nWhile `immutable` is inspired by Clojure, Scala, Haskell and other functional\nprogramming environments, it's designed to bring these powerful concepts to\nJavaScript, and therefore has an Object-Oriented API that closely mirrors that\nof [ES6][] [Array][], [Map][], and [Set][].\n\n[ES6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n[Set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\nThe difference for the immutable collections is that methods which would mutate\nthe collection, like `push`, `set`, `unshift` or `splice` instead return a new\nimmutable collection. Methods which return new arrays like `slice` or `concat`\ninstead return new immutable collections.\n\n```javascript\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\nAlmost all of the methods on [Array][] will be found in similar form on\n`Immutable.List`, those of [Map][] found on `Immutable.Map`, and those of [Set][]\nfound on `Immutable.Set`, including collection operations like `forEach()`\nand `map()`.\n\n```javascript\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n### Accepts raw JavaScript objects.\n\nDesigned to inter-operate with your existing JavaScript, `immutable`\naccepts plain JavaScript Arrays and Objects anywhere a method expects an\n`Iterable` with no performance penalty.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\nThis is possible because `immutable` can treat any JavaScript Array or Object\nas an Iterable. You can take advantage of this in order to get sophisticated\ncollection methods on JavaScript Objects, which otherwise have a very sparse\nnative API. Because Seq evaluates lazily and does not cache intermediate\nresults, these operations can be extremely efficient.\n\n```javascript\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a quote-less\nshorthand, while Immutable Maps accept keys of any type.\n\n```js\nvar obj = { 1: \"one\" };\nObject.keys(obj); // [ \"1\" ]\nobj[\"1\"]; // \"one\"\nobj[1];   // \"one\"\n\nvar map = Immutable.fromJS(obj);\nmap.get(\"1\"); // \"one\"\nmap.get(1);   // undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string, but\nsince Immutable Map keys can be of any type the argument to `get()` is\nnot altered.\n\n\n### Converts back to raw JavaScript objects.\n\nAll `immutable` Iterables can be converted to plain JavaScript Arrays and\nObjects shallowly with `toArray()` and `toObject()` or deeply with `toJS()`.\nAll Immutable Iterables also implement `toJSON()` allowing them to be passed to\n`JSON.stringify` directly.\n\n```javascript\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n### Embraces ES6\n\n`Immutable` takes advantage of features added to JavaScript in [ES6][],\nthe latest standard version of ECMAScript (JavaScript), including [Iterators][],\n[Arrow Functions][], [Classes][], and [Modules][]. It's also inspired by the\n[Map][] and [Set][] collections added to ES6. The library is \"transpiled\" to ES3\nin order to support all modern browsers.\n\nAll examples are presented in ES6. To run in all browsers, they need to be\ntranslated to ES3.\n\n```js\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n[Iterators]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n[Arrow Functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[Classes]: http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\n[Modules]: http://www.2ality.com/2014/09/es6-modules-final.html\n\n\nNested Structures\n-----------------\n\nThe collections in `immutable` are intended to be nested, allowing for deep\ntrees of data, similar to JSON.\n\n```javascript\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\nA few power-tools allow for reading and operating on nested data. The\nmost useful are `mergeDeep`, `getIn`, `setIn`, and `updateIn`, found on `List`,\n`Map` and `OrderedMap`.\n\n```javascript\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n\nLazy Seq\n--------\n\n`Seq` describes a lazy operation, allowing them to efficiently chain\nuse of all the Iterable methods (such as `map` and `filter`).\n\n**Seq is immutable** — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\nmethod called on a Seq will return a new Seq.\n\n**Seq is lazy** — Seq does as little work as necessary to respond to any\nmethod call.\n\nFor example, the following does not perform any work, because the resulting\nSeq is never used:\n\n    var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n      .filter(x => x % 2).map(x => x * x);\n\nOnce the Seq is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three times,\nand map is only called once:\n\n    console.log(oddSquares.get(1)); // 9\n\nAny collection can be converted to a lazy Seq with `.toSeq()`.\n\n    var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n\nSeq allows for the efficient chaining of sequence operations, especially when\nconverting to a different concrete type (such as to a JS object):\n\n    seq.flip().map(key => key.toUpperCase()).flip().toObject();\n    // { A: 1, B: 1, C: 1 }\n\nAs well as expressing logic that would otherwise seem memory-limited:\n\n    Immutable.Range(1, Infinity)\n      .skip(1000)\n      .map(n => -n)\n      .filter(n => n % 2 === 0)\n      .take(2)\n      .reduce((r, n) => r * n, 1);\n    // 1006008\n\nNote: An iterable is always iterated in the same order, however that order may\nnot always be well defined, as is the case for the `Map`.\n\n\nEquality treats Collections as Data\n-----------------------------------\n\n`Immutable` provides equality which treats immutable data structures as pure\ndata, performing a deep equality check if necessary.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n`Immutable.is()` uses the same measure of equality as [Object.is][]\nincluding if both are immutable and all keys and values are equal\nusing the same measure of equality.\n\n[Object.is]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n\nBatching Mutations\n------------------\n\n> If a tree falls in the woods, does it make a sound?\n>\n> If a pure function mutates some local data in order to produce an immutable\n> return value, is that ok?\n>\n> — Rich Hickey, Clojure\n\nApplying a mutation to create a new immutable object results in some overhead,\nwhich can add up to a minor performance penalty. If you need to apply a series\nof mutations locally before returning, `Immutable` gives you the ability to\ncreate a temporary mutable (transient) copy of a collection and apply a batch of\nmutations in a performant manner by using `withMutations`. In fact, this is\nexactly how  `Immutable` applies complex mutations itself.\n\nAs an example, building `list2` results in the creation of 1, not 3, new\nimmutable Lists.\n\n```javascript\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\nNote: `immutable` also provides `asMutable` and `asImmutable`, but only\nencourages their use when `withMutations` will not suffice. Use caution to not\nreturn a mutable copy, which could result in undesired behavior.\n\n*Important!*: Only a select few methods can be used in `withMutations` including\n`set`, `push` and `pop`. These methods can be applied directly against a\npersistent data-structure where other methods like `map`, `filter`, `sort`,\nand `splice` will always return new immutable data-structures and never mutate\na mutable collection.\n\n\nDocumentation\n-------------\n\n[Read the docs](http://facebook.github.io/immutable-js/docs/) and eat your vegetables.\n\nDocs are automatically generated from [Immutable.d.ts](https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts).\nPlease contribute!\n\nAlso, don't miss the [Wiki](https://github.com/facebook/immutable-js/wiki) which\ncontains articles on specific topics. Can't find something? Open an [issue](https://github.com/facebook/immutable-js/issues).\n\n\nTesting\n-------\n\nIf you are using the [Chai Assertion Library](http://chaijs.com/), [Chai Immutable](https://github.com/astorije/chai-immutable) provides a set of assertions to use against `Immutable` collections.\n\n\nContribution\n------------\n\nUse [Github issues](https://github.com/facebook/immutable-js/issues) for requests.\n\nWe actively welcome pull requests, learn how to [contribute](./CONTRIBUTING.md).\n\n\nChangelog\n---------\n\nChanges are tracked as [Github releases](https://github.com/facebook/immutable-js/releases).\n\n\nThanks\n------\n\n[Phil Bagwell](https://www.youtube.com/watch?v=K2NYwP90bNs), for his inspiration\nand research in persistent data structures.\n\n[Hugh Jackson](https://github.com/hughfdjackson/), for providing the npm package\nname. If you're looking for his unsupported package, see [this repository](https://github.com/hughfdjackson/immutable).\n\n\nLicense\n-------\n\n`Immutable` is [BSD-licensed](https://github.com/facebook/immutable-js/blob/master/LICENSE). We also provide an additional [patent grant](https://github.com/facebook/immutable-js/blob/master/PATENTS).","source":"_posts/Immutable collections for JavaScript copy.md","raw":"title: Immutable-collections\ndate: 2017-03-22 00:04:10\ncategories: Redux\ntags: [javascript,react]\n---\nImmutable collections for JavaScript\n====================================\n\n[![Build Status](https://travis-ci.org/facebook/immutable-js.svg?branch=master)](https://travis-ci.org/facebook/immutable-js)\n\n[Immutable][] data cannot be changed once created, leading to much simpler\napplication development, no defensive copying, and enabling advanced memoization\nand change detection techniques with simple logic. [Persistent][] data presents\na mutative API which does not update the data in-place, but instead always\nyields new updated data.\n\nImmutable.js provides many Persistent Immutable data structures including:\n`List`, `Stack`, `Map`, `OrderedMap`, `Set`, `OrderedSet` and `Record`.\n\nThese data structures are highly efficient on modern JavaScript VMs by using\nstructural sharing via [hash maps tries][] and [vector tries][] as popularized\nby Clojure and Scala, minimizing the need to copy or cache data.\n\n`Immutable` also provides a lazy `Seq`, allowing efficient\nchaining of collection methods like `map` and `filter` without creating\nintermediate representations. Create some `Seq` with `Range` and `Repeat`.\n\nWant to hear more? Watch the presentation about Immutable.js:\n\n<a href=\"https://youtu.be/I7IdS-PbEgI\" target=\"_blank\" alt=\"Immutable Data and React\"><img src=\"https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg\" /></a>\n\n[Persistent]: http://en.wikipedia.org/wiki/Persistent_data_structure\n[Immutable]: http://en.wikipedia.org/wiki/Immutable_object\n[hash maps tries]: http://en.wikipedia.org/wiki/Hash_array_mapped_trie\n[vector tries]: http://hypirion.com/musings/understanding-persistent-vector-pt-1\n\n\nGetting started\n---------------\n\nInstall `immutable` using npm.\n\n```shell\nnpm install immutable\n```\n\nThen require it into any module.\n\n```javascript\nvar Immutable = require('immutable');\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n### Browser\n\nTo use `immutable` from a browser, download [dist/immutable.min.js](https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js)\nor use a CDN such as [CDNJS](https://cdnjs.com/libraries/immutable)\nor [jsDelivr](http://www.jsdelivr.com/#!immutable.js).\n\nThen, add it as a script tag to your page:\n\n```html\n<script src=\"immutable.min.js\"></script>\n<script>\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n</script>\n```\n\nOr use an AMD loader (such as [RequireJS](http://requirejs.org/)):\n\n```javascript\nrequire(['./immutable.min.js'], function (Immutable) {\n    var map1 = Immutable.Map({a:1, b:2, c:3});\n    var map2 = map1.set('b', 50);\n    map1.get('b'); // 2\n    map2.get('b'); // 50\n});\n```\n\nIf you're using [browserify](http://browserify.org/), the `immutable` npm module\nalso works from the browser.\n\n### TypeScript\n\nUse these Immutable collections and sequences as you would use native\ncollections in your [TypeScript](http://typescriptlang.org) programs while still taking\nadvantage of type generics, error detection, and auto-complete in your IDE.\n\nJust add a reference with a relative path to the type declarations at the top\nof your file.\n\n```javascript\n///<reference path='./node_modules/immutable/dist/immutable.d.ts'/>\nimport Immutable = require('immutable');\nvar map1: Immutable.Map<string, number>;\nmap1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n```\n\n\nThe case for Immutability\n-------------------------\n\nMuch of what makes application development difficult is tracking mutation and\nmaintaining state. Developing with immutable data encourages you to think\ndifferently about how data flows through your application.\n\nSubscribing to data events throughout your application creates a huge overhead of\nbook-keeping which can hurt performance, sometimes dramatically, and creates\nopportunities for areas of your application to get out of sync with each other\ndue to easy to make programmer error. Since immutable data never changes,\nsubscribing to changes throughout the model is a dead-end and new data can only\never be passed from above.\n\nThis model of data flow aligns well with the architecture of [React][]\nand especially well with an application designed using the ideas of [Flux][].\n\nWhen data is passed from above rather than being subscribed to, and you're only\ninterested in doing work when something has changed, you can use equality.\n\nImmutable collections should be treated as *values* rather than *objects*. While\nobjects represent some thing which could change over time, a value represents\nthe state of that thing at a particular instance of time. This principle is most\nimportant to understanding the appropriate use of immutable data. In order to\ntreat Immutable.js collections as values, it's important to use the\n`Immutable.is()` function or `.equals()` method to determine value equality\ninstead of the `===` operator which determines object reference identity.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar map2 = map1.set('b', 2);\nassert(map1.equals(map2) === true);\nvar map3 = map1.set('b', 50);\nassert(map1.equals(map3) === false);\n```\n\nNote: As a performance optimization `Immutable` attempts to return the existing\ncollection when an operation would result in an identical collection, allowing\nfor using `===` reference equality to determine if something definitely has not\nchanged. This can be extremely useful when used within a memoization function\nwhich would prefer to re-run the function if a deeper equality check could\npotentially be more costly. The `===` equality check is also used internally by\n`Immutable.is` and `.equals()` as a performance optimization.\n\nIf an object is immutable, it can be \"copied\" simply by making another reference\nto it instead of copying the entire object. Because a reference is much smaller\nthan the object itself, this results in memory savings and a potential boost in\nexecution speed for programs which rely on copies (such as an undo-stack).\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3});\nvar clone = map1;\n```\n\n[React]: http://facebook.github.io/react/\n[Flux]: http://facebook.github.io/flux/docs/overview.html\n\n\nJavaScript-first API\n--------------------\n\nWhile `immutable` is inspired by Clojure, Scala, Haskell and other functional\nprogramming environments, it's designed to bring these powerful concepts to\nJavaScript, and therefore has an Object-Oriented API that closely mirrors that\nof [ES6][] [Array][], [Map][], and [Set][].\n\n[ES6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n[Array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n[Map]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n[Set]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\nThe difference for the immutable collections is that methods which would mutate\nthe collection, like `push`, `set`, `unshift` or `splice` instead return a new\nimmutable collection. Methods which return new arrays like `slice` or `concat`\ninstead return new immutable collections.\n\n```javascript\nvar list1 = Immutable.List.of(1, 2);\nvar list2 = list1.push(3, 4, 5);\nvar list3 = list2.unshift(0);\nvar list4 = list1.concat(list2, list3);\nassert(list1.size === 2);\nassert(list2.size === 5);\nassert(list3.size === 6);\nassert(list4.size === 13);\nassert(list4.get(0) === 1);\n```\n\nAlmost all of the methods on [Array][] will be found in similar form on\n`Immutable.List`, those of [Map][] found on `Immutable.Map`, and those of [Set][]\nfound on `Immutable.Set`, including collection operations like `forEach()`\nand `map()`.\n\n```javascript\nvar alpha = Immutable.Map({a:1, b:2, c:3, d:4});\nalpha.map((v, k) => k.toUpperCase()).join();\n// 'A,B,C,D'\n```\n\n### Accepts raw JavaScript objects.\n\nDesigned to inter-operate with your existing JavaScript, `immutable`\naccepts plain JavaScript Arrays and Objects anywhere a method expects an\n`Iterable` with no performance penalty.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:2, c:3, d:4});\nvar map2 = Immutable.Map({c:10, a:20, t:30});\nvar obj = {d:100, o:200, g:300};\nvar map3 = map1.merge(map2, obj);\n// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }\n```\n\nThis is possible because `immutable` can treat any JavaScript Array or Object\nas an Iterable. You can take advantage of this in order to get sophisticated\ncollection methods on JavaScript Objects, which otherwise have a very sparse\nnative API. Because Seq evaluates lazily and does not cache intermediate\nresults, these operations can be extremely efficient.\n\n```javascript\nvar myObject = {a:1,b:2,c:3};\nImmutable.Seq(myObject).map(x => x * x).toObject();\n// { a: 1, b: 4, c: 9 }\n```\n\nKeep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a quote-less\nshorthand, while Immutable Maps accept keys of any type.\n\n```js\nvar obj = { 1: \"one\" };\nObject.keys(obj); // [ \"1\" ]\nobj[\"1\"]; // \"one\"\nobj[1];   // \"one\"\n\nvar map = Immutable.fromJS(obj);\nmap.get(\"1\"); // \"one\"\nmap.get(1);   // undefined\n```\n\nProperty access for JavaScript Objects first converts the key to a string, but\nsince Immutable Map keys can be of any type the argument to `get()` is\nnot altered.\n\n\n### Converts back to raw JavaScript objects.\n\nAll `immutable` Iterables can be converted to plain JavaScript Arrays and\nObjects shallowly with `toArray()` and `toObject()` or deeply with `toJS()`.\nAll Immutable Iterables also implement `toJSON()` allowing them to be passed to\n`JSON.stringify` directly.\n\n```javascript\nvar deep = Immutable.Map({ a: 1, b: 2, c: Immutable.List.of(3, 4, 5) });\ndeep.toObject() // { a: 1, b: 2, c: List [ 3, 4, 5 ] }\ndeep.toArray() // [ 1, 2, List [ 3, 4, 5 ] ]\ndeep.toJS() // { a: 1, b: 2, c: [ 3, 4, 5 ] }\nJSON.stringify(deep) // '{\"a\":1,\"b\":2,\"c\":[3,4,5]}'\n```\n\n### Embraces ES6\n\n`Immutable` takes advantage of features added to JavaScript in [ES6][],\nthe latest standard version of ECMAScript (JavaScript), including [Iterators][],\n[Arrow Functions][], [Classes][], and [Modules][]. It's also inspired by the\n[Map][] and [Set][] collections added to ES6. The library is \"transpiled\" to ES3\nin order to support all modern browsers.\n\nAll examples are presented in ES6. To run in all browsers, they need to be\ntranslated to ES3.\n\n```js\n// ES6\nfoo.map(x => x * x);\n// ES3\nfoo.map(function (x) { return x * x; });\n```\n\n[Iterators]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n[Arrow Functions]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n[Classes]: http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\n[Modules]: http://www.2ality.com/2014/09/es6-modules-final.html\n\n\nNested Structures\n-----------------\n\nThe collections in `immutable` are intended to be nested, allowing for deep\ntrees of data, similar to JSON.\n\n```javascript\nvar nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }\n```\n\nA few power-tools allow for reading and operating on nested data. The\nmost useful are `mergeDeep`, `getIn`, `setIn`, and `updateIn`, found on `List`,\n`Map` and `OrderedMap`.\n\n```javascript\nvar nested2 = nested.mergeDeep({a:{b:{d:6}}});\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }\n\nnested2.getIn(['a', 'b', 'd']); // 6\n\nvar nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);\n// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }\n\nvar nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));\n// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }\n```\n\n\nLazy Seq\n--------\n\n`Seq` describes a lazy operation, allowing them to efficiently chain\nuse of all the Iterable methods (such as `map` and `filter`).\n\n**Seq is immutable** — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any mutative\nmethod called on a Seq will return a new Seq.\n\n**Seq is lazy** — Seq does as little work as necessary to respond to any\nmethod call.\n\nFor example, the following does not perform any work, because the resulting\nSeq is never used:\n\n    var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n      .filter(x => x % 2).map(x => x * x);\n\nOnce the Seq is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three times,\nand map is only called once:\n\n    console.log(oddSquares.get(1)); // 9\n\nAny collection can be converted to a lazy Seq with `.toSeq()`.\n\n    var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n\nSeq allows for the efficient chaining of sequence operations, especially when\nconverting to a different concrete type (such as to a JS object):\n\n    seq.flip().map(key => key.toUpperCase()).flip().toObject();\n    // { A: 1, B: 1, C: 1 }\n\nAs well as expressing logic that would otherwise seem memory-limited:\n\n    Immutable.Range(1, Infinity)\n      .skip(1000)\n      .map(n => -n)\n      .filter(n => n % 2 === 0)\n      .take(2)\n      .reduce((r, n) => r * n, 1);\n    // 1006008\n\nNote: An iterable is always iterated in the same order, however that order may\nnot always be well defined, as is the case for the `Map`.\n\n\nEquality treats Collections as Data\n-----------------------------------\n\n`Immutable` provides equality which treats immutable data structures as pure\ndata, performing a deep equality check if necessary.\n\n```javascript\nvar map1 = Immutable.Map({a:1, b:1, c:1});\nvar map2 = Immutable.Map({a:1, b:1, c:1});\nassert(map1 !== map2); // two different instances\nassert(Immutable.is(map1, map2)); // have equivalent values\nassert(map1.equals(map2)); // alternatively use the equals method\n```\n\n`Immutable.is()` uses the same measure of equality as [Object.is][]\nincluding if both are immutable and all keys and values are equal\nusing the same measure of equality.\n\n[Object.is]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n\nBatching Mutations\n------------------\n\n> If a tree falls in the woods, does it make a sound?\n>\n> If a pure function mutates some local data in order to produce an immutable\n> return value, is that ok?\n>\n> — Rich Hickey, Clojure\n\nApplying a mutation to create a new immutable object results in some overhead,\nwhich can add up to a minor performance penalty. If you need to apply a series\nof mutations locally before returning, `Immutable` gives you the ability to\ncreate a temporary mutable (transient) copy of a collection and apply a batch of\nmutations in a performant manner by using `withMutations`. In fact, this is\nexactly how  `Immutable` applies complex mutations itself.\n\nAs an example, building `list2` results in the creation of 1, not 3, new\nimmutable Lists.\n\n```javascript\nvar list1 = Immutable.List.of(1,2,3);\nvar list2 = list1.withMutations(function (list) {\n  list.push(4).push(5).push(6);\n});\nassert(list1.size === 3);\nassert(list2.size === 6);\n```\n\nNote: `immutable` also provides `asMutable` and `asImmutable`, but only\nencourages their use when `withMutations` will not suffice. Use caution to not\nreturn a mutable copy, which could result in undesired behavior.\n\n*Important!*: Only a select few methods can be used in `withMutations` including\n`set`, `push` and `pop`. These methods can be applied directly against a\npersistent data-structure where other methods like `map`, `filter`, `sort`,\nand `splice` will always return new immutable data-structures and never mutate\na mutable collection.\n\n\nDocumentation\n-------------\n\n[Read the docs](http://facebook.github.io/immutable-js/docs/) and eat your vegetables.\n\nDocs are automatically generated from [Immutable.d.ts](https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts).\nPlease contribute!\n\nAlso, don't miss the [Wiki](https://github.com/facebook/immutable-js/wiki) which\ncontains articles on specific topics. Can't find something? Open an [issue](https://github.com/facebook/immutable-js/issues).\n\n\nTesting\n-------\n\nIf you are using the [Chai Assertion Library](http://chaijs.com/), [Chai Immutable](https://github.com/astorije/chai-immutable) provides a set of assertions to use against `Immutable` collections.\n\n\nContribution\n------------\n\nUse [Github issues](https://github.com/facebook/immutable-js/issues) for requests.\n\nWe actively welcome pull requests, learn how to [contribute](./CONTRIBUTING.md).\n\n\nChangelog\n---------\n\nChanges are tracked as [Github releases](https://github.com/facebook/immutable-js/releases).\n\n\nThanks\n------\n\n[Phil Bagwell](https://www.youtube.com/watch?v=K2NYwP90bNs), for his inspiration\nand research in persistent data structures.\n\n[Hugh Jackson](https://github.com/hughfdjackson/), for providing the npm package\nname. If you're looking for his unsupported package, see [this repository](https://github.com/hughfdjackson/immutable).\n\n\nLicense\n-------\n\n`Immutable` is [BSD-licensed](https://github.com/facebook/immutable-js/blob/master/LICENSE). We also provide an additional [patent grant](https://github.com/facebook/immutable-js/blob/master/PATENTS).","slug":"Immutable collections for JavaScript copy","published":1,"updated":"2017-06-04T07:19:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5fl70004qrezpsnamv4b","content":"<h1 id=\"Immutable-collections-for-JavaScript\"><a href=\"#Immutable-collections-for-JavaScript\" class=\"headerlink\" title=\"Immutable collections for JavaScript\"></a>Immutable collections for JavaScript</h1><p><a href=\"https://travis-ci.org/facebook/immutable-js\" target=\"_blank\" rel=\"external\"><img src=\"https://travis-ci.org/facebook/immutable-js.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><a href=\"http://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"external\">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href=\"http://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" rel=\"external\">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>\n<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>\n<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href=\"http://en.wikipedia.org/wiki/Hash_array_mapped_trie\" target=\"_blank\" rel=\"external\">hash maps tries</a> and <a href=\"http://hypirion.com/musings/understanding-persistent-vector-pt-1\" target=\"_blank\" rel=\"external\">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>\n<p><code>Immutable</code> also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>\n<p>Want to hear more? Watch the presentation about Immutable.js:</p>\n<p><a href=\"https://youtu.be/I7IdS-PbEgI\" target=\"_blank\" alt=\"Immutable Data and React\"><img src=\"https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg\"></a></p>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install immutable</div></pre></td></tr></table></figure>\n<p>Then require it into any module.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Immutable = <span class=\"built_in\">require</span>(<span class=\"string\">'immutable'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<h3 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h3><p>To use <code>immutable</code> from a browser, download <a href=\"https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js\" target=\"_blank\" rel=\"external\">dist/immutable.min.js</a><br>or use a CDN such as <a href=\"https://cdnjs.com/libraries/immutable\" target=\"_blank\" rel=\"external\">CDNJS</a><br>or <a href=\"http://www.jsdelivr.com/#!immutable.js\" target=\"_blank\" rel=\"external\">jsDelivr</a>.</p>\n<p>Then, add it as a script tag to your page:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"immutable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;a:<span class=\"number\">1</span>, b:<span class=\"number\">2</span>, c:<span class=\"number\">3</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">    map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Or use an AMD loader (such as <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">RequireJS</a>):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./immutable.min.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Immutable</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">    map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>If you’re using <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a>, the <code>immutable</code> npm module<br>also works from the browser.</p>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href=\"http://typescriptlang.org\" target=\"_blank\" rel=\"external\">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>\n<p>Just add a reference with a relative path to the type declarations at the top<br>of your file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class=\"line\"><span class=\"keyword\">import</span> Immutable = <span class=\"built_in\">require</span>(<span class=\"string\">'immutable'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class=\"line\">map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<h2 id=\"The-case-for-Immutability\"><a href=\"#The-case-for-Immutability\" class=\"headerlink\" title=\"The case for Immutability\"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>\n<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>\n<p>This model of data flow aligns well with the architecture of <a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a><br>and especially well with an application designed using the ideas of <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\" rel=\"external\">Flux</a>.</p>\n<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>\n<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">assert(map1.equals(map2) === <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map3 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">assert(map1.equals(map3) === <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>Note: As a performance optimization <code>Immutable</code> attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>\n<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> clone = map1;</div></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-first-API\"><a href=\"#JavaScript-first-API\" class=\"headerlink\" title=\"JavaScript-first API\"></a>JavaScript-first API</h2><p>While <code>immutable</code> is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"external\">ES6</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">Array</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a>.</p>\n<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list1 = Immutable.List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list2 = list1.push(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list3 = list2.unshift(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list4 = list1.concat(list2, list3);</div><div class=\"line\">assert(list1.size === <span class=\"number\">2</span>);</div><div class=\"line\">assert(list2.size === <span class=\"number\">5</span>);</div><div class=\"line\">assert(list3.size === <span class=\"number\">6</span>);</div><div class=\"line\">assert(list4.size === <span class=\"number\">13</span>);</div><div class=\"line\">assert(list4.get(<span class=\"number\">0</span>) === <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>Almost all of the methods on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> found on <code>Immutable.Map</code>, and those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> alpha = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;);</div><div class=\"line\">alpha.map(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class=\"line\"><span class=\"comment\">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accepts-raw-JavaScript-objects\"><a href=\"#Accepts-raw-JavaScript-objects\" class=\"headerlink\" title=\"Accepts raw JavaScript objects.\"></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, <code>immutable</code><br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Iterable</code> with no performance penalty.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = Immutable.Map(&#123;<span class=\"attr\">c</span>:<span class=\"number\">10</span>, <span class=\"attr\">a</span>:<span class=\"number\">20</span>, <span class=\"attr\">t</span>:<span class=\"number\">30</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">d</span>:<span class=\"number\">100</span>, <span class=\"attr\">o</span>:<span class=\"number\">200</span>, <span class=\"attr\">g</span>:<span class=\"number\">300</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> map3 = map1.merge(map2, obj);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>\n<p>This is possible because <code>immutable</code> can treat any JavaScript Array or Object<br>as an Iterable. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>,<span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\">Immutable.Seq(myObject).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x).toObject();</div><div class=\"line\"><span class=\"comment\">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>\n<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// [ \"1\" ]</span></div><div class=\"line\">obj[<span class=\"string\">\"1\"</span>]; <span class=\"comment\">// \"one\"</span></div><div class=\"line\">obj[<span class=\"number\">1</span>];   <span class=\"comment\">// \"one\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> map = Immutable.fromJS(obj);</div><div class=\"line\">map.get(<span class=\"string\">\"1\"</span>); <span class=\"comment\">// \"one\"</span></div><div class=\"line\">map.get(<span class=\"number\">1</span>);   <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>\n<h3 id=\"Converts-back-to-raw-JavaScript-objects\"><a href=\"#Converts-back-to-raw-JavaScript-objects\" class=\"headerlink\" title=\"Converts back to raw JavaScript objects.\"></a>Converts back to raw JavaScript objects.</h3><p>All <code>immutable</code> Iterables can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Iterables also implement <code>toJSON()</code> allowing them to be passed to<br><code>JSON.stringify</code> directly.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deep = Immutable.Map(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: Immutable.List.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) &#125;);</div><div class=\"line\">deep.toObject() <span class=\"comment\">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class=\"line\">deep.toArray() <span class=\"comment\">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class=\"line\">deep.toJS() <span class=\"comment\">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(deep) <span class=\"comment\">// '&#123;\"a\":1,\"b\":2,\"c\":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Embraces-ES6\"><a href=\"#Embraces-ES6\" class=\"headerlink\" title=\"Embraces ES6\"></a>Embraces ES6</h3><p><code>Immutable</code> takes advantage of features added to JavaScript in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"external\">ES6</a>,<br>the latest standard version of ECMAScript (JavaScript), including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\" target=\"_blank\" rel=\"external\">Iterators</a>,<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">Arrow Functions</a>, <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\" target=\"_blank\" rel=\"external\">Classes</a>, and <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\" target=\"_blank\" rel=\"external\">Modules</a>. It’s also inspired by the<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a> collections added to ES6. The library is “transpiled” to ES3<br>in order to support all modern browsers.</p>\n<p>All examples are presented in ES6. To run in all browsers, they need to be<br>translated to ES3.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">foo.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"><span class=\"comment\">// ES3</span></div><div class=\"line\">foo.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Nested-Structures\"><a href=\"#Nested-Structures\" class=\"headerlink\" title=\"Nested Structures\"></a>Nested Structures</h2><p>The collections in <code>immutable</code> are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nested = Immutable.fromJS(&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:&#123;<span class=\"attr\">c</span>:[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]&#125;&#125;&#125;);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>\n<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nested2 = nested.mergeDeep(&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:&#123;<span class=\"attr\">d</span>:<span class=\"number\">6</span>&#125;&#125;&#125;);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class=\"line\"></div><div class=\"line\">nested2.getIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>]); <span class=\"comment\">// 6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> nested3 = nested2.updateIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>], value =&gt; value + <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> nested4 = nested3.updateIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], list =&gt; list.push(<span class=\"number\">6</span>));</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Lazy-Seq\"><a href=\"#Lazy-Seq\" class=\"headerlink\" title=\"Lazy Seq\"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>\n<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>\n<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>\n<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>\n<pre><code>var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n  .filter(x =&gt; x % 2).map(x =&gt; x * x);\n</code></pre><p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>\n<pre><code>console.log(oddSquares.get(1)); // 9\n</code></pre><p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>\n<pre><code>var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n</code></pre><p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>\n<pre><code>seq.flip().map(key =&gt; key.toUpperCase()).flip().toObject();\n// { A: 1, B: 1, C: 1 }\n</code></pre><p>As well as expressing logic that would otherwise seem memory-limited:</p>\n<pre><code>Immutable.Range(1, Infinity)\n  .skip(1000)\n  .map(n =&gt; -n)\n  .filter(n =&gt; n % 2 === 0)\n  .take(2)\n  .reduce((r, n) =&gt; r * n, 1);\n// 1006008\n</code></pre><p>Note: An iterable is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>\n<h2 id=\"Equality-treats-Collections-as-Data\"><a href=\"#Equality-treats-Collections-as-Data\" class=\"headerlink\" title=\"Equality treats Collections as Data\"></a>Equality treats Collections as Data</h2><p><code>Immutable</code> provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">1</span>, <span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">1</span>, <span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">assert(map1 !== map2); <span class=\"comment\">// two different instances</span></div><div class=\"line\">assert(Immutable.is(map1, map2)); <span class=\"comment\">// have equivalent values</span></div><div class=\"line\">assert(map1.equals(map2)); <span class=\"comment\">// alternatively use the equals method</span></div></pre></td></tr></table></figure>\n<p><code>Immutable.is()</code> uses the same measure of equality as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"external\">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>\n<h2 id=\"Batching-Mutations\"><a href=\"#Batching-Mutations\" class=\"headerlink\" title=\"Batching Mutations\"></a>Batching Mutations</h2><blockquote>\n<p>If a tree falls in the woods, does it make a sound?</p>\n<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>\n<p>— Rich Hickey, Clojure</p>\n</blockquote>\n<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, <code>Immutable</code> gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  <code>Immutable</code> applies complex mutations itself.</p>\n<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list1 = Immutable.List.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list2 = list1.withMutations(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list</span>) </span>&#123;</div><div class=\"line\">  list.push(<span class=\"number\">4</span>).push(<span class=\"number\">5</span>).push(<span class=\"number\">6</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">assert(list1.size === <span class=\"number\">3</span>);</div><div class=\"line\">assert(list2.size === <span class=\"number\">6</span>);</div></pre></td></tr></table></figure>\n<p>Note: <code>immutable</code> also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>\n<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>\n<h2 id=\"Documentation\"><a href=\"#Documentation\" class=\"headerlink\" title=\"Documentation\"></a>Documentation</h2><p><a href=\"http://facebook.github.io/immutable-js/docs/\" target=\"_blank\" rel=\"external\">Read the docs</a> and eat your vegetables.</p>\n<p>Docs are automatically generated from <a href=\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\" target=\"_blank\" rel=\"external\">Immutable.d.ts</a>.<br>Please contribute!</p>\n<p>Also, don’t miss the <a href=\"https://github.com/facebook/immutable-js/wiki\" target=\"_blank\" rel=\"external\">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href=\"https://github.com/facebook/immutable-js/issues\" target=\"_blank\" rel=\"external\">issue</a>.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>If you are using the <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai Assertion Library</a>, <a href=\"https://github.com/astorije/chai-immutable\" target=\"_blank\" rel=\"external\">Chai Immutable</a> provides a set of assertions to use against <code>Immutable</code> collections.</p>\n<h2 id=\"Contribution\"><a href=\"#Contribution\" class=\"headerlink\" title=\"Contribution\"></a>Contribution</h2><p>Use <a href=\"https://github.com/facebook/immutable-js/issues\" target=\"_blank\" rel=\"external\">Github issues</a> for requests.</p>\n<p>We actively welcome pull requests, learn how to <a href=\"./CONTRIBUTING.md\">contribute</a>.</p>\n<h2 id=\"Changelog\"><a href=\"#Changelog\" class=\"headerlink\" title=\"Changelog\"></a>Changelog</h2><p>Changes are tracked as <a href=\"https://github.com/facebook/immutable-js/releases\" target=\"_blank\" rel=\"external\">Github releases</a>.</p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p><a href=\"https://www.youtube.com/watch?v=K2NYwP90bNs\" target=\"_blank\" rel=\"external\">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>\n<p><a href=\"https://github.com/hughfdjackson/\" target=\"_blank\" rel=\"external\">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href=\"https://github.com/hughfdjackson/immutable\" target=\"_blank\" rel=\"external\">this repository</a>.</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p><code>Immutable</code> is <a href=\"https://github.com/facebook/immutable-js/blob/master/LICENSE\" target=\"_blank\" rel=\"external\">BSD-licensed</a>. We also provide an additional <a href=\"https://github.com/facebook/immutable-js/blob/master/PATENTS\" target=\"_blank\" rel=\"external\">patent grant</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Immutable-collections-for-JavaScript\"><a href=\"#Immutable-collections-for-JavaScript\" class=\"headerlink\" title=\"Immutable collections for JavaScript\"></a>Immutable collections for JavaScript</h1><p><a href=\"https://travis-ci.org/facebook/immutable-js\" target=\"_blank\" rel=\"external\"><img src=\"https://travis-ci.org/facebook/immutable-js.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p><a href=\"http://en.wikipedia.org/wiki/Immutable_object\" target=\"_blank\" rel=\"external\">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href=\"http://en.wikipedia.org/wiki/Persistent_data_structure\" target=\"_blank\" rel=\"external\">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>\n<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>\n<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href=\"http://en.wikipedia.org/wiki/Hash_array_mapped_trie\" target=\"_blank\" rel=\"external\">hash maps tries</a> and <a href=\"http://hypirion.com/musings/understanding-persistent-vector-pt-1\" target=\"_blank\" rel=\"external\">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>\n<p><code>Immutable</code> also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>\n<p>Want to hear more? Watch the presentation about Immutable.js:</p>\n<p><a href=\"https://youtu.be/I7IdS-PbEgI\" target=\"_blank\" alt=\"Immutable Data and React\"><img src=\"https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg\"></a></p>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install immutable</div></pre></td></tr></table></figure>\n<p>Then require it into any module.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Immutable = <span class=\"built_in\">require</span>(<span class=\"string\">'immutable'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<h3 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h3><p>To use <code>immutable</code> from a browser, download <a href=\"https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js\" target=\"_blank\" rel=\"external\">dist/immutable.min.js</a><br>or use a CDN such as <a href=\"https://cdnjs.com/libraries/immutable\" target=\"_blank\" rel=\"external\">CDNJS</a><br>or <a href=\"http://www.jsdelivr.com/#!immutable.js\" target=\"_blank\" rel=\"external\">jsDelivr</a>.</p>\n<p>Then, add it as a script tag to your page:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"immutable.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;a:<span class=\"number\">1</span>, b:<span class=\"number\">2</span>, c:<span class=\"number\">3</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">    map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Or use an AMD loader (such as <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"external\">RequireJS</a>):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./immutable.min.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Immutable</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\">    <span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">    map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">    map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>If you’re using <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a>, the <code>immutable</code> npm module<br>also works from the browser.</p>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href=\"http://typescriptlang.org\" target=\"_blank\" rel=\"external\">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>\n<p>Just add a reference with a relative path to the type declarations at the top<br>of your file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class=\"line\"><span class=\"keyword\">import</span> Immutable = <span class=\"built_in\">require</span>(<span class=\"string\">'immutable'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class=\"line\">map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">map1.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 2</span></div><div class=\"line\">map2.get(<span class=\"string\">'b'</span>); <span class=\"comment\">// 50</span></div></pre></td></tr></table></figure>\n<h2 id=\"The-case-for-Immutability\"><a href=\"#The-case-for-Immutability\" class=\"headerlink\" title=\"The case for Immutability\"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>\n<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>\n<p>This model of data flow aligns well with the architecture of <a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a><br>and especially well with an application designed using the ideas of <a href=\"http://facebook.github.io/flux/docs/overview.html\" target=\"_blank\" rel=\"external\">Flux</a>.</p>\n<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>\n<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">assert(map1.equals(map2) === <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> map3 = map1.set(<span class=\"string\">'b'</span>, <span class=\"number\">50</span>);</div><div class=\"line\">assert(map1.equals(map3) === <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>Note: As a performance optimization <code>Immutable</code> attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>\n<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> clone = map1;</div></pre></td></tr></table></figure>\n<h2 id=\"JavaScript-first-API\"><a href=\"#JavaScript-first-API\" class=\"headerlink\" title=\"JavaScript-first API\"></a>JavaScript-first API</h2><p>While <code>immutable</code> is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"external\">ES6</a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">Array</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a>.</p>\n<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list1 = Immutable.List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list2 = list1.push(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list3 = list2.unshift(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list4 = list1.concat(list2, list3);</div><div class=\"line\">assert(list1.size === <span class=\"number\">2</span>);</div><div class=\"line\">assert(list2.size === <span class=\"number\">5</span>);</div><div class=\"line\">assert(list3.size === <span class=\"number\">6</span>);</div><div class=\"line\">assert(list4.size === <span class=\"number\">13</span>);</div><div class=\"line\">assert(list4.get(<span class=\"number\">0</span>) === <span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>Almost all of the methods on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> found on <code>Immutable.Map</code>, and those of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> alpha = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;);</div><div class=\"line\">alpha.map(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class=\"line\"><span class=\"comment\">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Accepts-raw-JavaScript-objects\"><a href=\"#Accepts-raw-JavaScript-objects\" class=\"headerlink\" title=\"Accepts raw JavaScript objects.\"></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, <code>immutable</code><br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Iterable</code> with no performance penalty.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = Immutable.Map(&#123;<span class=\"attr\">c</span>:<span class=\"number\">10</span>, <span class=\"attr\">a</span>:<span class=\"number\">20</span>, <span class=\"attr\">t</span>:<span class=\"number\">30</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">d</span>:<span class=\"number\">100</span>, <span class=\"attr\">o</span>:<span class=\"number\">200</span>, <span class=\"attr\">g</span>:<span class=\"number\">300</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> map3 = map1.merge(map2, obj);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>\n<p>This is possible because <code>immutable</code> can treat any JavaScript Array or Object<br>as an Iterable. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>,<span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;;</div><div class=\"line\">Immutable.Seq(myObject).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x).toObject();</div><div class=\"line\"><span class=\"comment\">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>\n<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// [ \"1\" ]</span></div><div class=\"line\">obj[<span class=\"string\">\"1\"</span>]; <span class=\"comment\">// \"one\"</span></div><div class=\"line\">obj[<span class=\"number\">1</span>];   <span class=\"comment\">// \"one\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> map = Immutable.fromJS(obj);</div><div class=\"line\">map.get(<span class=\"string\">\"1\"</span>); <span class=\"comment\">// \"one\"</span></div><div class=\"line\">map.get(<span class=\"number\">1</span>);   <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>\n<h3 id=\"Converts-back-to-raw-JavaScript-objects\"><a href=\"#Converts-back-to-raw-JavaScript-objects\" class=\"headerlink\" title=\"Converts back to raw JavaScript objects.\"></a>Converts back to raw JavaScript objects.</h3><p>All <code>immutable</code> Iterables can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Iterables also implement <code>toJSON()</code> allowing them to be passed to<br><code>JSON.stringify</code> directly.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deep = Immutable.Map(&#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: Immutable.List.of(<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) &#125;);</div><div class=\"line\">deep.toObject() <span class=\"comment\">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class=\"line\">deep.toArray() <span class=\"comment\">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class=\"line\">deep.toJS() <span class=\"comment\">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(deep) <span class=\"comment\">// '&#123;\"a\":1,\"b\":2,\"c\":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>\n<h3 id=\"Embraces-ES6\"><a href=\"#Embraces-ES6\" class=\"headerlink\" title=\"Embraces ES6\"></a>Embraces ES6</h3><p><code>Immutable</code> takes advantage of features added to JavaScript in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"external\">ES6</a>,<br>the latest standard version of ECMAScript (JavaScript), including <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\" target=\"_blank\" rel=\"external\">Iterators</a>,<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"external\">Arrow Functions</a>, <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes\" target=\"_blank\" rel=\"external\">Classes</a>, and <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\" target=\"_blank\" rel=\"external\">Modules</a>. It’s also inspired by the<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" target=\"_blank\" rel=\"external\">Map</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"external\">Set</a> collections added to ES6. The library is “transpiled” to ES3<br>in order to support all modern browsers.</p>\n<p>All examples are presented in ES6. To run in all browsers, they need to be<br>translated to ES3.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">foo.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"><span class=\"comment\">// ES3</span></div><div class=\"line\">foo.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Nested-Structures\"><a href=\"#Nested-Structures\" class=\"headerlink\" title=\"Nested Structures\"></a>Nested Structures</h2><p>The collections in <code>immutable</code> are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nested = Immutable.fromJS(&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:&#123;<span class=\"attr\">c</span>:[<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]&#125;&#125;&#125;);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>\n<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nested2 = nested.mergeDeep(&#123;<span class=\"attr\">a</span>:&#123;<span class=\"attr\">b</span>:&#123;<span class=\"attr\">d</span>:<span class=\"number\">6</span>&#125;&#125;&#125;);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class=\"line\"></div><div class=\"line\">nested2.getIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>]); <span class=\"comment\">// 6</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> nested3 = nested2.updateIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'d'</span>], value =&gt; value + <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> nested4 = nested3.updateIn([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>], list =&gt; list.push(<span class=\"number\">6</span>));</div><div class=\"line\"><span class=\"comment\">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Lazy-Seq\"><a href=\"#Lazy-Seq\" class=\"headerlink\" title=\"Lazy Seq\"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>\n<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>\n<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>\n<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>\n<pre><code>var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)\n  .filter(x =&gt; x % 2).map(x =&gt; x * x);\n</code></pre><p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>\n<pre><code>console.log(oddSquares.get(1)); // 9\n</code></pre><p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>\n<pre><code>var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();\n</code></pre><p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>\n<pre><code>seq.flip().map(key =&gt; key.toUpperCase()).flip().toObject();\n// { A: 1, B: 1, C: 1 }\n</code></pre><p>As well as expressing logic that would otherwise seem memory-limited:</p>\n<pre><code>Immutable.Range(1, Infinity)\n  .skip(1000)\n  .map(n =&gt; -n)\n  .filter(n =&gt; n % 2 === 0)\n  .take(2)\n  .reduce((r, n) =&gt; r * n, 1);\n// 1006008\n</code></pre><p>Note: An iterable is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>\n<h2 id=\"Equality-treats-Collections-as-Data\"><a href=\"#Equality-treats-Collections-as-Data\" class=\"headerlink\" title=\"Equality treats Collections as Data\"></a>Equality treats Collections as Data</h2><p><code>Immutable</code> provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map1 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">1</span>, <span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> map2 = Immutable.Map(&#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">1</span>, <span class=\"attr\">c</span>:<span class=\"number\">1</span>&#125;);</div><div class=\"line\">assert(map1 !== map2); <span class=\"comment\">// two different instances</span></div><div class=\"line\">assert(Immutable.is(map1, map2)); <span class=\"comment\">// have equivalent values</span></div><div class=\"line\">assert(map1.equals(map2)); <span class=\"comment\">// alternatively use the equals method</span></div></pre></td></tr></table></figure>\n<p><code>Immutable.is()</code> uses the same measure of equality as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"external\">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>\n<h2 id=\"Batching-Mutations\"><a href=\"#Batching-Mutations\" class=\"headerlink\" title=\"Batching Mutations\"></a>Batching Mutations</h2><blockquote>\n<p>If a tree falls in the woods, does it make a sound?</p>\n<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>\n<p>— Rich Hickey, Clojure</p>\n</blockquote>\n<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, <code>Immutable</code> gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  <code>Immutable</code> applies complex mutations itself.</p>\n<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> list1 = Immutable.List.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> list2 = list1.withMutations(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list</span>) </span>&#123;</div><div class=\"line\">  list.push(<span class=\"number\">4</span>).push(<span class=\"number\">5</span>).push(<span class=\"number\">6</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">assert(list1.size === <span class=\"number\">3</span>);</div><div class=\"line\">assert(list2.size === <span class=\"number\">6</span>);</div></pre></td></tr></table></figure>\n<p>Note: <code>immutable</code> also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>\n<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>\n<h2 id=\"Documentation\"><a href=\"#Documentation\" class=\"headerlink\" title=\"Documentation\"></a>Documentation</h2><p><a href=\"http://facebook.github.io/immutable-js/docs/\" target=\"_blank\" rel=\"external\">Read the docs</a> and eat your vegetables.</p>\n<p>Docs are automatically generated from <a href=\"https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts\" target=\"_blank\" rel=\"external\">Immutable.d.ts</a>.<br>Please contribute!</p>\n<p>Also, don’t miss the <a href=\"https://github.com/facebook/immutable-js/wiki\" target=\"_blank\" rel=\"external\">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href=\"https://github.com/facebook/immutable-js/issues\" target=\"_blank\" rel=\"external\">issue</a>.</p>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>If you are using the <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai Assertion Library</a>, <a href=\"https://github.com/astorije/chai-immutable\" target=\"_blank\" rel=\"external\">Chai Immutable</a> provides a set of assertions to use against <code>Immutable</code> collections.</p>\n<h2 id=\"Contribution\"><a href=\"#Contribution\" class=\"headerlink\" title=\"Contribution\"></a>Contribution</h2><p>Use <a href=\"https://github.com/facebook/immutable-js/issues\" target=\"_blank\" rel=\"external\">Github issues</a> for requests.</p>\n<p>We actively welcome pull requests, learn how to <a href=\"./CONTRIBUTING.md\">contribute</a>.</p>\n<h2 id=\"Changelog\"><a href=\"#Changelog\" class=\"headerlink\" title=\"Changelog\"></a>Changelog</h2><p>Changes are tracked as <a href=\"https://github.com/facebook/immutable-js/releases\" target=\"_blank\" rel=\"external\">Github releases</a>.</p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p><a href=\"https://www.youtube.com/watch?v=K2NYwP90bNs\" target=\"_blank\" rel=\"external\">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>\n<p><a href=\"https://github.com/hughfdjackson/\" target=\"_blank\" rel=\"external\">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href=\"https://github.com/hughfdjackson/immutable\" target=\"_blank\" rel=\"external\">this repository</a>.</p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><p><code>Immutable</code> is <a href=\"https://github.com/facebook/immutable-js/blob/master/LICENSE\" target=\"_blank\" rel=\"external\">BSD-licensed</a>. We also provide an additional <a href=\"https://github.com/facebook/immutable-js/blob/master/PATENTS\" target=\"_blank\" rel=\"external\">patent grant</a>.</p>\n"},{"title":"redux-logic","date":"2017-03-07T16:04:10.000Z","_content":"# redux-logic\n\n> \"One place for all your business logic and action side effects\"\n\nRedux middleware that can:\n\n - **intercept** (validate/transform/augment) actions AND\n - **perform async processing** (fetching, I/O, side effects)\n\n[![Build Status](https://secure.travis-ci.org/jeffbski/redux-logic.png?branch=master)](http://travis-ci.org/jeffbski/redux-logic) [![Codacy Grade Badge](https://img.shields.io/codacy/grade/3687e7267e6d466b9d226c22b24f0061.svg)](https://www.codacy.com/app/jeff-barczewski/redux-logic) [![Codacy Coverage Badge](https://img.shields.io/codacy/coverage/3687e7267e6d466b9d226c22b24f0061.svg)](https://www.codacy.com/app/jeff-barczewski/redux-logic) [![Known Vulnerabilities](https://snyk.io/test/github/jeffbski/redux-logic/badge.svg)](https://snyk.io/test/github/jeffbski/redux-logic) [![NPM Version Badge](https://img.shields.io/npm/v/redux-logic.svg)](https://www.npmjs.com/package/redux-logic)\n\n## tl;dr\n\nWith redux-logic, you have the **freedom** to write your logic in **your favorite JS style**:\n\n - plain **callback** code - `dispatch(resultAction)`\n - **promises** - `return axios.get(url).then(...)`\n - **async/await** - `result = await fetch(url)`\n - **observables** - `ob$.next(action1)`\n\n> Use the type of code you and your team are comfortable and experienced with.\n\nLeverage powerful **declarative** features by simply setting properties:\n\n - **filtering** for action type(s) or with regular expression(s)\n - **cancellation** on receiving action type(s)\n - use only response for the **latest** request\n - **debouncing**\n - **throttling**\n - dispatch actions - auto **decoration** of payloads\n\nTesting your logic is straight forward and simple.\n\nWith simple code your logic can:\n\n - **intercept** actions before they hit the reducer\n   - **validate**, verify, auth check actions and allow/reject or modify actions\n   - **transform** - augment/enhance/modify actions\n - **process** - **async processing** and dispatching, orchestration, I/O (ajax, REST, subscriptions, GraphQL, web sockets, ...)\n\nRedux-logic makes it easy to use code that is split into bundles, so you can dynamically load logic right along with your split UI.\n\nServer rendering is simplified with redux-logic since it lets you know when all your async fetching is complete without manual tracking.\n\nInspired by redux-observable epics, redux-saga, and custom redux middleware, redux-logic combines ideas of each into a simple easy to use API.\n\n\n## Quick Example\n\nThis is an example of logic which will listen for actions of type FETCH_POLLS and it will perform ajax request to fetch data for which it dispatches the results (or error) on completion. It supports cancellation by allowing anything to send an action of type CANCEL_FETCH_POLLS. It also uses `take latest` feature that if additional FETCH_POLLS actions come in before this completes, it will ignore the outdated requests.\n\nThe developer can just declare the type filtering, cancellation, and take latest behavior, no code needs to be written for that. That leaves the developer to focus on the real business requirements which are invoked in the process hook.\n\n```js\nconst fetchPollsLogic = createLogic({\n\n  // declarative built-in functionality wraps your code\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n\n  // your code here, hook into one or more of these execution\n  // phases: validate, transform, and/or process\n  process({ getState, action }, dispatch, done) {\n    axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls)\n      .then(polls => dispatch({ type: FETCH_POLLS_SUCCESS,\n                                payload: polls }))\n      .catch(err => {\n             console.error(err); // log since could be render err\n             dispatch({ type: FETCH_POLLS_FAILED, payload: err,\n                        error: true })\n      })\n      .then(() => done()); // call done when finished dispatching\n  }\n});\n```\n\nSince redux-logic gives you the freedom to use your favorite style of JS code (callbacks, promises, async/await, observables), it supports many features to make that easier, [explained in more detail](/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature).\n\n\n## Table of contents\n\n - <a href=\"#goals\">Goals</a>\n - <a href=\"#usage\">Usage</a>\n - <a href=\"./docs/api.md\">Full API</a>\n - <a href=\"#examples\">Examples</a> - [JSFiddle](#jsfiddle-live-examples) and [full examples](#full-examples)\n - <a href=\"#comparison-summaries\">Comparison summaries</a> to <a href=\"#compared-to-fat-action-creators\">fat action creators</a>, <a href=\"#compared-to-redux-thunk\">thunks</a>, <a href=\"#compared-to-redux-observable\">redux-observable</a>, <a href=\"#compared-to-redux-saga\">redux-saga</a>, <a href=\"#compared-to-custom-redux-middleware\">custom middleware</a>\n - <a href=\"#implementing-sampal-pattern\">SAM/PAL pattern</a>\n - <a href=\"#other\">Other</a> - todo, inspiration, license\n\n## Goals\n\n - organize business logic keeping action creators and reducers clean\n   - action creators are light and just post action objects\n   - reducers just focus on updating state\n   - intercept and perform validations, verifications, authentication\n   - intercept and transform actions\n   - perform async processing, orchestration, dispatch actions\n - wrap your core business logic code with declarative behavior\n   - filtered - apply to one or many action types or even all actions\n   - cancellable - async work can be cancelled\n   - limiting (like taking only the latest, throttling, and debouncing)\n - features to support business logic and large apps\n   - have access to full state to make decisions\n   - easily composable to support large applications\n   - inject dependencies into your logic, so you have everything needed in your logic code\n   - dynamic loading of logic for splitting bundles in your app\n   - your core logic code stays focussed and simple, don't use generators or observables unless you want to.\n   - create subscriptions - streaming updates\n   - easy testing - since your code is just a function it's easy to isolate and test\n\n\n## Usage\n\n```bash\nnpm install rxjs --save\nnpm install redux-logic --save\n```\n\n```js\n// in configureStore.js\nimport { createLogic, createLogicMiddleware } from 'redux-logic';\nimport rootReducer from './rootReducer';\nimport arrLogic from './logic';\n\nconst deps = { // optional injected dependencies for logic\n  // anything you need to have available in your logic\n  A_SECRET_KEY: 'dsfjsdkfjsdlfjls',\n  firebase: firebaseInstance\n};\n\nconst logicMiddleware = createLogicMiddleware(arrLogic, deps);\n\nconst middleware = applyMiddleware(\n  logicMiddleware\n);\n\nconst enhancer = middleware; // could compose in dev tools too\n\nexport default function configureStore() {\n  const store = createStore(rootReducer, enhancer);\n  return store;\n}\n\n\n// in logic.js - combines logic from across many files, just\n// a simple array of logic to be used for this app\nexport default [\n ...todoLogic,\n ...pollsLogic\n];\n\n\n// in polls/logic.js\n\nconst validationLogic = createLogic({\n  type: ADD_USER,\n  validate({ getState, action }, allow, reject) {\n    const user = action.payload;\n    if (!getState().users[user.id]) { // can also hit server to check\n      allow(action);\n    } else {\n      reject({ type: USER_EXISTS_ERROR, payload: user, error: true })\n    }\n  }\n});\n\nconst addUniqueId = createLogic({\n  type: '*',\n  transform({ getState, action }, next) {\n    // add unique tid to action.meta of every action\n    const existingMeta = action.meta || {};\n    const meta = {\n      ...existingMeta,\n      tid: shortid.generate()\n    },\n    next({\n      ...action,\n      meta\n    });\n  }\n});\n\nconst fetchPollsLogic = createLogic({\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n  process({ getState, action }, dispatch, done) {\n    axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls)\n      .then(polls => dispatch({ type: FETCH_POLLS_SUCCESS,\n                                payload: polls }))\n      .catch(err => {\n             console.error(err); // log since could be render err\n             dispatch({ type: FETCH_POLLS_FAILED, payload: err,\n                        error: true })\n      })\n      .then(() => done());\n  }\n});\n\n// pollsLogic\nexport default [\n  validationLogic,\n  addUniqueId,\n  fetchPollsLogic\n];\n\n```\n\n### processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code\n\n`processOptions` has these new properties which affect the process hook behavior:\n\n - `dispatchReturn` - the returned value of the process function will be dispatched or if it is a promise or observable then the resolve, reject, or observable values will be dispatched applying any successType or failType logic if defined. Default is determined by arity of process fn, `true` if dispatch not provided, `false` otherwise. [Details](https://github.com/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature)\n\n - `successType` - dispatch this action type using contents of dispatch as the payload (also would work with with promise or observable). You may alternatively provide an action creator function to use instead and it will receive the value as only parameter. Default: `undefined`.\n   - if successType is a string action type\n     - create action using successType and provide value as payload. ex: with `successType:'FOO'`, result would be `{ type: 'FOO', payload: value }`\n\n   - if successType is an action creator fn receiving the value as only parameter\n     - use the return value from the action creator fn for dispatching ex: `successType: x => ({ type: 'FOO', payload: x })`\n     - if the action creator fn returns a falsey value like `undefined` then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on the value provided to it.\n\n - `failType` - dispatch this action type using contents of error as the payload, sets error: true (would also work for rejects of promises or error from observable). You may alternatively provide an action creator function to use instead which will receive the error as the only parameter. Default: `undefined`.\n   - if failType is a string action type\n     - create action using failType, provide value as the payload, and set error to true. ex: with `failType:'BAR'`, result would be `{ type: 'BAR', payload: errorValue, error: true }`\n\n   - if failType is an action creator function receiving the error value as its only parameter\n     - use the return value from the action creator fn for dispatching. ex: `failType: x => ({ type: 'BAR', payload: x, error: true })`\n     - if the action creator fn returns a falsey value like `undefined` then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on teh value provided to it.\n\nThe successType and failType would enable clean code, where you can simply return a promise or observable that resolves to the payload and rejects on error. The resulting code doesn't have to deal with dispatch and actions directly.\n\n```js\nconst fetchPollsLogic = createLogic({\n\n  // declarative built-in functionality wraps your code\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n\n  processOptions: {\n    // optional since the default is true when dispatch is omitted from\n    // the process fn signature\n    dispatchReturn: true, // use returned/resolved value(s) for dispatching\n    // provide action types or action creator functions to be used\n    // with the resolved/rejected values from promise/observable returned\n    successType: FETCH_POLLS_SUCCESS, // dispatch this success act type\n    failType: FETCH_POLLS_FAILED, // dispatch this failed action type\n  },\n\n  // Omitting dispatch from the signature below makes the default for\n  // dispatchReturn true allowing you to simply return obj, promise, obs\n  // not needing to use dispatch directly\n  process({ getState, action }) {\n    return axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls);\n  }\n});\n```\n\nThis is pretty nice leaving us with mainly our business logic code that could be easily extracted and called from here.\n\n\n## Full API\n\nSee the [docs for the full api](./docs/api.md)\n\n## Examples\n\n### JSFiddle live examples\n\n - [search async axios fetch](https://jsfiddle.net/jeffbski/78vpf92k/) - live search using debounce and take latest functionality with axios fetch\n - [search rxjs ajax fetch](https://jsfiddle.net/jeffbski/uLh2add5/) - live search using debounce and take latest functionality with rxjs ajax fetch\n - [search rxjs ajax fetch - using processOptions](https://jsfiddle.net/jeffbski/rLz44jk9/) - live search using debounce and take latest with rxjs ajax fetch using processOptions to streamline the code\n - [async axios fetch - single page](https://jsfiddle.net/jeffbski/954g5n7h/) - displayed using React\n - [async rxjs-ajax fetch](https://jsfiddle.net/jeffbski/0fu407na/) - async fetching using RxJS ajax which supports XHR abort for cancels\n - [async axios fetch - single page redux only](https://jsfiddle.net/jeffbski/yzy8w4ve/) - just the redux and redux-logic code\n - [async axios fetch - using processOptions](https://jsfiddle.net/jeffbski/oL6jmp52/) - using processOptions to streamline your code further with React\n - [async rxjs-ajax fetch - using processOptions](https://jsfiddle.net/jeffbski/d4p6oo0d/) - async fetch using RxJS ajax (supporting XHR abort on cancel) and processOptions for clean code.\n - [async await - react](https://jsfiddle.net/jeffbski/rfc7oz9p/) - using ES7 async functions (async/await) displaying with React\n - [async await - redux only](https://jsfiddle.net/jeffbski/h485f6h5/) - using ES7 async functions (async/await) - just redux and redux-logic code\n - [async await - react processOptions](https://jsfiddle.net/jeffbski/0rodyekn/) - using ES7 async functions (async/await) with processOptions, displayed with React\n\n### Full examples\n\n - [search-async-fetch](./examples/search-async-fetch) - search async fetch example using axios uses debouncing and take latest features\n - [async-fetch-vanilla](./examples/async-fetch-vanilla) - async fetch example using axios\n - [async-rxjs-ajax-fetch](./examples/async-rxjs-ajax-fetch) - async fetch example using RxJS ajax (supporting XHR abort on cancel) and redux-actions\n - [async-fetch-proc-options](./examples/async-fetch-proc-options) - async fetch example using axios and the new processOptions feature\n - [async-rxjs-ajax-proc-options](./examples/async-rxjs-ajax-proc-options) - async RxJS ajax (with XHR abort on cancel) fetch example using axios and the new processOptions feature\n - [async-await - ES7 async functions](./examples/async-await) - async fetch example using axios and ES7 async functions (async/await)\n - [async-await - ES7 async functions with processOptions](./examples/async-await-proc-options) - async fetch example using axios and ES7 async functions (async/await) and using the new processOptions feature\n - [countdown](./examples/countdown) - a countdown timer implemented with setInterval\n - [countdown-obs](./examples/countdown-obs) - a countdown timer implemented with Rx.Observable.interval\n - [form-validation](./examples/form-validation) - form validation and async post to server using axios, displays updated user list\n - [notification](./examples/notification) - notification message example showing at most N messages for X amount of time, rotating queued messages in as others expire\n - [search-single-file](./examples/single-file) - search async fetch example with all code in a single file and displayed with React\n - [single-file-redux](./examples/single-file-redux) - async fetch example with all code in a single file and appended to the container div. Only redux and redux-logic code.\n\n\n## Comparison summaries\n\nFollowing are just short summaries to compare redux-logic to other approaches.\n\nFor a more detailed comparison with examples, see by article in docs, [Where do I put my business logic in a React-Redux application?](./docs/where-business-logic.md).\n\n\n### Compared to fat action creators\n\n - no easy way to cancel or do limiting like take latest with fat action creators\n - action creators would not have access to the full global state so you might have to pass down lots of extra data that isn't needed for rendering. Every time business logic changes might require new data to be made available\n - no global interception using just action creators - applying logic or transformations across all or many actions\n -  Testing components and fat action creators may require running the code (possibly mocked API calls).\n\n### Compared to redux-thunk\n\n - With thunks business logic is spread over action creators\n - With thunks there is not an easy way to cancel async work nor to perform (take latest) limiting\n - no global interception with thunks - applying logic or transformations across all or many actions\n - Testing components and thunked action creators may require running the code (possibly mocked API calls). When you have a thunk (function or promise) you don't know what it does unless you execute it.\n\n\n### Compared to redux-observable\n\n - redux-logic doesn't require the developer to use rxjs observables. It uses observables under the covers to provide cancellation, throttling, etc. You simply configure these parameters to get this functionality. You can still use rxjs in your code if you want, but not a requirement.\n - redux-logic hooks in before the reducer stack like middleware allowing validation, verification, auth, tranformations. Allow, reject, tranform actions before they hit your reducers to update your state as well as accessing state after reducers have run. redux-observable hooks in after the reducers have updated state so they have no opportuntity to prevent the updates.\n\n### Compared to redux-saga\n\n - redux-logic doesn't require you to code with generators\n - redux-saga relies on pulling data (usually in a never ending loop) while redux-logic and logic are reactive, responding to data as it is available\n - redux-saga runs after reducers have been run, redux-logic can intercept and allow/reject/modify before reducers run also as well as after\n\n\n### Compared to custom redux middleware\n\n - Both are fully featured to do any type of business logic (validations, tranformations, processing)\n - redux-logic already has built-in capabilities for some of the hard stuff like cancellation, limiting, dynamic loading of code. With custom middleware you have to implement all functionality.\n - No safety net, if things break it could stop all of your future actions\n - Testing requires some mocking or setup\n\n### Implementing SAM/PAL Pattern\n\nThe [SAM (State-Action-Model) pattern](http://sam.js.org) is a pattern introduced by Jean-Jacques Dubray. Also known as the PAL (proposer, acceptor, learner) pattern based on Paxos terminology.\n\nA few of the challenging parts of implementing this with a React-Redux application are:\n\n 1. where to perform the `accept` (interception) of the proposed action performing validation, verification, authentication against the current model state. Based on the current state, it might be appropriate to modify the action, dispatch a different action, or simply suppress the action.\n 2. how to trigger actions based on the state after the model has finished updating, referred to as the `NAP` (next-action-predicate).\n\nCustom Redux middleware can be introduced to perform this logic, but you'll be implementing most everything on your own.\n\nWith `redux-logic` you can implement the SAM / PAL pattern easily in your React/Redux apps.\n\nNamely you can separate out your business logic from your action creators and reducers keeping them thin. redux-logic provides a nice place to accept, reject, and transform actions before your reducers are run. You have access to the full state to make decisions and you can trigger actions based on the updated state as well.\n\nSolving those SAM challenges previously identified using redux-logic:\n\n 1. perform acceptance in redux-logic `validate` hooks, you have access to the full state (model) of the app to make decisions. You can perform synchronous or asynchronous logic to determine whether to accept the action and you may augment, modify, substitute actions, or suppress as desired.\n 2. Perform NAP processing in redux-logic `process` hooks. The process hook runs after the actions have been sent down to the reducers so you have access to the full model (state) after the updates where you can make decisions and dispatch additional actions based on the updated state.\n\n<a name=\"other\"></a>\n\n## Inspiration\n\nredux-logic was inspired from these projects:\n\n - [redux-observable epics](https://redux-observable.js.org)\n - [redux-saga](http://yelouafi.github.io/redux-saga/)\n - [redux middleware](http://redux.js.org/docs/advanced/Middleware.html)\n\n## Minimized/gzipped size with all deps\n\n(redux-logic only includes the modules of RxJS 5 that it uses)\n```\nredux-logic.min.js.gz 11KB\n```\n\nNote: If you are already including RxJS 5 into your project then the resulting delta will be much smaller.\n\n## TODO\n\n - add typescript support\n - more docs\n - more examples\n - evaulate additional features as outlined above\n\n## Get involved\n\nIf you have input or ideas or would like to get involved, you may:\n\n - contact me via twitter @jeffbski  - <http://twitter.com/jeffbski>\n - open an issue on github to begin a discussion - <https://github.com/jeffbski/redux-logic/issues>\n - fork the repo and send a pull request (ideally with tests) - <https://github.com/jeffbski/redux-logic>\n - See the [contributing guide](http://github.com/jeffbski/redux-logic/raw/master/CONTRIBUTING.md)\n\n## Supporters\n\nThis project is supported by [CodeWinds Training](https://codewinds.com/)\n\n\n<a name=\"license\"/>\n\n## License - MIT\n\n - [MIT license](http://github.com/jeffbski/redux-logic/raw/master/LICENSE.md)","source":"_posts/redux-logic.md","raw":"title: redux-logic\ndate: 2017-03-08 00:04:10\ncategories: Redux\ntags: Redux\n---\n# redux-logic\n\n> \"One place for all your business logic and action side effects\"\n\nRedux middleware that can:\n\n - **intercept** (validate/transform/augment) actions AND\n - **perform async processing** (fetching, I/O, side effects)\n\n[![Build Status](https://secure.travis-ci.org/jeffbski/redux-logic.png?branch=master)](http://travis-ci.org/jeffbski/redux-logic) [![Codacy Grade Badge](https://img.shields.io/codacy/grade/3687e7267e6d466b9d226c22b24f0061.svg)](https://www.codacy.com/app/jeff-barczewski/redux-logic) [![Codacy Coverage Badge](https://img.shields.io/codacy/coverage/3687e7267e6d466b9d226c22b24f0061.svg)](https://www.codacy.com/app/jeff-barczewski/redux-logic) [![Known Vulnerabilities](https://snyk.io/test/github/jeffbski/redux-logic/badge.svg)](https://snyk.io/test/github/jeffbski/redux-logic) [![NPM Version Badge](https://img.shields.io/npm/v/redux-logic.svg)](https://www.npmjs.com/package/redux-logic)\n\n## tl;dr\n\nWith redux-logic, you have the **freedom** to write your logic in **your favorite JS style**:\n\n - plain **callback** code - `dispatch(resultAction)`\n - **promises** - `return axios.get(url).then(...)`\n - **async/await** - `result = await fetch(url)`\n - **observables** - `ob$.next(action1)`\n\n> Use the type of code you and your team are comfortable and experienced with.\n\nLeverage powerful **declarative** features by simply setting properties:\n\n - **filtering** for action type(s) or with regular expression(s)\n - **cancellation** on receiving action type(s)\n - use only response for the **latest** request\n - **debouncing**\n - **throttling**\n - dispatch actions - auto **decoration** of payloads\n\nTesting your logic is straight forward and simple.\n\nWith simple code your logic can:\n\n - **intercept** actions before they hit the reducer\n   - **validate**, verify, auth check actions and allow/reject or modify actions\n   - **transform** - augment/enhance/modify actions\n - **process** - **async processing** and dispatching, orchestration, I/O (ajax, REST, subscriptions, GraphQL, web sockets, ...)\n\nRedux-logic makes it easy to use code that is split into bundles, so you can dynamically load logic right along with your split UI.\n\nServer rendering is simplified with redux-logic since it lets you know when all your async fetching is complete without manual tracking.\n\nInspired by redux-observable epics, redux-saga, and custom redux middleware, redux-logic combines ideas of each into a simple easy to use API.\n\n\n## Quick Example\n\nThis is an example of logic which will listen for actions of type FETCH_POLLS and it will perform ajax request to fetch data for which it dispatches the results (or error) on completion. It supports cancellation by allowing anything to send an action of type CANCEL_FETCH_POLLS. It also uses `take latest` feature that if additional FETCH_POLLS actions come in before this completes, it will ignore the outdated requests.\n\nThe developer can just declare the type filtering, cancellation, and take latest behavior, no code needs to be written for that. That leaves the developer to focus on the real business requirements which are invoked in the process hook.\n\n```js\nconst fetchPollsLogic = createLogic({\n\n  // declarative built-in functionality wraps your code\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n\n  // your code here, hook into one or more of these execution\n  // phases: validate, transform, and/or process\n  process({ getState, action }, dispatch, done) {\n    axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls)\n      .then(polls => dispatch({ type: FETCH_POLLS_SUCCESS,\n                                payload: polls }))\n      .catch(err => {\n             console.error(err); // log since could be render err\n             dispatch({ type: FETCH_POLLS_FAILED, payload: err,\n                        error: true })\n      })\n      .then(() => done()); // call done when finished dispatching\n  }\n});\n```\n\nSince redux-logic gives you the freedom to use your favorite style of JS code (callbacks, promises, async/await, observables), it supports many features to make that easier, [explained in more detail](/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature).\n\n\n## Table of contents\n\n - <a href=\"#goals\">Goals</a>\n - <a href=\"#usage\">Usage</a>\n - <a href=\"./docs/api.md\">Full API</a>\n - <a href=\"#examples\">Examples</a> - [JSFiddle](#jsfiddle-live-examples) and [full examples](#full-examples)\n - <a href=\"#comparison-summaries\">Comparison summaries</a> to <a href=\"#compared-to-fat-action-creators\">fat action creators</a>, <a href=\"#compared-to-redux-thunk\">thunks</a>, <a href=\"#compared-to-redux-observable\">redux-observable</a>, <a href=\"#compared-to-redux-saga\">redux-saga</a>, <a href=\"#compared-to-custom-redux-middleware\">custom middleware</a>\n - <a href=\"#implementing-sampal-pattern\">SAM/PAL pattern</a>\n - <a href=\"#other\">Other</a> - todo, inspiration, license\n\n## Goals\n\n - organize business logic keeping action creators and reducers clean\n   - action creators are light and just post action objects\n   - reducers just focus on updating state\n   - intercept and perform validations, verifications, authentication\n   - intercept and transform actions\n   - perform async processing, orchestration, dispatch actions\n - wrap your core business logic code with declarative behavior\n   - filtered - apply to one or many action types or even all actions\n   - cancellable - async work can be cancelled\n   - limiting (like taking only the latest, throttling, and debouncing)\n - features to support business logic and large apps\n   - have access to full state to make decisions\n   - easily composable to support large applications\n   - inject dependencies into your logic, so you have everything needed in your logic code\n   - dynamic loading of logic for splitting bundles in your app\n   - your core logic code stays focussed and simple, don't use generators or observables unless you want to.\n   - create subscriptions - streaming updates\n   - easy testing - since your code is just a function it's easy to isolate and test\n\n\n## Usage\n\n```bash\nnpm install rxjs --save\nnpm install redux-logic --save\n```\n\n```js\n// in configureStore.js\nimport { createLogic, createLogicMiddleware } from 'redux-logic';\nimport rootReducer from './rootReducer';\nimport arrLogic from './logic';\n\nconst deps = { // optional injected dependencies for logic\n  // anything you need to have available in your logic\n  A_SECRET_KEY: 'dsfjsdkfjsdlfjls',\n  firebase: firebaseInstance\n};\n\nconst logicMiddleware = createLogicMiddleware(arrLogic, deps);\n\nconst middleware = applyMiddleware(\n  logicMiddleware\n);\n\nconst enhancer = middleware; // could compose in dev tools too\n\nexport default function configureStore() {\n  const store = createStore(rootReducer, enhancer);\n  return store;\n}\n\n\n// in logic.js - combines logic from across many files, just\n// a simple array of logic to be used for this app\nexport default [\n ...todoLogic,\n ...pollsLogic\n];\n\n\n// in polls/logic.js\n\nconst validationLogic = createLogic({\n  type: ADD_USER,\n  validate({ getState, action }, allow, reject) {\n    const user = action.payload;\n    if (!getState().users[user.id]) { // can also hit server to check\n      allow(action);\n    } else {\n      reject({ type: USER_EXISTS_ERROR, payload: user, error: true })\n    }\n  }\n});\n\nconst addUniqueId = createLogic({\n  type: '*',\n  transform({ getState, action }, next) {\n    // add unique tid to action.meta of every action\n    const existingMeta = action.meta || {};\n    const meta = {\n      ...existingMeta,\n      tid: shortid.generate()\n    },\n    next({\n      ...action,\n      meta\n    });\n  }\n});\n\nconst fetchPollsLogic = createLogic({\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n  process({ getState, action }, dispatch, done) {\n    axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls)\n      .then(polls => dispatch({ type: FETCH_POLLS_SUCCESS,\n                                payload: polls }))\n      .catch(err => {\n             console.error(err); // log since could be render err\n             dispatch({ type: FETCH_POLLS_FAILED, payload: err,\n                        error: true })\n      })\n      .then(() => done());\n  }\n});\n\n// pollsLogic\nexport default [\n  validationLogic,\n  addUniqueId,\n  fetchPollsLogic\n];\n\n```\n\n### processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code\n\n`processOptions` has these new properties which affect the process hook behavior:\n\n - `dispatchReturn` - the returned value of the process function will be dispatched or if it is a promise or observable then the resolve, reject, or observable values will be dispatched applying any successType or failType logic if defined. Default is determined by arity of process fn, `true` if dispatch not provided, `false` otherwise. [Details](https://github.com/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature)\n\n - `successType` - dispatch this action type using contents of dispatch as the payload (also would work with with promise or observable). You may alternatively provide an action creator function to use instead and it will receive the value as only parameter. Default: `undefined`.\n   - if successType is a string action type\n     - create action using successType and provide value as payload. ex: with `successType:'FOO'`, result would be `{ type: 'FOO', payload: value }`\n\n   - if successType is an action creator fn receiving the value as only parameter\n     - use the return value from the action creator fn for dispatching ex: `successType: x => ({ type: 'FOO', payload: x })`\n     - if the action creator fn returns a falsey value like `undefined` then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on the value provided to it.\n\n - `failType` - dispatch this action type using contents of error as the payload, sets error: true (would also work for rejects of promises or error from observable). You may alternatively provide an action creator function to use instead which will receive the error as the only parameter. Default: `undefined`.\n   - if failType is a string action type\n     - create action using failType, provide value as the payload, and set error to true. ex: with `failType:'BAR'`, result would be `{ type: 'BAR', payload: errorValue, error: true }`\n\n   - if failType is an action creator function receiving the error value as its only parameter\n     - use the return value from the action creator fn for dispatching. ex: `failType: x => ({ type: 'BAR', payload: x, error: true })`\n     - if the action creator fn returns a falsey value like `undefined` then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on teh value provided to it.\n\nThe successType and failType would enable clean code, where you can simply return a promise or observable that resolves to the payload and rejects on error. The resulting code doesn't have to deal with dispatch and actions directly.\n\n```js\nconst fetchPollsLogic = createLogic({\n\n  // declarative built-in functionality wraps your code\n  type: FETCH_POLLS, // only apply this logic to this type\n  cancelType: CANCEL_FETCH_POLLS, // cancel on this type\n  latest: true, // only take latest\n\n  processOptions: {\n    // optional since the default is true when dispatch is omitted from\n    // the process fn signature\n    dispatchReturn: true, // use returned/resolved value(s) for dispatching\n    // provide action types or action creator functions to be used\n    // with the resolved/rejected values from promise/observable returned\n    successType: FETCH_POLLS_SUCCESS, // dispatch this success act type\n    failType: FETCH_POLLS_FAILED, // dispatch this failed action type\n  },\n\n  // Omitting dispatch from the signature below makes the default for\n  // dispatchReturn true allowing you to simply return obj, promise, obs\n  // not needing to use dispatch directly\n  process({ getState, action }) {\n    return axios.get('https://survey.codewinds.com/polls')\n      .then(resp => resp.data.polls);\n  }\n});\n```\n\nThis is pretty nice leaving us with mainly our business logic code that could be easily extracted and called from here.\n\n\n## Full API\n\nSee the [docs for the full api](./docs/api.md)\n\n## Examples\n\n### JSFiddle live examples\n\n - [search async axios fetch](https://jsfiddle.net/jeffbski/78vpf92k/) - live search using debounce and take latest functionality with axios fetch\n - [search rxjs ajax fetch](https://jsfiddle.net/jeffbski/uLh2add5/) - live search using debounce and take latest functionality with rxjs ajax fetch\n - [search rxjs ajax fetch - using processOptions](https://jsfiddle.net/jeffbski/rLz44jk9/) - live search using debounce and take latest with rxjs ajax fetch using processOptions to streamline the code\n - [async axios fetch - single page](https://jsfiddle.net/jeffbski/954g5n7h/) - displayed using React\n - [async rxjs-ajax fetch](https://jsfiddle.net/jeffbski/0fu407na/) - async fetching using RxJS ajax which supports XHR abort for cancels\n - [async axios fetch - single page redux only](https://jsfiddle.net/jeffbski/yzy8w4ve/) - just the redux and redux-logic code\n - [async axios fetch - using processOptions](https://jsfiddle.net/jeffbski/oL6jmp52/) - using processOptions to streamline your code further with React\n - [async rxjs-ajax fetch - using processOptions](https://jsfiddle.net/jeffbski/d4p6oo0d/) - async fetch using RxJS ajax (supporting XHR abort on cancel) and processOptions for clean code.\n - [async await - react](https://jsfiddle.net/jeffbski/rfc7oz9p/) - using ES7 async functions (async/await) displaying with React\n - [async await - redux only](https://jsfiddle.net/jeffbski/h485f6h5/) - using ES7 async functions (async/await) - just redux and redux-logic code\n - [async await - react processOptions](https://jsfiddle.net/jeffbski/0rodyekn/) - using ES7 async functions (async/await) with processOptions, displayed with React\n\n### Full examples\n\n - [search-async-fetch](./examples/search-async-fetch) - search async fetch example using axios uses debouncing and take latest features\n - [async-fetch-vanilla](./examples/async-fetch-vanilla) - async fetch example using axios\n - [async-rxjs-ajax-fetch](./examples/async-rxjs-ajax-fetch) - async fetch example using RxJS ajax (supporting XHR abort on cancel) and redux-actions\n - [async-fetch-proc-options](./examples/async-fetch-proc-options) - async fetch example using axios and the new processOptions feature\n - [async-rxjs-ajax-proc-options](./examples/async-rxjs-ajax-proc-options) - async RxJS ajax (with XHR abort on cancel) fetch example using axios and the new processOptions feature\n - [async-await - ES7 async functions](./examples/async-await) - async fetch example using axios and ES7 async functions (async/await)\n - [async-await - ES7 async functions with processOptions](./examples/async-await-proc-options) - async fetch example using axios and ES7 async functions (async/await) and using the new processOptions feature\n - [countdown](./examples/countdown) - a countdown timer implemented with setInterval\n - [countdown-obs](./examples/countdown-obs) - a countdown timer implemented with Rx.Observable.interval\n - [form-validation](./examples/form-validation) - form validation and async post to server using axios, displays updated user list\n - [notification](./examples/notification) - notification message example showing at most N messages for X amount of time, rotating queued messages in as others expire\n - [search-single-file](./examples/single-file) - search async fetch example with all code in a single file and displayed with React\n - [single-file-redux](./examples/single-file-redux) - async fetch example with all code in a single file and appended to the container div. Only redux and redux-logic code.\n\n\n## Comparison summaries\n\nFollowing are just short summaries to compare redux-logic to other approaches.\n\nFor a more detailed comparison with examples, see by article in docs, [Where do I put my business logic in a React-Redux application?](./docs/where-business-logic.md).\n\n\n### Compared to fat action creators\n\n - no easy way to cancel or do limiting like take latest with fat action creators\n - action creators would not have access to the full global state so you might have to pass down lots of extra data that isn't needed for rendering. Every time business logic changes might require new data to be made available\n - no global interception using just action creators - applying logic or transformations across all or many actions\n -  Testing components and fat action creators may require running the code (possibly mocked API calls).\n\n### Compared to redux-thunk\n\n - With thunks business logic is spread over action creators\n - With thunks there is not an easy way to cancel async work nor to perform (take latest) limiting\n - no global interception with thunks - applying logic or transformations across all or many actions\n - Testing components and thunked action creators may require running the code (possibly mocked API calls). When you have a thunk (function or promise) you don't know what it does unless you execute it.\n\n\n### Compared to redux-observable\n\n - redux-logic doesn't require the developer to use rxjs observables. It uses observables under the covers to provide cancellation, throttling, etc. You simply configure these parameters to get this functionality. You can still use rxjs in your code if you want, but not a requirement.\n - redux-logic hooks in before the reducer stack like middleware allowing validation, verification, auth, tranformations. Allow, reject, tranform actions before they hit your reducers to update your state as well as accessing state after reducers have run. redux-observable hooks in after the reducers have updated state so they have no opportuntity to prevent the updates.\n\n### Compared to redux-saga\n\n - redux-logic doesn't require you to code with generators\n - redux-saga relies on pulling data (usually in a never ending loop) while redux-logic and logic are reactive, responding to data as it is available\n - redux-saga runs after reducers have been run, redux-logic can intercept and allow/reject/modify before reducers run also as well as after\n\n\n### Compared to custom redux middleware\n\n - Both are fully featured to do any type of business logic (validations, tranformations, processing)\n - redux-logic already has built-in capabilities for some of the hard stuff like cancellation, limiting, dynamic loading of code. With custom middleware you have to implement all functionality.\n - No safety net, if things break it could stop all of your future actions\n - Testing requires some mocking or setup\n\n### Implementing SAM/PAL Pattern\n\nThe [SAM (State-Action-Model) pattern](http://sam.js.org) is a pattern introduced by Jean-Jacques Dubray. Also known as the PAL (proposer, acceptor, learner) pattern based on Paxos terminology.\n\nA few of the challenging parts of implementing this with a React-Redux application are:\n\n 1. where to perform the `accept` (interception) of the proposed action performing validation, verification, authentication against the current model state. Based on the current state, it might be appropriate to modify the action, dispatch a different action, or simply suppress the action.\n 2. how to trigger actions based on the state after the model has finished updating, referred to as the `NAP` (next-action-predicate).\n\nCustom Redux middleware can be introduced to perform this logic, but you'll be implementing most everything on your own.\n\nWith `redux-logic` you can implement the SAM / PAL pattern easily in your React/Redux apps.\n\nNamely you can separate out your business logic from your action creators and reducers keeping them thin. redux-logic provides a nice place to accept, reject, and transform actions before your reducers are run. You have access to the full state to make decisions and you can trigger actions based on the updated state as well.\n\nSolving those SAM challenges previously identified using redux-logic:\n\n 1. perform acceptance in redux-logic `validate` hooks, you have access to the full state (model) of the app to make decisions. You can perform synchronous or asynchronous logic to determine whether to accept the action and you may augment, modify, substitute actions, or suppress as desired.\n 2. Perform NAP processing in redux-logic `process` hooks. The process hook runs after the actions have been sent down to the reducers so you have access to the full model (state) after the updates where you can make decisions and dispatch additional actions based on the updated state.\n\n<a name=\"other\"></a>\n\n## Inspiration\n\nredux-logic was inspired from these projects:\n\n - [redux-observable epics](https://redux-observable.js.org)\n - [redux-saga](http://yelouafi.github.io/redux-saga/)\n - [redux middleware](http://redux.js.org/docs/advanced/Middleware.html)\n\n## Minimized/gzipped size with all deps\n\n(redux-logic only includes the modules of RxJS 5 that it uses)\n```\nredux-logic.min.js.gz 11KB\n```\n\nNote: If you are already including RxJS 5 into your project then the resulting delta will be much smaller.\n\n## TODO\n\n - add typescript support\n - more docs\n - more examples\n - evaulate additional features as outlined above\n\n## Get involved\n\nIf you have input or ideas or would like to get involved, you may:\n\n - contact me via twitter @jeffbski  - <http://twitter.com/jeffbski>\n - open an issue on github to begin a discussion - <https://github.com/jeffbski/redux-logic/issues>\n - fork the repo and send a pull request (ideally with tests) - <https://github.com/jeffbski/redux-logic>\n - See the [contributing guide](http://github.com/jeffbski/redux-logic/raw/master/CONTRIBUTING.md)\n\n## Supporters\n\nThis project is supported by [CodeWinds Training](https://codewinds.com/)\n\n\n<a name=\"license\"/>\n\n## License - MIT\n\n - [MIT license](http://github.com/jeffbski/redux-logic/raw/master/LICENSE.md)","slug":"redux-logic","published":1,"updated":"2017-03-23T13:01:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5fla0006qrez07iq463u","content":"<h1 id=\"redux-logic\"><a href=\"#redux-logic\" class=\"headerlink\" title=\"redux-logic\"></a>redux-logic</h1><blockquote>\n<p>“One place for all your business logic and action side effects”</p>\n</blockquote>\n<p>Redux middleware that can:</p>\n<ul>\n<li><strong>intercept</strong> (validate/transform/augment) actions AND</li>\n<li><strong>perform async processing</strong> (fetching, I/O, side effects)</li>\n</ul>\n<p><a href=\"http://travis-ci.org/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://secure.travis-ci.org/jeffbski/redux-logic.png?branch=master\" alt=\"Build Status\"></a> <a href=\"https://www.codacy.com/app/jeff-barczewski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/codacy/grade/3687e7267e6d466b9d226c22b24f0061.svg\" alt=\"Codacy Grade Badge\"></a> <a href=\"https://www.codacy.com/app/jeff-barczewski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/codacy/coverage/3687e7267e6d466b9d226c22b24f0061.svg\" alt=\"Codacy Coverage Badge\"></a> <a href=\"https://snyk.io/test/github/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://snyk.io/test/github/jeffbski/redux-logic/badge.svg\" alt=\"Known Vulnerabilities\"></a> <a href=\"https://www.npmjs.com/package/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/npm/v/redux-logic.svg\" alt=\"NPM Version Badge\"></a></p>\n<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>With redux-logic, you have the <strong>freedom</strong> to write your logic in <strong>your favorite JS style</strong>:</p>\n<ul>\n<li>plain <strong>callback</strong> code - <code>dispatch(resultAction)</code></li>\n<li><strong>promises</strong> - <code>return axios.get(url).then(...)</code></li>\n<li><strong>async/await</strong> - <code>result = await fetch(url)</code></li>\n<li><strong>observables</strong> - <code>ob$.next(action1)</code></li>\n</ul>\n<blockquote>\n<p>Use the type of code you and your team are comfortable and experienced with.</p>\n</blockquote>\n<p>Leverage powerful <strong>declarative</strong> features by simply setting properties:</p>\n<ul>\n<li><strong>filtering</strong> for action type(s) or with regular expression(s)</li>\n<li><strong>cancellation</strong> on receiving action type(s)</li>\n<li>use only response for the <strong>latest</strong> request</li>\n<li><strong>debouncing</strong></li>\n<li><strong>throttling</strong></li>\n<li>dispatch actions - auto <strong>decoration</strong> of payloads</li>\n</ul>\n<p>Testing your logic is straight forward and simple.</p>\n<p>With simple code your logic can:</p>\n<ul>\n<li><strong>intercept</strong> actions before they hit the reducer<ul>\n<li><strong>validate</strong>, verify, auth check actions and allow/reject or modify actions</li>\n<li><strong>transform</strong> - augment/enhance/modify actions</li>\n</ul>\n</li>\n<li><strong>process</strong> - <strong>async processing</strong> and dispatching, orchestration, I/O (ajax, REST, subscriptions, GraphQL, web sockets, …)</li>\n</ul>\n<p>Redux-logic makes it easy to use code that is split into bundles, so you can dynamically load logic right along with your split UI.</p>\n<p>Server rendering is simplified with redux-logic since it lets you know when all your async fetching is complete without manual tracking.</p>\n<p>Inspired by redux-observable epics, redux-saga, and custom redux middleware, redux-logic combines ideas of each into a simple easy to use API.</p>\n<h2 id=\"Quick-Example\"><a href=\"#Quick-Example\" class=\"headerlink\" title=\"Quick Example\"></a>Quick Example</h2><p>This is an example of logic which will listen for actions of type FETCH_POLLS and it will perform ajax request to fetch data for which it dispatches the results (or error) on completion. It supports cancellation by allowing anything to send an action of type CANCEL_FETCH_POLLS. It also uses <code>take latest</code> feature that if additional FETCH_POLLS actions come in before this completes, it will ignore the outdated requests.</p>\n<p>The developer can just declare the type filtering, cancellation, and take latest behavior, no code needs to be written for that. That leaves the developer to focus on the real business requirements which are invoked in the process hook.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// declarative built-in functionality wraps your code</span></div><div class=\"line\">  type: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// your code here, hook into one or more of these execution</span></div><div class=\"line\">  <span class=\"comment\">// phases: validate, transform, and/or process</span></div><div class=\"line\">  process(&#123; getState, action &#125;, dispatch, done) &#123;</div><div class=\"line\">    axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">polls</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_SUCCESS,</div><div class=\"line\">                                <span class=\"attr\">payload</span>: polls &#125;))</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">             <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// log since could be render err</span></div><div class=\"line\">             dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_FAILED, <span class=\"attr\">payload</span>: err,</div><div class=\"line\">                        <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> done()); <span class=\"comment\">// call done when finished dispatching</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Since redux-logic gives you the freedom to use your favorite style of JS code (callbacks, promises, async/await, observables), it supports many features to make that easier, <a href=\"/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature\">explained in more detail</a>.</p>\n<h2 id=\"Table-of-contents\"><a href=\"#Table-of-contents\" class=\"headerlink\" title=\"Table of contents\"></a>Table of contents</h2><ul>\n<li><a href=\"#goals\">Goals</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"./docs/api.md\">Full API</a></li>\n<li><a href=\"#examples\">Examples</a> - <a href=\"#jsfiddle-live-examples\">JSFiddle</a> and <a href=\"#full-examples\">full examples</a></li>\n<li><a href=\"#comparison-summaries\">Comparison summaries</a> to <a href=\"#compared-to-fat-action-creators\">fat action creators</a>, <a href=\"#compared-to-redux-thunk\">thunks</a>, <a href=\"#compared-to-redux-observable\">redux-observable</a>, <a href=\"#compared-to-redux-saga\">redux-saga</a>, <a href=\"#compared-to-custom-redux-middleware\">custom middleware</a></li>\n<li><a href=\"#implementing-sampal-pattern\">SAM/PAL pattern</a></li>\n<li><a href=\"#other\">Other</a> - todo, inspiration, license</li>\n</ul>\n<h2 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h2><ul>\n<li>organize business logic keeping action creators and reducers clean<ul>\n<li>action creators are light and just post action objects</li>\n<li>reducers just focus on updating state</li>\n<li>intercept and perform validations, verifications, authentication</li>\n<li>intercept and transform actions</li>\n<li>perform async processing, orchestration, dispatch actions</li>\n</ul>\n</li>\n<li>wrap your core business logic code with declarative behavior<ul>\n<li>filtered - apply to one or many action types or even all actions</li>\n<li>cancellable - async work can be cancelled</li>\n<li>limiting (like taking only the latest, throttling, and debouncing)</li>\n</ul>\n</li>\n<li>features to support business logic and large apps<ul>\n<li>have access to full state to make decisions</li>\n<li>easily composable to support large applications</li>\n<li>inject dependencies into your logic, so you have everything needed in your logic code</li>\n<li>dynamic loading of logic for splitting bundles in your app</li>\n<li>your core logic code stays focussed and simple, don’t use generators or observables unless you want to.</li>\n<li>create subscriptions - streaming updates</li>\n<li>easy testing - since your code is just a function it’s easy to isolate and test</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install rxjs --save</div><div class=\"line\">npm install redux-logic --save</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in configureStore.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createLogic, createLogicMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-logic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> rootReducer <span class=\"keyword\">from</span> <span class=\"string\">'./rootReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> arrLogic <span class=\"keyword\">from</span> <span class=\"string\">'./logic'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> deps = &#123; <span class=\"comment\">// optional injected dependencies for logic</span></div><div class=\"line\">  <span class=\"comment\">// anything you need to have available in your logic</span></div><div class=\"line\">  A_SECRET_KEY: <span class=\"string\">'dsfjsdkfjsdlfjls'</span>,</div><div class=\"line\">  <span class=\"attr\">firebase</span>: firebaseInstance</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> logicMiddleware = createLogicMiddleware(arrLogic, deps);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> middleware = applyMiddleware(</div><div class=\"line\">  logicMiddleware</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> enhancer = middleware; <span class=\"comment\">// could compose in dev tools too</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, enhancer);</div><div class=\"line\">  <span class=\"keyword\">return</span> store;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in logic.js - combines logic from across many files, just</span></div><div class=\"line\"><span class=\"comment\">// a simple array of logic to be used for this app</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\"> ...todoLogic,</div><div class=\"line\"> ...pollsLogic</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in polls/logic.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> validationLogic = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: ADD_USER,</div><div class=\"line\">  validate(&#123; getState, action &#125;, allow, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> user = action.payload;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!getState().users[user.id]) &#123; <span class=\"comment\">// can also hit server to check</span></div><div class=\"line\">      allow(action);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      reject(&#123; <span class=\"attr\">type</span>: USER_EXISTS_ERROR, <span class=\"attr\">payload</span>: user, <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addUniqueId = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'*'</span>,</div><div class=\"line\">  transform(&#123; getState, action &#125;, next) &#123;</div><div class=\"line\">    <span class=\"comment\">// add unique tid to action.meta of every action</span></div><div class=\"line\">    <span class=\"keyword\">const</span> existingMeta = action.meta || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">const</span> meta = &#123;</div><div class=\"line\">      ...existingMeta,</div><div class=\"line\">      <span class=\"attr\">tid</span>: shortid.generate()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    next(&#123;</div><div class=\"line\">      ...action,</div><div class=\"line\">      meta</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\">  process(&#123; getState, action &#125;, dispatch, done) &#123;</div><div class=\"line\">    axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">polls</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_SUCCESS,</div><div class=\"line\">                                <span class=\"attr\">payload</span>: polls &#125;))</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">             <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// log since could be render err</span></div><div class=\"line\">             dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_FAILED, <span class=\"attr\">payload</span>: err,</div><div class=\"line\">                        <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> done());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// pollsLogic</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  validationLogic,</div><div class=\"line\">  addUniqueId,</div><div class=\"line\">  fetchPollsLogic</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h3 id=\"processOptions-introduced-for-redux-logic-0-8-2-allowing-for-even-more-streamlined-code\"><a href=\"#processOptions-introduced-for-redux-logic-0-8-2-allowing-for-even-more-streamlined-code\" class=\"headerlink\" title=\"processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code\"></a>processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code</h3><p><code>processOptions</code> has these new properties which affect the process hook behavior:</p>\n<ul>\n<li><p><code>dispatchReturn</code> - the returned value of the process function will be dispatched or if it is a promise or observable then the resolve, reject, or observable values will be dispatched applying any successType or failType logic if defined. Default is determined by arity of process fn, <code>true</code> if dispatch not provided, <code>false</code> otherwise. <a href=\"https://github.com/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature\" target=\"_blank\" rel=\"external\">Details</a></p>\n</li>\n<li><p><code>successType</code> - dispatch this action type using contents of dispatch as the payload (also would work with with promise or observable). You may alternatively provide an action creator function to use instead and it will receive the value as only parameter. Default: <code>undefined</code>.</p>\n<ul>\n<li><p>if successType is a string action type</p>\n<ul>\n<li>create action using successType and provide value as payload. ex: with <code>successType:&#39;FOO&#39;</code>, result would be <code>{ type: &#39;FOO&#39;, payload: value }</code></li>\n</ul>\n</li>\n<li><p>if successType is an action creator fn receiving the value as only parameter</p>\n<ul>\n<li>use the return value from the action creator fn for dispatching ex: <code>successType: x =&gt; ({ type: &#39;FOO&#39;, payload: x })</code></li>\n<li>if the action creator fn returns a falsey value like <code>undefined</code> then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on the value provided to it.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>failType</code> - dispatch this action type using contents of error as the payload, sets error: true (would also work for rejects of promises or error from observable). You may alternatively provide an action creator function to use instead which will receive the error as the only parameter. Default: <code>undefined</code>.</p>\n<ul>\n<li><p>if failType is a string action type</p>\n<ul>\n<li>create action using failType, provide value as the payload, and set error to true. ex: with <code>failType:&#39;BAR&#39;</code>, result would be <code>{ type: &#39;BAR&#39;, payload: errorValue, error: true }</code></li>\n</ul>\n</li>\n<li><p>if failType is an action creator function receiving the error value as its only parameter</p>\n<ul>\n<li>use the return value from the action creator fn for dispatching. ex: <code>failType: x =&gt; ({ type: &#39;BAR&#39;, payload: x, error: true })</code></li>\n<li>if the action creator fn returns a falsey value like <code>undefined</code> then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on teh value provided to it.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The successType and failType would enable clean code, where you can simply return a promise or observable that resolves to the payload and rejects on error. The resulting code doesn’t have to deal with dispatch and actions directly.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// declarative built-in functionality wraps your code</span></div><div class=\"line\">  type: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\"></div><div class=\"line\">  processOptions: &#123;</div><div class=\"line\">    <span class=\"comment\">// optional since the default is true when dispatch is omitted from</span></div><div class=\"line\">    <span class=\"comment\">// the process fn signature</span></div><div class=\"line\">    dispatchReturn: <span class=\"literal\">true</span>, <span class=\"comment\">// use returned/resolved value(s) for dispatching</span></div><div class=\"line\">    <span class=\"comment\">// provide action types or action creator functions to be used</span></div><div class=\"line\">    <span class=\"comment\">// with the resolved/rejected values from promise/observable returned</span></div><div class=\"line\">    successType: FETCH_POLLS_SUCCESS, <span class=\"comment\">// dispatch this success act type</span></div><div class=\"line\">    failType: FETCH_POLLS_FAILED, <span class=\"comment\">// dispatch this failed action type</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Omitting dispatch from the signature below makes the default for</span></div><div class=\"line\">  <span class=\"comment\">// dispatchReturn true allowing you to simply return obj, promise, obs</span></div><div class=\"line\">  <span class=\"comment\">// not needing to use dispatch directly</span></div><div class=\"line\">  process(&#123; getState, action &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This is pretty nice leaving us with mainly our business logic code that could be easily extracted and called from here.</p>\n<h2 id=\"Full-API\"><a href=\"#Full-API\" class=\"headerlink\" title=\"Full API\"></a>Full API</h2><p>See the <a href=\"./docs/api.md\">docs for the full api</a></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"JSFiddle-live-examples\"><a href=\"#JSFiddle-live-examples\" class=\"headerlink\" title=\"JSFiddle live examples\"></a>JSFiddle live examples</h3><ul>\n<li><a href=\"https://jsfiddle.net/jeffbski/78vpf92k/\" target=\"_blank\" rel=\"external\">search async axios fetch</a> - live search using debounce and take latest functionality with axios fetch</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/uLh2add5/\" target=\"_blank\" rel=\"external\">search rxjs ajax fetch</a> - live search using debounce and take latest functionality with rxjs ajax fetch</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/rLz44jk9/\" target=\"_blank\" rel=\"external\">search rxjs ajax fetch - using processOptions</a> - live search using debounce and take latest with rxjs ajax fetch using processOptions to streamline the code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/954g5n7h/\" target=\"_blank\" rel=\"external\">async axios fetch - single page</a> - displayed using React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/0fu407na/\" target=\"_blank\" rel=\"external\">async rxjs-ajax fetch</a> - async fetching using RxJS ajax which supports XHR abort for cancels</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/yzy8w4ve/\" target=\"_blank\" rel=\"external\">async axios fetch - single page redux only</a> - just the redux and redux-logic code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/oL6jmp52/\" target=\"_blank\" rel=\"external\">async axios fetch - using processOptions</a> - using processOptions to streamline your code further with React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/d4p6oo0d/\" target=\"_blank\" rel=\"external\">async rxjs-ajax fetch - using processOptions</a> - async fetch using RxJS ajax (supporting XHR abort on cancel) and processOptions for clean code.</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/rfc7oz9p/\" target=\"_blank\" rel=\"external\">async await - react</a> - using ES7 async functions (async/await) displaying with React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/h485f6h5/\" target=\"_blank\" rel=\"external\">async await - redux only</a> - using ES7 async functions (async/await) - just redux and redux-logic code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/0rodyekn/\" target=\"_blank\" rel=\"external\">async await - react processOptions</a> - using ES7 async functions (async/await) with processOptions, displayed with React</li>\n</ul>\n<h3 id=\"Full-examples\"><a href=\"#Full-examples\" class=\"headerlink\" title=\"Full examples\"></a>Full examples</h3><ul>\n<li><a href=\"./examples/search-async-fetch\">search-async-fetch</a> - search async fetch example using axios uses debouncing and take latest features</li>\n<li><a href=\"./examples/async-fetch-vanilla\">async-fetch-vanilla</a> - async fetch example using axios</li>\n<li><a href=\"./examples/async-rxjs-ajax-fetch\">async-rxjs-ajax-fetch</a> - async fetch example using RxJS ajax (supporting XHR abort on cancel) and redux-actions</li>\n<li><a href=\"./examples/async-fetch-proc-options\">async-fetch-proc-options</a> - async fetch example using axios and the new processOptions feature</li>\n<li><a href=\"./examples/async-rxjs-ajax-proc-options\">async-rxjs-ajax-proc-options</a> - async RxJS ajax (with XHR abort on cancel) fetch example using axios and the new processOptions feature</li>\n<li><a href=\"./examples/async-await\">async-await - ES7 async functions</a> - async fetch example using axios and ES7 async functions (async/await)</li>\n<li><a href=\"./examples/async-await-proc-options\">async-await - ES7 async functions with processOptions</a> - async fetch example using axios and ES7 async functions (async/await) and using the new processOptions feature</li>\n<li><a href=\"./examples/countdown\">countdown</a> - a countdown timer implemented with setInterval</li>\n<li><a href=\"./examples/countdown-obs\">countdown-obs</a> - a countdown timer implemented with Rx.Observable.interval</li>\n<li><a href=\"./examples/form-validation\">form-validation</a> - form validation and async post to server using axios, displays updated user list</li>\n<li><a href=\"./examples/notification\">notification</a> - notification message example showing at most N messages for X amount of time, rotating queued messages in as others expire</li>\n<li><a href=\"./examples/single-file\">search-single-file</a> - search async fetch example with all code in a single file and displayed with React</li>\n<li><a href=\"./examples/single-file-redux\">single-file-redux</a> - async fetch example with all code in a single file and appended to the container div. Only redux and redux-logic code.</li>\n</ul>\n<h2 id=\"Comparison-summaries\"><a href=\"#Comparison-summaries\" class=\"headerlink\" title=\"Comparison summaries\"></a>Comparison summaries</h2><p>Following are just short summaries to compare redux-logic to other approaches.</p>\n<p>For a more detailed comparison with examples, see by article in docs, <a href=\"./docs/where-business-logic.md\">Where do I put my business logic in a React-Redux application?</a>.</p>\n<h3 id=\"Compared-to-fat-action-creators\"><a href=\"#Compared-to-fat-action-creators\" class=\"headerlink\" title=\"Compared to fat action creators\"></a>Compared to fat action creators</h3><ul>\n<li>no easy way to cancel or do limiting like take latest with fat action creators</li>\n<li>action creators would not have access to the full global state so you might have to pass down lots of extra data that isn’t needed for rendering. Every time business logic changes might require new data to be made available</li>\n<li>no global interception using just action creators - applying logic or transformations across all or many actions</li>\n<li>Testing components and fat action creators may require running the code (possibly mocked API calls).</li>\n</ul>\n<h3 id=\"Compared-to-redux-thunk\"><a href=\"#Compared-to-redux-thunk\" class=\"headerlink\" title=\"Compared to redux-thunk\"></a>Compared to redux-thunk</h3><ul>\n<li>With thunks business logic is spread over action creators</li>\n<li>With thunks there is not an easy way to cancel async work nor to perform (take latest) limiting</li>\n<li>no global interception with thunks - applying logic or transformations across all or many actions</li>\n<li>Testing components and thunked action creators may require running the code (possibly mocked API calls). When you have a thunk (function or promise) you don’t know what it does unless you execute it.</li>\n</ul>\n<h3 id=\"Compared-to-redux-observable\"><a href=\"#Compared-to-redux-observable\" class=\"headerlink\" title=\"Compared to redux-observable\"></a>Compared to redux-observable</h3><ul>\n<li>redux-logic doesn’t require the developer to use rxjs observables. It uses observables under the covers to provide cancellation, throttling, etc. You simply configure these parameters to get this functionality. You can still use rxjs in your code if you want, but not a requirement.</li>\n<li>redux-logic hooks in before the reducer stack like middleware allowing validation, verification, auth, tranformations. Allow, reject, tranform actions before they hit your reducers to update your state as well as accessing state after reducers have run. redux-observable hooks in after the reducers have updated state so they have no opportuntity to prevent the updates.</li>\n</ul>\n<h3 id=\"Compared-to-redux-saga\"><a href=\"#Compared-to-redux-saga\" class=\"headerlink\" title=\"Compared to redux-saga\"></a>Compared to redux-saga</h3><ul>\n<li>redux-logic doesn’t require you to code with generators</li>\n<li>redux-saga relies on pulling data (usually in a never ending loop) while redux-logic and logic are reactive, responding to data as it is available</li>\n<li>redux-saga runs after reducers have been run, redux-logic can intercept and allow/reject/modify before reducers run also as well as after</li>\n</ul>\n<h3 id=\"Compared-to-custom-redux-middleware\"><a href=\"#Compared-to-custom-redux-middleware\" class=\"headerlink\" title=\"Compared to custom redux middleware\"></a>Compared to custom redux middleware</h3><ul>\n<li>Both are fully featured to do any type of business logic (validations, tranformations, processing)</li>\n<li>redux-logic already has built-in capabilities for some of the hard stuff like cancellation, limiting, dynamic loading of code. With custom middleware you have to implement all functionality.</li>\n<li>No safety net, if things break it could stop all of your future actions</li>\n<li>Testing requires some mocking or setup</li>\n</ul>\n<h3 id=\"Implementing-SAM-PAL-Pattern\"><a href=\"#Implementing-SAM-PAL-Pattern\" class=\"headerlink\" title=\"Implementing SAM/PAL Pattern\"></a>Implementing SAM/PAL Pattern</h3><p>The <a href=\"http://sam.js.org\" target=\"_blank\" rel=\"external\">SAM (State-Action-Model) pattern</a> is a pattern introduced by Jean-Jacques Dubray. Also known as the PAL (proposer, acceptor, learner) pattern based on Paxos terminology.</p>\n<p>A few of the challenging parts of implementing this with a React-Redux application are:</p>\n<ol>\n<li>where to perform the <code>accept</code> (interception) of the proposed action performing validation, verification, authentication against the current model state. Based on the current state, it might be appropriate to modify the action, dispatch a different action, or simply suppress the action.</li>\n<li>how to trigger actions based on the state after the model has finished updating, referred to as the <code>NAP</code> (next-action-predicate).</li>\n</ol>\n<p>Custom Redux middleware can be introduced to perform this logic, but you’ll be implementing most everything on your own.</p>\n<p>With <code>redux-logic</code> you can implement the SAM / PAL pattern easily in your React/Redux apps.</p>\n<p>Namely you can separate out your business logic from your action creators and reducers keeping them thin. redux-logic provides a nice place to accept, reject, and transform actions before your reducers are run. You have access to the full state to make decisions and you can trigger actions based on the updated state as well.</p>\n<p>Solving those SAM challenges previously identified using redux-logic:</p>\n<ol>\n<li>perform acceptance in redux-logic <code>validate</code> hooks, you have access to the full state (model) of the app to make decisions. You can perform synchronous or asynchronous logic to determine whether to accept the action and you may augment, modify, substitute actions, or suppress as desired.</li>\n<li>Perform NAP processing in redux-logic <code>process</code> hooks. The process hook runs after the actions have been sent down to the reducers so you have access to the full model (state) after the updates where you can make decisions and dispatch additional actions based on the updated state.</li>\n</ol>\n<p><a name=\"other\"></a></p>\n<h2 id=\"Inspiration\"><a href=\"#Inspiration\" class=\"headerlink\" title=\"Inspiration\"></a>Inspiration</h2><p>redux-logic was inspired from these projects:</p>\n<ul>\n<li><a href=\"https://redux-observable.js.org\" target=\"_blank\" rel=\"external\">redux-observable epics</a></li>\n<li><a href=\"http://yelouafi.github.io/redux-saga/\" target=\"_blank\" rel=\"external\">redux-saga</a></li>\n<li><a href=\"http://redux.js.org/docs/advanced/Middleware.html\" target=\"_blank\" rel=\"external\">redux middleware</a></li>\n</ul>\n<h2 id=\"Minimized-gzipped-size-with-all-deps\"><a href=\"#Minimized-gzipped-size-with-all-deps\" class=\"headerlink\" title=\"Minimized/gzipped size with all deps\"></a>Minimized/gzipped size with all deps</h2><p>(redux-logic only includes the modules of RxJS 5 that it uses)<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redux-logic<span class=\"selector-class\">.min</span><span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span> <span class=\"number\">11</span>KB</div></pre></td></tr></table></figure></p>\n<p>Note: If you are already including RxJS 5 into your project then the resulting delta will be much smaller.</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>add typescript support</li>\n<li>more docs</li>\n<li>more examples</li>\n<li>evaulate additional features as outlined above</li>\n</ul>\n<h2 id=\"Get-involved\"><a href=\"#Get-involved\" class=\"headerlink\" title=\"Get involved\"></a>Get involved</h2><p>If you have input or ideas or would like to get involved, you may:</p>\n<ul>\n<li>contact me via twitter @jeffbski  - <a href=\"http://twitter.com/jeffbski\" target=\"_blank\" rel=\"external\">http://twitter.com/jeffbski</a></li>\n<li>open an issue on github to begin a discussion - <a href=\"https://github.com/jeffbski/redux-logic/issues\" target=\"_blank\" rel=\"external\">https://github.com/jeffbski/redux-logic/issues</a></li>\n<li>fork the repo and send a pull request (ideally with tests) - <a href=\"https://github.com/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\">https://github.com/jeffbski/redux-logic</a></li>\n<li>See the <a href=\"http://github.com/jeffbski/redux-logic/raw/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"external\">contributing guide</a></li>\n</ul>\n<h2 id=\"Supporters\"><a href=\"#Supporters\" class=\"headerlink\" title=\"Supporters\"></a>Supporters</h2><p>This project is supported by <a href=\"https://codewinds.com/\" target=\"_blank\" rel=\"external\">CodeWinds Training</a></p>\n<p><a name=\"license\"></a></p>\n<h2 id=\"License-MIT\"><a href=\"#License-MIT\" class=\"headerlink\" title=\"License - MIT\"></a>License - MIT</h2><ul>\n<li><a href=\"http://github.com/jeffbski/redux-logic/raw/master/LICENSE.md\" target=\"_blank\" rel=\"external\">MIT license</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"redux-logic\"><a href=\"#redux-logic\" class=\"headerlink\" title=\"redux-logic\"></a>redux-logic</h1><blockquote>\n<p>“One place for all your business logic and action side effects”</p>\n</blockquote>\n<p>Redux middleware that can:</p>\n<ul>\n<li><strong>intercept</strong> (validate/transform/augment) actions AND</li>\n<li><strong>perform async processing</strong> (fetching, I/O, side effects)</li>\n</ul>\n<p><a href=\"http://travis-ci.org/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://secure.travis-ci.org/jeffbski/redux-logic.png?branch=master\" alt=\"Build Status\"></a> <a href=\"https://www.codacy.com/app/jeff-barczewski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/codacy/grade/3687e7267e6d466b9d226c22b24f0061.svg\" alt=\"Codacy Grade Badge\"></a> <a href=\"https://www.codacy.com/app/jeff-barczewski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/codacy/coverage/3687e7267e6d466b9d226c22b24f0061.svg\" alt=\"Codacy Coverage Badge\"></a> <a href=\"https://snyk.io/test/github/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://snyk.io/test/github/jeffbski/redux-logic/badge.svg\" alt=\"Known Vulnerabilities\"></a> <a href=\"https://www.npmjs.com/package/redux-logic\" target=\"_blank\" rel=\"external\"><img src=\"https://img.shields.io/npm/v/redux-logic.svg\" alt=\"NPM Version Badge\"></a></p>\n<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>With redux-logic, you have the <strong>freedom</strong> to write your logic in <strong>your favorite JS style</strong>:</p>\n<ul>\n<li>plain <strong>callback</strong> code - <code>dispatch(resultAction)</code></li>\n<li><strong>promises</strong> - <code>return axios.get(url).then(...)</code></li>\n<li><strong>async/await</strong> - <code>result = await fetch(url)</code></li>\n<li><strong>observables</strong> - <code>ob$.next(action1)</code></li>\n</ul>\n<blockquote>\n<p>Use the type of code you and your team are comfortable and experienced with.</p>\n</blockquote>\n<p>Leverage powerful <strong>declarative</strong> features by simply setting properties:</p>\n<ul>\n<li><strong>filtering</strong> for action type(s) or with regular expression(s)</li>\n<li><strong>cancellation</strong> on receiving action type(s)</li>\n<li>use only response for the <strong>latest</strong> request</li>\n<li><strong>debouncing</strong></li>\n<li><strong>throttling</strong></li>\n<li>dispatch actions - auto <strong>decoration</strong> of payloads</li>\n</ul>\n<p>Testing your logic is straight forward and simple.</p>\n<p>With simple code your logic can:</p>\n<ul>\n<li><strong>intercept</strong> actions before they hit the reducer<ul>\n<li><strong>validate</strong>, verify, auth check actions and allow/reject or modify actions</li>\n<li><strong>transform</strong> - augment/enhance/modify actions</li>\n</ul>\n</li>\n<li><strong>process</strong> - <strong>async processing</strong> and dispatching, orchestration, I/O (ajax, REST, subscriptions, GraphQL, web sockets, …)</li>\n</ul>\n<p>Redux-logic makes it easy to use code that is split into bundles, so you can dynamically load logic right along with your split UI.</p>\n<p>Server rendering is simplified with redux-logic since it lets you know when all your async fetching is complete without manual tracking.</p>\n<p>Inspired by redux-observable epics, redux-saga, and custom redux middleware, redux-logic combines ideas of each into a simple easy to use API.</p>\n<h2 id=\"Quick-Example\"><a href=\"#Quick-Example\" class=\"headerlink\" title=\"Quick Example\"></a>Quick Example</h2><p>This is an example of logic which will listen for actions of type FETCH_POLLS and it will perform ajax request to fetch data for which it dispatches the results (or error) on completion. It supports cancellation by allowing anything to send an action of type CANCEL_FETCH_POLLS. It also uses <code>take latest</code> feature that if additional FETCH_POLLS actions come in before this completes, it will ignore the outdated requests.</p>\n<p>The developer can just declare the type filtering, cancellation, and take latest behavior, no code needs to be written for that. That leaves the developer to focus on the real business requirements which are invoked in the process hook.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// declarative built-in functionality wraps your code</span></div><div class=\"line\">  type: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// your code here, hook into one or more of these execution</span></div><div class=\"line\">  <span class=\"comment\">// phases: validate, transform, and/or process</span></div><div class=\"line\">  process(&#123; getState, action &#125;, dispatch, done) &#123;</div><div class=\"line\">    axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">polls</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_SUCCESS,</div><div class=\"line\">                                <span class=\"attr\">payload</span>: polls &#125;))</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">             <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// log since could be render err</span></div><div class=\"line\">             dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_FAILED, <span class=\"attr\">payload</span>: err,</div><div class=\"line\">                        <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> done()); <span class=\"comment\">// call done when finished dispatching</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Since redux-logic gives you the freedom to use your favorite style of JS code (callbacks, promises, async/await, observables), it supports many features to make that easier, <a href=\"/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature\">explained in more detail</a>.</p>\n<h2 id=\"Table-of-contents\"><a href=\"#Table-of-contents\" class=\"headerlink\" title=\"Table of contents\"></a>Table of contents</h2><ul>\n<li><a href=\"#goals\">Goals</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"./docs/api.md\">Full API</a></li>\n<li><a href=\"#examples\">Examples</a> - <a href=\"#jsfiddle-live-examples\">JSFiddle</a> and <a href=\"#full-examples\">full examples</a></li>\n<li><a href=\"#comparison-summaries\">Comparison summaries</a> to <a href=\"#compared-to-fat-action-creators\">fat action creators</a>, <a href=\"#compared-to-redux-thunk\">thunks</a>, <a href=\"#compared-to-redux-observable\">redux-observable</a>, <a href=\"#compared-to-redux-saga\">redux-saga</a>, <a href=\"#compared-to-custom-redux-middleware\">custom middleware</a></li>\n<li><a href=\"#implementing-sampal-pattern\">SAM/PAL pattern</a></li>\n<li><a href=\"#other\">Other</a> - todo, inspiration, license</li>\n</ul>\n<h2 id=\"Goals\"><a href=\"#Goals\" class=\"headerlink\" title=\"Goals\"></a>Goals</h2><ul>\n<li>organize business logic keeping action creators and reducers clean<ul>\n<li>action creators are light and just post action objects</li>\n<li>reducers just focus on updating state</li>\n<li>intercept and perform validations, verifications, authentication</li>\n<li>intercept and transform actions</li>\n<li>perform async processing, orchestration, dispatch actions</li>\n</ul>\n</li>\n<li>wrap your core business logic code with declarative behavior<ul>\n<li>filtered - apply to one or many action types or even all actions</li>\n<li>cancellable - async work can be cancelled</li>\n<li>limiting (like taking only the latest, throttling, and debouncing)</li>\n</ul>\n</li>\n<li>features to support business logic and large apps<ul>\n<li>have access to full state to make decisions</li>\n<li>easily composable to support large applications</li>\n<li>inject dependencies into your logic, so you have everything needed in your logic code</li>\n<li>dynamic loading of logic for splitting bundles in your app</li>\n<li>your core logic code stays focussed and simple, don’t use generators or observables unless you want to.</li>\n<li>create subscriptions - streaming updates</li>\n<li>easy testing - since your code is just a function it’s easy to isolate and test</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install rxjs --save</div><div class=\"line\">npm install redux-logic --save</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in configureStore.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createLogic, createLogicMiddleware &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-logic'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> rootReducer <span class=\"keyword\">from</span> <span class=\"string\">'./rootReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> arrLogic <span class=\"keyword\">from</span> <span class=\"string\">'./logic'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> deps = &#123; <span class=\"comment\">// optional injected dependencies for logic</span></div><div class=\"line\">  <span class=\"comment\">// anything you need to have available in your logic</span></div><div class=\"line\">  A_SECRET_KEY: <span class=\"string\">'dsfjsdkfjsdlfjls'</span>,</div><div class=\"line\">  <span class=\"attr\">firebase</span>: firebaseInstance</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> logicMiddleware = createLogicMiddleware(arrLogic, deps);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> middleware = applyMiddleware(</div><div class=\"line\">  logicMiddleware</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> enhancer = middleware; <span class=\"comment\">// could compose in dev tools too</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, enhancer);</div><div class=\"line\">  <span class=\"keyword\">return</span> store;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in logic.js - combines logic from across many files, just</span></div><div class=\"line\"><span class=\"comment\">// a simple array of logic to be used for this app</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\"> ...todoLogic,</div><div class=\"line\"> ...pollsLogic</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in polls/logic.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> validationLogic = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: ADD_USER,</div><div class=\"line\">  validate(&#123; getState, action &#125;, allow, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> user = action.payload;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!getState().users[user.id]) &#123; <span class=\"comment\">// can also hit server to check</span></div><div class=\"line\">      allow(action);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      reject(&#123; <span class=\"attr\">type</span>: USER_EXISTS_ERROR, <span class=\"attr\">payload</span>: user, <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> addUniqueId = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'*'</span>,</div><div class=\"line\">  transform(&#123; getState, action &#125;, next) &#123;</div><div class=\"line\">    <span class=\"comment\">// add unique tid to action.meta of every action</span></div><div class=\"line\">    <span class=\"keyword\">const</span> existingMeta = action.meta || &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">const</span> meta = &#123;</div><div class=\"line\">      ...existingMeta,</div><div class=\"line\">      <span class=\"attr\">tid</span>: shortid.generate()</div><div class=\"line\">    &#125;,</div><div class=\"line\">    next(&#123;</div><div class=\"line\">      ...action,</div><div class=\"line\">      meta</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\">  <span class=\"attr\">type</span>: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\">  process(&#123; getState, action &#125;, dispatch, done) &#123;</div><div class=\"line\">    axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">polls</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_SUCCESS,</div><div class=\"line\">                                <span class=\"attr\">payload</span>: polls &#125;))</div><div class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">             <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// log since could be render err</span></div><div class=\"line\">             dispatch(&#123; <span class=\"attr\">type</span>: FETCH_POLLS_FAILED, <span class=\"attr\">payload</span>: err,</div><div class=\"line\">                        <span class=\"attr\">error</span>: <span class=\"literal\">true</span> &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> done());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// pollsLogic</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  validationLogic,</div><div class=\"line\">  addUniqueId,</div><div class=\"line\">  fetchPollsLogic</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h3 id=\"processOptions-introduced-for-redux-logic-0-8-2-allowing-for-even-more-streamlined-code\"><a href=\"#processOptions-introduced-for-redux-logic-0-8-2-allowing-for-even-more-streamlined-code\" class=\"headerlink\" title=\"processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code\"></a>processOptions introduced for redux-logic@0.8.2 allowing for even more streamlined code</h3><p><code>processOptions</code> has these new properties which affect the process hook behavior:</p>\n<ul>\n<li><p><code>dispatchReturn</code> - the returned value of the process function will be dispatched or if it is a promise or observable then the resolve, reject, or observable values will be dispatched applying any successType or failType logic if defined. Default is determined by arity of process fn, <code>true</code> if dispatch not provided, <code>false</code> otherwise. <a href=\"https://github.com/jeffbski/redux-logic/blob/master/docs/api.md#dispatch---multi-dispatching-and-process-variable-signature\" target=\"_blank\" rel=\"external\">Details</a></p>\n</li>\n<li><p><code>successType</code> - dispatch this action type using contents of dispatch as the payload (also would work with with promise or observable). You may alternatively provide an action creator function to use instead and it will receive the value as only parameter. Default: <code>undefined</code>.</p>\n<ul>\n<li><p>if successType is a string action type</p>\n<ul>\n<li>create action using successType and provide value as payload. ex: with <code>successType:&#39;FOO&#39;</code>, result would be <code>{ type: &#39;FOO&#39;, payload: value }</code></li>\n</ul>\n</li>\n<li><p>if successType is an action creator fn receiving the value as only parameter</p>\n<ul>\n<li>use the return value from the action creator fn for dispatching ex: <code>successType: x =&gt; ({ type: &#39;FOO&#39;, payload: x })</code></li>\n<li>if the action creator fn returns a falsey value like <code>undefined</code> then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on the value provided to it.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>failType</code> - dispatch this action type using contents of error as the payload, sets error: true (would also work for rejects of promises or error from observable). You may alternatively provide an action creator function to use instead which will receive the error as the only parameter. Default: <code>undefined</code>.</p>\n<ul>\n<li><p>if failType is a string action type</p>\n<ul>\n<li>create action using failType, provide value as the payload, and set error to true. ex: with <code>failType:&#39;BAR&#39;</code>, result would be <code>{ type: &#39;BAR&#39;, payload: errorValue, error: true }</code></li>\n</ul>\n</li>\n<li><p>if failType is an action creator function receiving the error value as its only parameter</p>\n<ul>\n<li>use the return value from the action creator fn for dispatching. ex: <code>failType: x =&gt; ({ type: &#39;BAR&#39;, payload: x, error: true })</code></li>\n<li>if the action creator fn returns a falsey value like <code>undefined</code> then nothing will be dispatched. This allows your action creator to control whether something is actually dispatched based on teh value provided to it.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The successType and failType would enable clean code, where you can simply return a promise or observable that resolves to the payload and rejects on error. The resulting code doesn’t have to deal with dispatch and actions directly.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fetchPollsLogic = createLogic(&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// declarative built-in functionality wraps your code</span></div><div class=\"line\">  type: FETCH_POLLS, <span class=\"comment\">// only apply this logic to this type</span></div><div class=\"line\">  cancelType: CANCEL_FETCH_POLLS, <span class=\"comment\">// cancel on this type</span></div><div class=\"line\">  latest: <span class=\"literal\">true</span>, <span class=\"comment\">// only take latest</span></div><div class=\"line\"></div><div class=\"line\">  processOptions: &#123;</div><div class=\"line\">    <span class=\"comment\">// optional since the default is true when dispatch is omitted from</span></div><div class=\"line\">    <span class=\"comment\">// the process fn signature</span></div><div class=\"line\">    dispatchReturn: <span class=\"literal\">true</span>, <span class=\"comment\">// use returned/resolved value(s) for dispatching</span></div><div class=\"line\">    <span class=\"comment\">// provide action types or action creator functions to be used</span></div><div class=\"line\">    <span class=\"comment\">// with the resolved/rejected values from promise/observable returned</span></div><div class=\"line\">    successType: FETCH_POLLS_SUCCESS, <span class=\"comment\">// dispatch this success act type</span></div><div class=\"line\">    failType: FETCH_POLLS_FAILED, <span class=\"comment\">// dispatch this failed action type</span></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Omitting dispatch from the signature below makes the default for</span></div><div class=\"line\">  <span class=\"comment\">// dispatchReturn true allowing you to simply return obj, promise, obs</span></div><div class=\"line\">  <span class=\"comment\">// not needing to use dispatch directly</span></div><div class=\"line\">  process(&#123; getState, action &#125;) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'https://survey.codewinds.com/polls'</span>)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.data.polls);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This is pretty nice leaving us with mainly our business logic code that could be easily extracted and called from here.</p>\n<h2 id=\"Full-API\"><a href=\"#Full-API\" class=\"headerlink\" title=\"Full API\"></a>Full API</h2><p>See the <a href=\"./docs/api.md\">docs for the full api</a></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"JSFiddle-live-examples\"><a href=\"#JSFiddle-live-examples\" class=\"headerlink\" title=\"JSFiddle live examples\"></a>JSFiddle live examples</h3><ul>\n<li><a href=\"https://jsfiddle.net/jeffbski/78vpf92k/\" target=\"_blank\" rel=\"external\">search async axios fetch</a> - live search using debounce and take latest functionality with axios fetch</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/uLh2add5/\" target=\"_blank\" rel=\"external\">search rxjs ajax fetch</a> - live search using debounce and take latest functionality with rxjs ajax fetch</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/rLz44jk9/\" target=\"_blank\" rel=\"external\">search rxjs ajax fetch - using processOptions</a> - live search using debounce and take latest with rxjs ajax fetch using processOptions to streamline the code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/954g5n7h/\" target=\"_blank\" rel=\"external\">async axios fetch - single page</a> - displayed using React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/0fu407na/\" target=\"_blank\" rel=\"external\">async rxjs-ajax fetch</a> - async fetching using RxJS ajax which supports XHR abort for cancels</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/yzy8w4ve/\" target=\"_blank\" rel=\"external\">async axios fetch - single page redux only</a> - just the redux and redux-logic code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/oL6jmp52/\" target=\"_blank\" rel=\"external\">async axios fetch - using processOptions</a> - using processOptions to streamline your code further with React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/d4p6oo0d/\" target=\"_blank\" rel=\"external\">async rxjs-ajax fetch - using processOptions</a> - async fetch using RxJS ajax (supporting XHR abort on cancel) and processOptions for clean code.</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/rfc7oz9p/\" target=\"_blank\" rel=\"external\">async await - react</a> - using ES7 async functions (async/await) displaying with React</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/h485f6h5/\" target=\"_blank\" rel=\"external\">async await - redux only</a> - using ES7 async functions (async/await) - just redux and redux-logic code</li>\n<li><a href=\"https://jsfiddle.net/jeffbski/0rodyekn/\" target=\"_blank\" rel=\"external\">async await - react processOptions</a> - using ES7 async functions (async/await) with processOptions, displayed with React</li>\n</ul>\n<h3 id=\"Full-examples\"><a href=\"#Full-examples\" class=\"headerlink\" title=\"Full examples\"></a>Full examples</h3><ul>\n<li><a href=\"./examples/search-async-fetch\">search-async-fetch</a> - search async fetch example using axios uses debouncing and take latest features</li>\n<li><a href=\"./examples/async-fetch-vanilla\">async-fetch-vanilla</a> - async fetch example using axios</li>\n<li><a href=\"./examples/async-rxjs-ajax-fetch\">async-rxjs-ajax-fetch</a> - async fetch example using RxJS ajax (supporting XHR abort on cancel) and redux-actions</li>\n<li><a href=\"./examples/async-fetch-proc-options\">async-fetch-proc-options</a> - async fetch example using axios and the new processOptions feature</li>\n<li><a href=\"./examples/async-rxjs-ajax-proc-options\">async-rxjs-ajax-proc-options</a> - async RxJS ajax (with XHR abort on cancel) fetch example using axios and the new processOptions feature</li>\n<li><a href=\"./examples/async-await\">async-await - ES7 async functions</a> - async fetch example using axios and ES7 async functions (async/await)</li>\n<li><a href=\"./examples/async-await-proc-options\">async-await - ES7 async functions with processOptions</a> - async fetch example using axios and ES7 async functions (async/await) and using the new processOptions feature</li>\n<li><a href=\"./examples/countdown\">countdown</a> - a countdown timer implemented with setInterval</li>\n<li><a href=\"./examples/countdown-obs\">countdown-obs</a> - a countdown timer implemented with Rx.Observable.interval</li>\n<li><a href=\"./examples/form-validation\">form-validation</a> - form validation and async post to server using axios, displays updated user list</li>\n<li><a href=\"./examples/notification\">notification</a> - notification message example showing at most N messages for X amount of time, rotating queued messages in as others expire</li>\n<li><a href=\"./examples/single-file\">search-single-file</a> - search async fetch example with all code in a single file and displayed with React</li>\n<li><a href=\"./examples/single-file-redux\">single-file-redux</a> - async fetch example with all code in a single file and appended to the container div. Only redux and redux-logic code.</li>\n</ul>\n<h2 id=\"Comparison-summaries\"><a href=\"#Comparison-summaries\" class=\"headerlink\" title=\"Comparison summaries\"></a>Comparison summaries</h2><p>Following are just short summaries to compare redux-logic to other approaches.</p>\n<p>For a more detailed comparison with examples, see by article in docs, <a href=\"./docs/where-business-logic.md\">Where do I put my business logic in a React-Redux application?</a>.</p>\n<h3 id=\"Compared-to-fat-action-creators\"><a href=\"#Compared-to-fat-action-creators\" class=\"headerlink\" title=\"Compared to fat action creators\"></a>Compared to fat action creators</h3><ul>\n<li>no easy way to cancel or do limiting like take latest with fat action creators</li>\n<li>action creators would not have access to the full global state so you might have to pass down lots of extra data that isn’t needed for rendering. Every time business logic changes might require new data to be made available</li>\n<li>no global interception using just action creators - applying logic or transformations across all or many actions</li>\n<li>Testing components and fat action creators may require running the code (possibly mocked API calls).</li>\n</ul>\n<h3 id=\"Compared-to-redux-thunk\"><a href=\"#Compared-to-redux-thunk\" class=\"headerlink\" title=\"Compared to redux-thunk\"></a>Compared to redux-thunk</h3><ul>\n<li>With thunks business logic is spread over action creators</li>\n<li>With thunks there is not an easy way to cancel async work nor to perform (take latest) limiting</li>\n<li>no global interception with thunks - applying logic or transformations across all or many actions</li>\n<li>Testing components and thunked action creators may require running the code (possibly mocked API calls). When you have a thunk (function or promise) you don’t know what it does unless you execute it.</li>\n</ul>\n<h3 id=\"Compared-to-redux-observable\"><a href=\"#Compared-to-redux-observable\" class=\"headerlink\" title=\"Compared to redux-observable\"></a>Compared to redux-observable</h3><ul>\n<li>redux-logic doesn’t require the developer to use rxjs observables. It uses observables under the covers to provide cancellation, throttling, etc. You simply configure these parameters to get this functionality. You can still use rxjs in your code if you want, but not a requirement.</li>\n<li>redux-logic hooks in before the reducer stack like middleware allowing validation, verification, auth, tranformations. Allow, reject, tranform actions before they hit your reducers to update your state as well as accessing state after reducers have run. redux-observable hooks in after the reducers have updated state so they have no opportuntity to prevent the updates.</li>\n</ul>\n<h3 id=\"Compared-to-redux-saga\"><a href=\"#Compared-to-redux-saga\" class=\"headerlink\" title=\"Compared to redux-saga\"></a>Compared to redux-saga</h3><ul>\n<li>redux-logic doesn’t require you to code with generators</li>\n<li>redux-saga relies on pulling data (usually in a never ending loop) while redux-logic and logic are reactive, responding to data as it is available</li>\n<li>redux-saga runs after reducers have been run, redux-logic can intercept and allow/reject/modify before reducers run also as well as after</li>\n</ul>\n<h3 id=\"Compared-to-custom-redux-middleware\"><a href=\"#Compared-to-custom-redux-middleware\" class=\"headerlink\" title=\"Compared to custom redux middleware\"></a>Compared to custom redux middleware</h3><ul>\n<li>Both are fully featured to do any type of business logic (validations, tranformations, processing)</li>\n<li>redux-logic already has built-in capabilities for some of the hard stuff like cancellation, limiting, dynamic loading of code. With custom middleware you have to implement all functionality.</li>\n<li>No safety net, if things break it could stop all of your future actions</li>\n<li>Testing requires some mocking or setup</li>\n</ul>\n<h3 id=\"Implementing-SAM-PAL-Pattern\"><a href=\"#Implementing-SAM-PAL-Pattern\" class=\"headerlink\" title=\"Implementing SAM/PAL Pattern\"></a>Implementing SAM/PAL Pattern</h3><p>The <a href=\"http://sam.js.org\" target=\"_blank\" rel=\"external\">SAM (State-Action-Model) pattern</a> is a pattern introduced by Jean-Jacques Dubray. Also known as the PAL (proposer, acceptor, learner) pattern based on Paxos terminology.</p>\n<p>A few of the challenging parts of implementing this with a React-Redux application are:</p>\n<ol>\n<li>where to perform the <code>accept</code> (interception) of the proposed action performing validation, verification, authentication against the current model state. Based on the current state, it might be appropriate to modify the action, dispatch a different action, or simply suppress the action.</li>\n<li>how to trigger actions based on the state after the model has finished updating, referred to as the <code>NAP</code> (next-action-predicate).</li>\n</ol>\n<p>Custom Redux middleware can be introduced to perform this logic, but you’ll be implementing most everything on your own.</p>\n<p>With <code>redux-logic</code> you can implement the SAM / PAL pattern easily in your React/Redux apps.</p>\n<p>Namely you can separate out your business logic from your action creators and reducers keeping them thin. redux-logic provides a nice place to accept, reject, and transform actions before your reducers are run. You have access to the full state to make decisions and you can trigger actions based on the updated state as well.</p>\n<p>Solving those SAM challenges previously identified using redux-logic:</p>\n<ol>\n<li>perform acceptance in redux-logic <code>validate</code> hooks, you have access to the full state (model) of the app to make decisions. You can perform synchronous or asynchronous logic to determine whether to accept the action and you may augment, modify, substitute actions, or suppress as desired.</li>\n<li>Perform NAP processing in redux-logic <code>process</code> hooks. The process hook runs after the actions have been sent down to the reducers so you have access to the full model (state) after the updates where you can make decisions and dispatch additional actions based on the updated state.</li>\n</ol>\n<p><a name=\"other\"></a></p>\n<h2 id=\"Inspiration\"><a href=\"#Inspiration\" class=\"headerlink\" title=\"Inspiration\"></a>Inspiration</h2><p>redux-logic was inspired from these projects:</p>\n<ul>\n<li><a href=\"https://redux-observable.js.org\" target=\"_blank\" rel=\"external\">redux-observable epics</a></li>\n<li><a href=\"http://yelouafi.github.io/redux-saga/\" target=\"_blank\" rel=\"external\">redux-saga</a></li>\n<li><a href=\"http://redux.js.org/docs/advanced/Middleware.html\" target=\"_blank\" rel=\"external\">redux middleware</a></li>\n</ul>\n<h2 id=\"Minimized-gzipped-size-with-all-deps\"><a href=\"#Minimized-gzipped-size-with-all-deps\" class=\"headerlink\" title=\"Minimized/gzipped size with all deps\"></a>Minimized/gzipped size with all deps</h2><p>(redux-logic only includes the modules of RxJS 5 that it uses)<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redux-logic<span class=\"selector-class\">.min</span><span class=\"selector-class\">.js</span><span class=\"selector-class\">.gz</span> <span class=\"number\">11</span>KB</div></pre></td></tr></table></figure></p>\n<p>Note: If you are already including RxJS 5 into your project then the resulting delta will be much smaller.</p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li>add typescript support</li>\n<li>more docs</li>\n<li>more examples</li>\n<li>evaulate additional features as outlined above</li>\n</ul>\n<h2 id=\"Get-involved\"><a href=\"#Get-involved\" class=\"headerlink\" title=\"Get involved\"></a>Get involved</h2><p>If you have input or ideas or would like to get involved, you may:</p>\n<ul>\n<li>contact me via twitter @jeffbski  - <a href=\"http://twitter.com/jeffbski\" target=\"_blank\" rel=\"external\">http://twitter.com/jeffbski</a></li>\n<li>open an issue on github to begin a discussion - <a href=\"https://github.com/jeffbski/redux-logic/issues\" target=\"_blank\" rel=\"external\">https://github.com/jeffbski/redux-logic/issues</a></li>\n<li>fork the repo and send a pull request (ideally with tests) - <a href=\"https://github.com/jeffbski/redux-logic\" target=\"_blank\" rel=\"external\">https://github.com/jeffbski/redux-logic</a></li>\n<li>See the <a href=\"http://github.com/jeffbski/redux-logic/raw/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"external\">contributing guide</a></li>\n</ul>\n<h2 id=\"Supporters\"><a href=\"#Supporters\" class=\"headerlink\" title=\"Supporters\"></a>Supporters</h2><p>This project is supported by <a href=\"https://codewinds.com/\" target=\"_blank\" rel=\"external\">CodeWinds Training</a></p>\n<p><a name=\"license\"></a></p>\n<h2 id=\"License-MIT\"><a href=\"#License-MIT\" class=\"headerlink\" title=\"License - MIT\"></a>License - MIT</h2><ul>\n<li><a href=\"http://github.com/jeffbski/redux-logic/raw/master/LICENSE.md\" target=\"_blank\" rel=\"external\">MIT license</a></li>\n</ul>\n"},{"title":"Dissecting Twitter's Redux Store","date":"2017-06-03T20:01:45.000Z","_content":"摘编|Dissecting Twitter’s Redux Store\n[原文请见](https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1)\n>剖析`mobile.twitter.com`的store结构.大公司的移动网站,可以借鉴的东西很多,twitter的mobile已经使用了React/Redux技术,所以如果你的web网站也想要采用React/Redux构架,这篇文章要好好看看.\n\n原文我现在不想翻译.列出来可能遇到的问题和需要用到的技术\n* 可能要自己翻墙\n* 记住是` Twitter’s mobile website`移动网站,不是pc端网站,\n网址是[mobileTwitter](https://mobile.twitter.com/home)\n* 要使用chrome浏览器打开\n* 申请一个twitter账号，登录,否则store中的信息很少\n* 需要在chrome安装[ React Developer Tools (RDT) ](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n工具.\n\nchrome的调试界面下可以看到\n![React选线](https://ww2.sinaimg.cn/large/006tNc79ly1ff20tsol1sj303101u0n6.jpg)\n点击，打开console.\n\n* 输入 `$r.store.getState()`; \n* twitter在你应用中store的 state结构就展现出来了.\n![twitter的state结构](https://ww2.sinaimg.cn/large/006tNc79ly1ff20xzpg5uj30mj0ecq40.jpg)\n* 现在你可以看看大公司的应用是怎么来设计state的结构的.\n* 由于人家的网站很复杂，所以state很像一个数据库，可以先看看数据库的范式化和 React/Redux中的实现方案 normalizr.了解如何减少巢状结构和冗余数据.\n\n![数据的范式化](https://ww1.sinaimg.cn/large/006tNc79ly1ff21394wxvj30m80cr0wn.jpg)\n\n>其他有兴趣的再深挖吧.总之一句话,当React应用中引入了Redux以后,应用的控制权就交到了Redux的手中,所以不要局限于React组件和页面的,需要更过的考虑数据的组织问题. \n\n这一篇算是工具篇。 相关的开发工具后redux-logger, dev-tools, React-native Debugger ,Reactotron工具.好像还有一个可视化的工具","source":"_posts/JavaScript  Reducer  practice.md","raw":"---\ntitle: Dissecting Twitter's Redux Store\ndate: 2017-06-04 04:01:45\ntags: Redux   \n---\n摘编|Dissecting Twitter’s Redux Store\n[原文请见](https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1)\n>剖析`mobile.twitter.com`的store结构.大公司的移动网站,可以借鉴的东西很多,twitter的mobile已经使用了React/Redux技术,所以如果你的web网站也想要采用React/Redux构架,这篇文章要好好看看.\n\n原文我现在不想翻译.列出来可能遇到的问题和需要用到的技术\n* 可能要自己翻墙\n* 记住是` Twitter’s mobile website`移动网站,不是pc端网站,\n网址是[mobileTwitter](https://mobile.twitter.com/home)\n* 要使用chrome浏览器打开\n* 申请一个twitter账号，登录,否则store中的信息很少\n* 需要在chrome安装[ React Developer Tools (RDT) ](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n工具.\n\nchrome的调试界面下可以看到\n![React选线](https://ww2.sinaimg.cn/large/006tNc79ly1ff20tsol1sj303101u0n6.jpg)\n点击，打开console.\n\n* 输入 `$r.store.getState()`; \n* twitter在你应用中store的 state结构就展现出来了.\n![twitter的state结构](https://ww2.sinaimg.cn/large/006tNc79ly1ff20xzpg5uj30mj0ecq40.jpg)\n* 现在你可以看看大公司的应用是怎么来设计state的结构的.\n* 由于人家的网站很复杂，所以state很像一个数据库，可以先看看数据库的范式化和 React/Redux中的实现方案 normalizr.了解如何减少巢状结构和冗余数据.\n\n![数据的范式化](https://ww1.sinaimg.cn/large/006tNc79ly1ff21394wxvj30m80cr0wn.jpg)\n\n>其他有兴趣的再深挖吧.总之一句话,当React应用中引入了Redux以后,应用的控制权就交到了Redux的手中,所以不要局限于React组件和页面的,需要更过的考虑数据的组织问题. \n\n这一篇算是工具篇。 相关的开发工具后redux-logger, dev-tools, React-native Debugger ,Reactotron工具.好像还有一个可视化的工具","slug":"JavaScript  Reducer  practice","published":1,"updated":"2017-06-12T00:51:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5flc0007qrezt2thyeq9","content":"<p>摘编|Dissecting Twitter’s Redux Store<br><a href=\"https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1\" target=\"_blank\" rel=\"external\">原文请见</a></p>\n<blockquote>\n<p>剖析<code>mobile.twitter.com</code>的store结构.大公司的移动网站,可以借鉴的东西很多,twitter的mobile已经使用了React/Redux技术,所以如果你的web网站也想要采用React/Redux构架,这篇文章要好好看看.</p>\n</blockquote>\n<p>原文我现在不想翻译.列出来可能遇到的问题和需要用到的技术</p>\n<ul>\n<li>可能要自己翻墙</li>\n<li>记住是<code>Twitter’s mobile website</code>移动网站,不是pc端网站,<br>网址是<a href=\"https://mobile.twitter.com/home\" target=\"_blank\" rel=\"external\">mobileTwitter</a></li>\n<li>要使用chrome浏览器打开</li>\n<li>申请一个twitter账号，登录,否则store中的信息很少</li>\n<li>需要在chrome安装<a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\" target=\"_blank\" rel=\"external\"> React Developer Tools (RDT) </a><br>工具.</li>\n</ul>\n<p>chrome的调试界面下可以看到<br><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ff20tsol1sj303101u0n6.jpg\" alt=\"React选线\"><br>点击，打开console.</p>\n<ul>\n<li>输入 <code>$r.store.getState()</code>; </li>\n<li>twitter在你应用中store的 state结构就展现出来了.<br><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ff20xzpg5uj30mj0ecq40.jpg\" alt=\"twitter的state结构\"></li>\n<li>现在你可以看看大公司的应用是怎么来设计state的结构的.</li>\n<li>由于人家的网站很复杂，所以state很像一个数据库，可以先看看数据库的范式化和 React/Redux中的实现方案 normalizr.了解如何减少巢状结构和冗余数据.</li>\n</ul>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1ff21394wxvj30m80cr0wn.jpg\" alt=\"数据的范式化\"></p>\n<blockquote>\n<p>其他有兴趣的再深挖吧.总之一句话,当React应用中引入了Redux以后,应用的控制权就交到了Redux的手中,所以不要局限于React组件和页面的,需要更过的考虑数据的组织问题. </p>\n</blockquote>\n<p>这一篇算是工具篇。 相关的开发工具后redux-logger, dev-tools, React-native Debugger ,Reactotron工具.好像还有一个可视化的工具</p>\n","site":{"data":{}},"excerpt":"","more":"<p>摘编|Dissecting Twitter’s Redux Store<br><a href=\"https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1\" target=\"_blank\" rel=\"external\">原文请见</a></p>\n<blockquote>\n<p>剖析<code>mobile.twitter.com</code>的store结构.大公司的移动网站,可以借鉴的东西很多,twitter的mobile已经使用了React/Redux技术,所以如果你的web网站也想要采用React/Redux构架,这篇文章要好好看看.</p>\n</blockquote>\n<p>原文我现在不想翻译.列出来可能遇到的问题和需要用到的技术</p>\n<ul>\n<li>可能要自己翻墙</li>\n<li>记住是<code>Twitter’s mobile website</code>移动网站,不是pc端网站,<br>网址是<a href=\"https://mobile.twitter.com/home\" target=\"_blank\" rel=\"external\">mobileTwitter</a></li>\n<li>要使用chrome浏览器打开</li>\n<li>申请一个twitter账号，登录,否则store中的信息很少</li>\n<li>需要在chrome安装<a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\" target=\"_blank\" rel=\"external\"> React Developer Tools (RDT) </a><br>工具.</li>\n</ul>\n<p>chrome的调试界面下可以看到<br><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ff20tsol1sj303101u0n6.jpg\" alt=\"React选线\"><br>点击，打开console.</p>\n<ul>\n<li>输入 <code>$r.store.getState()</code>; </li>\n<li>twitter在你应用中store的 state结构就展现出来了.<br><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ff20xzpg5uj30mj0ecq40.jpg\" alt=\"twitter的state结构\"></li>\n<li>现在你可以看看大公司的应用是怎么来设计state的结构的.</li>\n<li>由于人家的网站很复杂，所以state很像一个数据库，可以先看看数据库的范式化和 React/Redux中的实现方案 normalizr.了解如何减少巢状结构和冗余数据.</li>\n</ul>\n<p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1ff21394wxvj30m80cr0wn.jpg\" alt=\"数据的范式化\"></p>\n<blockquote>\n<p>其他有兴趣的再深挖吧.总之一句话,当React应用中引入了Redux以后,应用的控制权就交到了Redux的手中,所以不要局限于React组件和页面的,需要更过的考虑数据的组织问题. </p>\n</blockquote>\n<p>这一篇算是工具篇。 相关的开发工具后redux-logger, dev-tools, React-native Debugger ,Reactotron工具.好像还有一个可视化的工具</p>\n"},{"title":"使用React,Redux,redux-sage构建图片库(翻译)","date":"2017-04-04T05:18:28.000Z","_content":"\n>看到这篇文章[build an image gallery using redux saga](http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/)，觉得写的不错，长短也适中.  文后有[注释版的github代码库,请使用comment分枝](https://github.com/phpsmarter/egghead-react-redux-image-gallery/tree/comment). Flickr API可能需要有fQ的基本能力.可以使用google的翻译作为参考，这篇文章google翻译版的中文水平让我吃了一惊.\n翻译已经完成.\n\n___\n\n###使用React,Redux和reudx-saga构建一个图像浏览程序(翻译)\nJoel Hooks ,2016年3月\n\n#####构建一个图片长廊\n\n图像长廊是一个简单的程序，从Flicker API 加载图片URLs,允许用户查看图片详情。\n\n\n![Screen Shot 2016-03-20 at 3.42.17 PM-2.png](http://upload-images.jianshu.io/upload_images/2044710-b0d03ac095f09c55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240)\n\n\n\n后续我们会使用React,Redux和redux-saga.React作为核心框架，优势是虚拟dom(virtual-dom)的实现。Redux在程序内负责state的管理。最后，我们会使用redux-saga来执行javascript的异步操作步骤。\n\n我们会使用ES6(箭头函数，模块，和模板字符串)，所以我们首先需要做一些项目的配置工作。\n\n#####项目配置和自动化\n___\n如果要开始一个React项目，须有有一系列的配置选项。对于一个简单的项目，我想把配置选项尽可能缩减。考虑到浏览器的版本问题，使用Babel把ES6编译为ES5。\n\n首先使用npm init 创建一个`package.json`文件\n\npackage.json\n```javascript\n  {\n  \"name\": \"egghead-react-redux-image-gallery\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Redux Saga beginner tutorial\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"test\": \"babel-node ./src/saga.spec.js | tap-spec\",\n    \"start\": \"budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git\"\n  },\n  \"author\": \"Joel Hooks <joelhooks@gmail.com>\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"babel-polyfill\": \"6.3.14\",\n    \"react\": \"^0.14.3\",\n    \"react-dom\": \"^0.14.3\",\n    \"react-redux\": \"^4.4.1\",\n    \"redux\": \"^3.3.1\",\n    \"redux-saga\": \"^0.8.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.1.18\",\n    \"babel-core\": \"6.4.0\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-preset-react\": \"^6.1.18\",\n    \"babel-preset-stage-2\": \"^6.1.18\",\n    \"babelify\": \"^7.2.0\",\n    \"browserify\": \"^13.0.0\",\n    \"budo\": \"^8.0.4\",\n    \"tap-spec\": \"^4.1.1\",\n    \"tape\": \"^4.2.2\"\n  }\n}\n```\n___\n\n 有了`package.json`, 可以在项目文件夹命令行运行 `npm install` 安装程序需要的依赖项。\n \n .babelrc\n\n```\n{\n  \"presets\": [\"es2015\", \"react\", \"stage-2\"]\n   } \n```\n       \n___\n这个文件告诉babel,我们将会使用ES2015(ES6),React以及ES2106的stage-2的一些特征。\n\n`package.json`有两个标准的script脚本配置：`start`和`test`.现在我们想通过start脚本加载程序，start会使用`src`目录的一些文件，所以西药先创建`src`文件夹.在`src`文件夹添加下面的一些文：\nindex.html\n```\n   <!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>egghead: React Redux Image Gallery</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n<div class=\"title\">\n  ![](http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg)\n  <h3>Egghead Image Gallery</h3>\n</div>\n\n<div id=\"root\"></div>\n\n<script type=\"text/javascript\" src=\"build.js\"></script>\n</body>\n</html>\n \n ```\n    \n    \n ___\n ___\n\n\nmain.js\n\n\n```\nimport \"babel-polyfill\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(\n  <h1>Hello React!</h1>,\n  document.getElementById('root')\n);\n```\n\n___\n\nstyle.css\n  ```\n    body {\n    font-family: Helvetica, Arial, Sans-Serif, sans-serif;\n    background: white;\n}\n\n.title {\n    display: flex;\n    padding: 2px;\n}\n\n.egghead {\n    width: 30px;\n    padding: 5px;\n}\n\n.image-gallery {\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid darkgray;\n}\n\n.gallery-image {\n    height: 250px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.gallery-image img {\n    width: 100%;\n    max-height: 250px;\n}\n\n.image-scroller {\n    display: flex;\n    justify-content: space-around;\n    overflow: auto;\n    overflow-y: hidden;\n}\n\n.image-scroller img {\n    width: 50px;\n    height: 50px;\n    padding: 1px;\n    border: 1px solid black;\n}\n\n  ```\n  ___\n\n`index.html`文件加载`style.css`文件提供一些基本的布局样式，同时也加载`build.js`文件，这是一个生成出来的文件.`main.js`是一个最基础的React程序，他在`index.html`的`#root`元素中渲染一个`h1`元素。创建这些文件以后，在项目文件夹中命令行运行`npm start`。在浏览器打开`http://10.11.12.1:9966`.就可以看到`index.html`中渲染的页面\n\n![运行加载图](http://upload-images.jianshu.io/upload_images/2044710-b24265cbe5f89d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240)\n\n\n现在我们来构建基础的`Gallery` React 组件\n\n#####在Gallery中显示一些图片\n___\n\n 首先我们需要尽可能快的获得一个可以显示的图片素材.在项目文件夹中创建一个文件`Gallery.js`\n Gallery.js\n  ```\n    import React, {Component} from 'react'\n\nconst flickrImages = [\n  \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n  \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n  \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n  \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n  \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n];\n\nexport default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n            <div key={index}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n  ```\n  \n  ___\n  我们直接在组件中硬编码了一个提供数据的数组，让项目尽快的工作起来.`Gallery组件`继承`Component组件`,在构造函数中创建一些组件的出事状态.最后我们利用一些样式标记渲染一下文件。`image-scroller`元素遍历(`map`方法)图片数组,生成摘要小图片。\n  \n  ```\n    import \"babel-polyfill\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n+ import Gallery from './Gallery'\n\nReactDOM.render(\n-  <h1>Hello React!</h1>,\n+  <Gallery />,\n  document.getElementById('root')\n);\n  ```\n  \n  到现在，我们使用硬编码的图片URLs(通过fickrImages)数组,第一张图片作为`selectedImage`.这些属性在`Gallery`组件的构造函数缺省配置中，通过初始状态(initial)来设定.\n\n  \n  接下来在组件中添加一个和组件进行交互操作的方法，方法具体内容是操做`setSate`.\n  Gallery.js\n  \n  ```\n     export default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n+  handleThumbClick(selectedImage) {\n+    this.setState({\n+      selectedImage\n+   })\n+  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index}>\n+            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n  ```\n___\n在`Gallery组件`添加`handleThumbClick`方法,任何元素都可用通过`onClick`属性调用这个方法.`image`作为第二个参数传递，元素自身作为第一个参数传递.bind方法传递javascript函数调用上下文对象是非常便捷。\n\n看起来不错!现在我们有了一些交互操作的方法，有点“APP”的意思了。截止目前，我们已经让app运行起来了，接下来要考虑怎么加载远程数据。最容易加载远程数据的地方是一个`React组件`生命周期方法,我们使用`componentDidMount`方法,通过他从`Flikr API`请求并加载一些图片.\n\nGallery.js\n ```\n   export default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n+  componentDidMount() {\n+    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n+    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;+\n+\n+    fetch(API_ENDPOINT).then((response) => {\n+      return response.json().then((json) => {\n+        const images = json.photos.photo.map(({farm, server, id, secret}) => { \n+            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n+        });\n+\n+        this.setState({images, selectedImage: images[0]});\n+      })\n+    })\n+  }\n[...]\n ```\n___\n我们在`Gallery`类中添加了一个新的方法,通过React的`componentDidMount`生命周期方法触发Flickr图片数据的获取。\n\n在`React`组件运行的不同时间点，组件会调用不同的生命周期函数。在这段代码中，当组件被渲染到`DOM`中的时间点,`componentDidMount`函数就会被调用。需要注意的是:`Gallery`组件只有一次渲染到`DOM`的机会，所以这个函数可以提供一些初始化图片.考虑到在APP的整个生命周期中,有更多的动态组件的加载和卸载,这可能会造成一些多余的调用和无法考虑到的结果。\n\n我们使用浏览器接口(browser API)的`fetch`方法执行请求.Fetch返回一个promise对象解析`response`对象.调用`response.json()`方法,返回另一个promise对象，这就是我们实际需要的`json`格式的数据.遍历这个对象以后就可以获取图片的url地址.\n\n>坦白讲，这个应用目前还很简单.我们还需要在这里花费更多的时间，还有一些基础的需求需要完成.或许我们应该在promise处理流程中添加错误处理方法,如果图片数据获取成功也需要一些处理逻辑.在这个地方，你需要发挥一些想象力考虑一下更多的逻辑.在生产实践中简单的需求是很少见的.很快,应用中就会添加更多的需求。认证,滚动橱窗,加载不同图片库的能力和图片的设置等等.仅仅这些还远远不够.\n\n我们已经使用`React`构建了一个加载图片库的程序。接下来我们需要考虑到随着程序功能的添加，到底需要哪些基础的模式.首先考虑到的一个问题就是要把应用的状态(state)控制从`Gallery`组件中分离出来.\n\n我们通过引入`Redux`来完成应用的状态管理工作。\n\n#####使用`Redux`来管理状态\n___\n在你的应用中只要使用了`setState`方法都会让一个组件从无状态变为有状态的组件.糟糕的是这个方法会导致应用中出现一些令人困惑的代码,这些代码会在应用中到处蔓延。\n\n`Flux`构架来减轻这个问题.`Flux`把逻辑(logic)和状态(state)迁移到`Store`中.应用中的动作(`Actions`)被`Dispatch`的时候,`Stores`\n会做相应的更新.`Stores`的更新会触发`View`根据新状态的渲染.\n\n那么我们为什么要舍弃`Flux`?他竟然还是“官方”构建的.\n好吧！`Redux`是基于`Flux`构架的,但是他有一些独特的优势.下面是Dan Abramov(Redux创建者)的一些话：\n>Redux和Flux没有什么不同.总体来讲他们是相同的构架,但是Redux通过功能组合把Flux使用回调注册的复杂点给屏蔽掉了.\n两个构架从更本上讲没有什么不同，但是我发现Redux使一些在Flux比较难实现的逻辑更容易实现.\n\n\n[Redux文档](http://cn.redux.js.org/index.html)非常棒.\n如果你还没有读过代码的卡通教程或者Dan的系列文章.赶快去看看吧！\n\n#####启动Redux\n\n第一件需要做的事事初始化`Redux`,让他在我们的程序中运行起来.现在不需要做安装工作，刚开始运行`npm install`的时候已经安装好了依赖项，我们需要做一些导入和配置工作.\n**reducer函数是Redux的大脑.** 每当应用分发(或派遣,dispatch)一个操作(action)的时候,`reducer`函数会接受操作(action)并且依据这个动作(action)创建`reducer`自己的`state`.因为`reducers`是纯函数，他们可以组合到一起，创建应用的`一个完整state`.让我们在`src`中创建一个简单的reducer:\nreducer.js\n \n ```\n   export default function images(state, action) {\n      console.log(state, action)\n      return state;\n   }\n ```\n ___\n 一个reducer函数接受两个参数(arguments).\n   1. [x] `state`-这个数据代表应用的状态(state).reducer函数使用这个状态来构建一个reducer自己可以管理的状态.如果状态没有发生改变,reducer会返回输入的状态.\n   2. [x]  `action`-这是触发reducer的事件.Actions通过store派发(dispatch),由reducer处理.action需要一个`type`属性来告诉reducer怎么处理state.\n\n目前,`images` reuducer在终端中打印出日志记录，表明工作流程是正常的，可以做接下来的工作了.为了使用reducer，需要在`main.js`中做一些配置工作:\nmain.js\n  ```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\n+ import { createStore } from 'redux'\n+ import reducer from './reducer'\n\n+ const store = createStore(reducer);\n\n+ import {Provider} from 'react-redux';\n\nReactDOM.render(\n+  <Provider store={store}>\n    <Gallery />\n+  </Provider>,\n  document.getElementById('root')\n);\n}\n ```\n ___\n \n 我们从`Redux`库中导入`createStore`组件.`creatStore`用来创建Redux的store.大多数情况下,我们不会和store直接交互,store在Redux中做幕后管理工作.\n\n 也需要导入刚才创建的reducer函数,以便于他可以被发送到store.\n 我们将通过`createStore(reducer)`操作，利用reducer来配置应用的store.这个示例仅仅只有一个reducer,但是`createStore`可以接收多个reducer作为参数.稍后我们会看到这一点.\n \n 最后我们导入高度集成化的组件`Provider`,这个组件用来包装`Gallery`,以便于我们在应用中使用Redux.我们需要把刚刚创建的store传递给`Provider`.你也可以不使用`Provider`,实际上Redux可以不需要React.但是我们将会使用`Provider`,因为他非常便于使用.\n \n \n\n![打印日志](http://upload-images.jianshu.io/upload_images/2044710-6667a047b669d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n\n 这张图可能有点古怪，但是展示了Redux的一个有意思的地方.所有的reducers接收在应用中的全部actions(动作或操作).在这个例子中我们可以看到Redux自己派发的一个`action`.\n #####连接Gallery组件\n \n 借助Redux,我们将使用”connected”和“un-connected”组件.一个`connected`组件被连线到store.`connected`组件使控制动作事件(controls action event)和store协作起来.通常,一个`connected`组件有子组件,子组件具有单纯的接收输入和渲染功能，当数据更新时执行调用.这个子组件就是unconnected组件.\n >提示:当Rect和Redux配合是工作的非常好,但是Redux不是非要和React在一起才能工作.没有React,Redux其实可以和其他框架配合使用.\n \n \n在应用中需要关联`React组件`和`Redux Store` 的时候，`react-redux`提供了便捷的包装器.我们把react-redux添加进`Gallery`中\n,从而使`Gallery`成为首要的关联组件.\n\nGallery.js\n ```\n  import React, {Component} from 'react'\n+import {connect} from 'react-redux';\n\n-export default class Gallery extends Component {\n+export class Gallery extends Component {\n  constructor(props) {\n    super(props);\n+    console.log(props);\n    this.state = {\n      images: []\n    }\n  }\n  componentDidMount() {\n    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\n    fetch(API_ENDPOINT).then((response) => {\n      return response.json().then((json) => {\n        const images = json.photos.photo.map(({farm, server, id, secret}) => {\n            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n        });\n\n        this.setState({images, selectedImage: images[0]});\n      })\n    })\n  }\n  handleThumbClick(selectedImage) {\n    this.setState({\n      selectedImage\n    })\n  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n+export default connect()(Gallery)\n ```\n___\n从`react-redux`导入`connect`函数,可以在导出组件的时候把他变为链接组件(connected component).请注意,`connect()(Gallery)`代码把`Gallery`组件放在第二个形参中,这是因为`connect()`返回一个函数，这个函数接受一个React组件作为参数(argument).调用`connect()`函数时需要配置项.后面我们将会传递配置我们应用的actions和state参数.\n我们也把`connect`作为默认配置到处模块.这一点非常重要！现在当我们`import Gallery`的时候,就不是一个单纯的React组件了,而是一个和Redux关联的组件了.\n\n\n\n![](http://upload-images.jianshu.io/upload_images/2044710-72a9136f9b481bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620)\n\n如果你观察我们添加进构造器的`console.log`的输出,就可以看到`Gallery`组件的属性现在包括了一个`dispatch`函数.这个地方是`connect`为我们的应用修改的,这个改动赋予了组件把自己的动作对象(action objects)`派发`到`reducers`的能力.\n\n  ```\n    export class Gallery extends Component {\n  constructor(props) {\n    super(props);\n+    this.props.dispatch({type: 'TEST'});\n    this.state = {\n      images: []\n    }\n  }\n[...]\n  ```\n___\n我们可以在组件的构造器中调用派发功能.你可以在开发者的终端中看到来自reducer的日志声明.看到声明表示我们已经派发了第一个action!.Actions是一个单一的javascript对象,必需有`type`属性.Actions可以拥有任意数量和种类的其他属性.但是`type`可以让reducers理解这些动作到底是做什么用的(意译，意思是只有拥有type属性，reducers才知道对state做什么样的修改).\n\n  ```\nexport default function images(state, action) {\n-  console.log(state, action)\n+  switch(action.type) {\n+    case 'TEST':\n+      console.log('THIS IS ONLY A TEST')\n+  }\n  return state;\n}\n  ```\n  ___\n \n 总的reducers使用`switch代码块`过滤有关的消息,`Switch`语句使用actions的type属性,当一个`action`和`case`分支吻合以后,相应的单个reducer就会执行他的具体工作.\n \n 我们的应用现在关联到接收的动作.现在我们需要把`Redux`-`Store`提供的`state`关联到应用中.\n \n ####默认的应用状态(state)\n reducer.js\n ```\n  const defaultState = {\n  images: []\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'TEST':\n-      console.log('THIS IS ONLY A TEST')\n+      console.log(state, action)\n+      return state;\n+    default:\n+      return state;\n  }\n-  return state;\n}\n \n ```\n 我们创建一个`defaultState`对象,这个对象返回一个空数组作为images的属性.我们把`images`函数的参数`state`设置为默认.如果在test分支中输出日志,将会看到state不是undefined(空数组不是undefined)!reducer需要返回应用的当前state.这点很重要!现在我们没有做任何改变,所以仅仅返回state.注意我们在`case`中添加了default分支,reducer必须要返回一个state.\n \n在`Gallery`组件中，我们也可以把state做一定的映射(map)以后再连接到应用.\n \n ```\n  import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n\nexport class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.props.dispatch({type: 'TEST'});\n+    console.log(props);\n-    this.state = {\n-      images: []\n-    }\n  }\n-  componentDidMount() {\n-    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n-    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;-\n-\n-    fetch(API_ENDPOINT).then((response) => {\n-      return response.json().then((json) => {\n-        const images = json.photos.photo.map(({farm, server, id, secret}) => { \n-            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n-        });\n-\n-        this.setState({images, selectedImage: images[0]});\n-      })\n-    })\n-  }\n-  handleThumbClick(selectedImage) {\n-    this.setState({\n-      selectedImage\n-    })\n-  }\n  render() {\n-    const {images, selectedImage} = this.state;\n+    const {images, selectedImage} = this.props;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n+            <div key={index}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n+function mapStateToProps(state) {\n+  return {\n+    images: state.images\n+    selectedImage: state.selectedImage\n+  }\n+}\n\n-export default connect()(Gallery)\n+export default connect(mapStateToProps)(Gallery)\n\n ``` \n ___\n \n  我们将移除连接组件中的所有图片加载和交互逻辑代码,如果你注意看`Gallery`组件的底部代码,你会注意到，我们创建了一个`mapStateToProps`函数,接收一个`state`作为参数,返回一个对象,把`state.images`映射为`images`属性.`mapStateToProps`做为参数传递给`connect`.\n  正如名字暗示的一样,`mapStateToProps`函数接收当前应用的state,然后把state转变为组件的属性(propertys).如果在构造器中输出props,将会看到images数组是`reducer`返回的默认state.\n  \n  ```\n   const defaultState = {\n-  images: []\n+  images: [\n+    \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n+    \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n+    \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n+    \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n+    \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n+  ],\n+  selectedImage: \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'TEST':\n      console.log(state, action)\n      return state;\n    default:\n      return state;\n  }\n}\n  ```\n  ___\n  \n  如果在`defaultState`中更新images数组,你将可以看到一些图片重新出现在gallery中!现在当用户点击缩略图的时候,我们可以反馈选择动作,返回对应的大图.\n  \n  ####更新state\n  怎么操作才能根据新选择的图片更新state?\n  需要配置reducer监听`IMAGE_SELECTED`动作,借助action携带的信息(payload,有的文章翻译为载荷,载荷怎么理解？手机载荷就是声音，短信和流量数据。如果是卡车就是拉的货物,如果是客车就乘载的乘客,action的载荷就是要让reducer明白你要干什么，需要什么)来更新state.\n  ```\n  const defaultState = {\n  images: [\n    \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n    \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n    \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n    \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n    \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n  ],\n  selectedImage: \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n-    case 'TEST':\n    case 'IMAGE_SELECTED':\n-      return state;\n+      return {...state, selectedImage: action.image};\n    default:\n      return state;\n  }\n}\n    ```\n  ___\n  现在reducer已经准备接收`IMAGE_SELECTED` action了.在`IMAGE_SELECTED`分支选项内,我们在展开(spreading,ES6的对象操作方法),并重写`selectedImage`属性后,返回一个新state对象.了解更多的`...state`对象操作可以看`ruanyifeng`的书.\n  \n  ```\n   import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n\nexport class Gallery extends Component {\n-  constructor(props) {\n-    super(props);\n-    this.props.dispatch({type: 'TEST'});\n-    console.log(props);\n-  }\n  render() {\n-    const {images, selectedImage} = this.props;\n+    const {images, selectedImage, dispatch} = this.props;\n\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index}>\n+            <div key={index} onClick={() => dispatch({type:'IMAGE_SELECTED', image})}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    images: state.images,\n    selectedImage: state.selectedImage\n  }\n}\n\nexport default connect(mapStateToProps)(Gallery)\n  ```\n  ___\n  在`Gallery`组件中,我们将会在组件的属性中定义`dispatch`在`onClick`函数体中调用他,现在我们从便利角度考虑把他们放在一起,但是两者功能是一样的.一旦我们点击了缩略图,他将会通过reducer更新大图.\n 使用dispatch可以很方便的创建通用actions,但是很快我们会需要重用命名好的actions.为了这样做,可以使用”action creators”.\n \n ####Action Creators\n Action creators函数返回配置好的action对象.我们在`action.js`中添加第一个action creator.\n \n action.js\n ```\n export const IMAGE_SELECTED = 'IMAGE_SELECTED';\n\nexport function selectImage(image) {\n  return {\n    type: IMAGE_SELECTED,\n    image\n  }\n}\n ``` \n ___\n 这个方法经过export以后,可以直接在任何需要创建`selectImage` action地方导入!`selectImage`是纯函数，只能返回数据.他接收一个image作为参数,把image添加到action对象中，并返回.\n \n >注意:我们正在返回一个单纯的javascript object,但是`image`的属性可能很古怪，如果你以前没有碰到这样的样式.从ES6的角度出发,如果你给一个对象传递一个类似这样的属性,隐含的意思是把`image:'任何image包含的值'`添加到最终返回的对象.超级好用!\n \n ```\n import  * as GalleryActions from './actions.js';\n[...]\nonClick={() => dispatch(GalleryActions.selectImage(image))}\n ```\n ___\n this isn’t much than just using `dispatchti` though.\n \n 幸运的是,这个模式很普遍,Redux在`bindActionCreators`函数里提供了一个更好的办法来完成这个功能.\n \n ```\n import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n+ import {bindActionCreators} from 'redux';\n\n+ import  * as GalleryActions from './actions.js';\n\nexport class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.props.dispatch({type: 'TEST'});\n    console.log(props);\n  }\n  handleThumbClick(selectedImage) {\n    this.setState({\n      selectedImage\n    })\n  }\n  render() {\n-    const {images, selectedImage, dispatch} = this.props;\n+    const {images, selectedImage, selectImage} = this.props;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index} onClick={() => dispatch({type:'IMAGE_SELECTED', image})}>\n+            <div key={index} onClick={() => selectImage(image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    images: state.images,\n    selectedImage: state.selectedImage\n  }\n}\n\n+function mapActionCreatorsToProps(dispatch) {\n+  return bindActionCreators(GalleryActions, dispatch);\n+}\n\n-export default connect(mapStateToProps)(Gallery)\n+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)\n ```\n ___\n 我们已经添加了`mapActionCreatorsToProps`函数,他接收`dispatch`函数作为参数.返回`bindActionCreators`的调用结果,`GalleryActions`作为`bindActionCreators`的参数.现在如果你输出属性日志,就看不到`dispatch`作为参数,`selectImage`直接可以使用了.(这里相当于对dispatch和action进行了包装).\n \n 现在回顾一下,我们做了几件事:\n - 创建了一个reducer包含应用的默认初始状态(initial state),并且监听actions的执行.\n - 创建了一个store,把reducer具体化,提供一个分发器(dispatcher)可以分发action.\n - 把我们的Gallery组件关联到store的state.\n - 把store的state映射为属性(property)，传递给Gallery.\n - 映射一个动作创建器,Gallery可以简单的调用`selectImage(image)`,分发动作,应用状态将会更新.\n\n\n\n那么，我们怎么才能使用这些模式从远程资源加载数据呢？\n\n这个过程将会非常有趣!\n\n####异步活动？\n\n---\n你可能在参加函数式编程的时候听说过”副作用”(side effects)这个名词,side effects是发生在应用的范围之外的东西.在我们舒适的肥皂泡里,side effect根本不是问题,但是当我们要到达一个远程资源,肥皂泡就被穿透了.有些事情我们就控制不了了,我们必须接受这个事实.(根据这段话，side effect 翻译为意想不到的事情，出乎意料的不受控制的事情更好)\n\n在Redux里,reducer没有Side effects.这意味着reducers不处理我们应用中的异步活动.我们不能使用reducers加载远程数据,因为reducers是纯函数,没有side effects.\n\nRedux很棒,如果你的应用里没有任何异步活动，你可以停下来,不用再往下看了.\n如果你创建的应用比较大,可能你会从服务端加载数据,这时,当然要使用异步方式.\n\n>**注意**： Redux其中一个最酷的地方是他非常小巧.他试图解决有限范围内的问题.大多数的应用需要解决很多问题!万幸,Reduc提供中间件概念,中间件存在于action->reducer->store的三角关系中,通过中间件的方式,可以导入诸如远程数据异步加载类似的功能.\n\n\n其中一个方法是使用`thunks`对象,在Redux中有 redux-thunk 中间件.Thunks非常厉害，但是可能会导致actions的序列很复杂,测试起来也是很大的挑战.\n\n考虑到我们的 图片浏览程序.当应用加载是,需要做:\n- 从服务器请求图片数组\n- 当图片加载完毕,显示提示消息\n- 当远程数据返回以后,选择初始图片显示\n- 处理可能出现的错误\n\n\n\n这些事件都要在用户点击应用里的任何元素之前完成!\n我们该怎么做呢？\nredux-saga就是为此而诞生,为我们的应用提供绝佳的服务.\n\nredux-sage\n___\nredux-sage可以在Redux应用中操作异步actions.他提供中间件和趁手的方法使构建复杂的异步操作流程轻而易举.\n\n一个saga是一个Generator(生成器),Generator函数是ES2015新添加的特性.可能是你第一次遇到Generator函数,这样你会觉得有点古怪,可以参考(ruanyifeng文章).不要苦恼，如果你对此仍然很抓耳挠腮.使用redux-sage你不需要javascript异步编程的博士学位.\n\n因为使用了generators的缘故,我们能创建一个顺序执行的命令序列，用来描述复杂的异步操作流程(workflows).整个图片的加载流程序列如下：\n\n  ```\n   export function* loadImages() {\n  try {\n    const images = yield call(fetchImages);\n    yield put({type: 'IMAGES_LOADED', images})\n    yield put({type: 'IMAGE_SELECTED', image: images[0]})\n  } catch(error) {\n    yield put({type: 'IMAGE_LOAD_FAILURE', error})\n  }\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield call(loadImages);\n  }\n}  \n   ```\n   ___\n   \n####第一个saga\n\n我们将开始一个简单的saga实例,然后配置他连接到我们的应用.在`src`创建一个文件\n`saga.js`\n\n  ```\n   export function* sayHello() {\n  console.log('hello');\n}\n  ```\n  ___\n  我们的saga是一个简单的generator函数.函数后面的`*`作为标志,他也被叫做”super star”.\n  \n  现在在`main.js`文件中导入新函数,并且执行他.\n  \n  ```\n  import \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore } from 'redux'\nimport {Provider} from 'react-redux';\nimport reducer from './reducer'\n\n+import {sayHello} from './sagas';\n+sayHello();\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n___\n\n不管你盯住终端多长时间,“hello”永远不会出现.\n这是因为`sayHello`是一个generator！Generator 不会立即执行.如果你把代码该为`sayHello().next();`你的“hello”就出现了.不用担心,我们不会总是调用`next`.正如Redux,redux-saga用来消除应用开发中的痛苦.\n\n配置 redux-sage\n___\n  ```\n   import \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\n-import { createStore } from 'redux'\n+import { createStore, applyMiddleware } from 'redux'\n+import createSagaMiddleware from 'redux-saga'\nimport {Provider} from 'react-redux';\nimport reducer from './reducer'\n\nimport {sayHello} from './sagas';\n-sayHello()\n\n-const store = createStore(reducer);\n+const store = createStore(\n+  reducer,\n+  applyMiddleware(createSagaMiddleware(sayHello))\n+);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n  ___\n  我们已从Redux导入了`applyMiddleware`函数.从redux-saga导入`createSagaMiddleware`函数.当我们创建store的时候,我们需要通过中间件提供Redux需要的功能.在这个实例中,我们会调用`applyMiddleware`函数,这个函数返回`createSagaMiddleware(sayHello)`的结果.在幕后,redux-saga加载`sayHello`函数,仪式性的调用`next`函数.\n  \n  应该可以在终端中看到提示消息了.\n  现在让我们构建加载图片的saga\n  \n####通过Saga加载图片数据\n___\n我们将删除出sayHello saga,使用`loadImages` saga\n\n ```\n  -export function* sayHello() {\n-  console.log('hello');\n-}\n\n+export function* loadImages() {\n+  console.log('load some images please')\n+}\n```  \n___\n不要忘了更新`main.js`\n  ```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore, applyMiddleware } from 'redux'\nimport {Provider} from 'react-redux';\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './reducer'\n\n-import {sayHello} from './sagas';\n+import {loadImages} from './sagas';\n\nconst store = createStore(\n  reducer,\n-  applyMiddleware(createSagaMiddleware(sayHello))\n+  applyMiddleware(createSagaMiddleware(loadImages))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n  ___\n  现在saga已经加载,在`saga.js`中添加`fetchImages`方法\n  \n   ```\n     const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\nconst API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\nconst fetchImages = () => {\n  return fetch(API_ENDPOINT).then(function (response) {\n    return response.json().then(function (json) {\n      return json.photos.photo.map(\n        ({farm, server, id, secret}) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n      );\n    })\n  })\n};\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  console.log(images)\n}\n   ```\n___\n\n\n `fetchImages`方法返回一个promise对象.我们将调用`fetchImages`,但是现在我们要使用`yield`关键字.通过黑暗艺术和巫术,generators理解Promise对象,正如终端输出的日志显示,我们已经收获了一个图片URLs的数组.看看`loadImages`的代码,他看起来像是典型的同步操作代码.`yield`关键字是秘制调味酱,让我们的代码用同步格式执行异步操作活动.\n ___\n \n ####封装我们的异步API请求.\n \n 首先来定义一下需要使用的api.他没有什么特殊的地方,实际上他和早先加载Flickr images的代码是相同的.我们创建`flickr.js`文件\n \n ```\n   const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\nconst API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\nexport const fetchImages = () => {\n  return fetch(API_ENDPOINT).then(function (response) {\n    return response.json().then(function (json) {\n      return json.photos.photo.map(\n        ({farm, server, id, secret}) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n      );\n    })\n  })\n};\n ```\n ___\n \n\n严格意义上来说,不需要这么做,但是这会带来一定的好处.我们处在应用的边缘(boundaries of our application,意思是说在这里的代码可能是很多和远程服务器交互的代码，可能逻辑会很复杂),事情都有点乱.通过封装和远程API交互的逻辑,我们的代码将会很整洁,很容易更新.如果需要抹掉图片服务也会出奇的简单.\n\n我们的`saga.js`看起来是这个样子：\n ```\n  import {fetchImages} from './flickr';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  console.log(images)\n}\n``` \n___\n我们仍然需要在saga外获取数据,并且进入应用的state(使用异步获取的远程数据更新state).为了处理这个问题,我们将使用”effects”.\n\n####从saga来更新应用\n\n我们可以通过`dispatch`或者store作为参数来调用saga,但是这个方法时间一长就会给人造成些许的困扰.我们选择采用redux-saga提供的`put`方法.\n首先我们更新`reducer.js`操作一个新的action类型`IMAGES_LOADED`.\n  ```\nconst defaultState = {\n+  images: []\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'IMAGE_SELECTED':\n      return {...state, selectedImage: action.image};\n+    case 'IMAGES_LOADED':\n+      return {...state, images: action.images};\n    default:\n      return state;\n  }\n}     \n  ```\n  \n  ___\n  我们添加了新的分支,并从`defaultState`中删除了硬编码的URLs数据.`IMAGES_LOADED`分支现在返回一个更新的state,包含action的image数据.\n  下一步我们更新saga:\n   ```\n\t import {fetchImages} from './flickr';\n+import {put} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n+  yield put({type: 'IMAGES_LOADED', images})\n}\n```\n___\n\n导入`put`以后,我们在`loadImages`添加另外一行.他`yield` `put`函数调用的返回结果.在幕后,redux-saga 分发这些动作,reducer接收到了消息!\n\t   怎样才能使用特定类型的action来触发一个saga?\n\t   \n####使用actions来触发saga工作流\n___\nSagas变得越来越有用,因为我们有能力使用redux actions来触发工作流.当我们这样做,saga会在我们的应用中表现出更大的能力.首先我们创建一个新的saga.`watchForLoadImages`.\n```\nimport {fetchImages} from './flickr';\n-import {put} from 'redux-saga/effects';\n+import {put, take} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  yield put({type: 'IMAGES_LOADED', images})\n}\n\n+export function* watchForLoadImages() {\n+  while(true) {\n+    yield take('LOAD_IMAGES');\n+    yield loadImages();\n+  }\n+}\n\t  ```\n  ___\n新的saga使用的是while来保持一直激活和等待调用状态.在循环的内部,我们生成(yield)一个redux-sage调用方法:`take`.Take方法监听任何类型的actions,他也会使saga接受下一个yield.在上面的例子中我们调用了一个方法`loadImages`,初始化图片加载.\n\n```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore, applyMiddleware } from 'redux'\nimport {Provider} from 'react-redux';\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './reducer'\n\n-import {loadImages} from './sagas';\n+import {loadImages} from './watchForLoadImages';\n\nconst store = createStore(\n  reducer,\n-  applyMiddleware(createSagaMiddleware(loadImages))\n+  applyMiddleware(createSagaMiddleware(watchForLoadImages))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n___\n更新了`main.js`以后,应用不再加载图片,我们需要在action creators中添加`loadImages`的`action`.\n```\nexport const IMAGE_SELECTED = 'IMAGE_SELECTED';\n+const LOAD_IMAGES = 'LOAD_IMAGES';\n\nexport function selectImage(image) {\n  return {\n    type: IMAGE_SELECTED,\n    image\n  }\n}\n\n+export function loadImages() {\n+  return {\n+    type: LOAD_IMAGES\n+  }\n+}\n```\n___\n因为我们已经绑定了action creators(Action创建器),我们只需要在`Gallery`组件中调用这个action就可以了.\n\n####block(阻塞)和no-blocking(非阻塞)效应\n现在我们的引用工作的足够好了,但是可能还有更多的问题需要考虑.`watchForLoadImages` saga包含 block effects.那么这到底是什么意思呢？这意味着在工作流中我们只能执行一次`LOAD_IMAGES`!在诸如我们现在构建的小型应用一样,这一点不太明显,实际上我们也仅仅加载了一次图片集.\n实际上，普遍的做法是使用`fork` effect 代替  `yield` 来加载图片\n.\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n-    yield loadImages();\n+    yield fork(loadImages); //be sure to import it!\n  }\n}\n```\n\n___\n使用`fork`助手(helper)函数,`watchForLoadImages`就变成了非阻塞saga了,再也不用考虑他是不是以前掉用过.redux-sagas 提供两个helpers,`takeEvery`和`takeLastest`（takeEvery监听多次action，不考虑是不是同一种action type,takeLatest只处理同一种action type的最后一次调用）.\n####选择默认的图片\nSagas按照队列来执行acitons,所以添加更多的saga也很容易.\n```\nimport {fetchImages} from './flickr';\nimport {put, take, fork} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  yield put({type: 'IMAGES_LOADED', images})\n+  yield put({type: 'IMAGE_SELECTED', image: images[0]})\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield fork(loadImages);\n  }\n}\n```\n___\n在 `loadImages`工作流上,我们可以yield put函数调用,action type是`IMAGE_SELECTED`.发送我们选择的图片(在这个例子中，发送的仅仅是图片的url的字符串).\n####错误处理\n如果在saga循环内部出现错误,我们要考虑提醒应用做出合理的回应.所有流程包装到try/catch语句块里就可以实现,捕获错误以后`put`一个提示信息作为`IMAGE_LOAD_FAILURE` action的内容.\n\n```\nimport {fetchImages} from './flickr';\nimport {put, take, fork} from 'redux-saga/effects';\n\nexport function* loadImages() {\n+  try {\n    const images = yield fetchImages();\n    yield put({type: 'IMAGES_LOADED', images})\n    yield put({type: 'IMAGE_SELECTED', image: images[0]})\n+  } catch(error) {\n+    yield put({type: 'IMAGE_LOAD_FAILURE', error})\n+  }\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield fork(loadImages);\n  }\n}\n```\n___\n####Sagas的测试\n___\n在应用中使用Redux,测试变得相当的舒服. 看看我们的[鹅蛋头系列课程](https://egghead.io/series/react-testing-cookbook),可以了解到很多React的测试技术.\n使用Redux-saga在棒的一个方面就是异步代码测试很容易.测试javascript异步代码真是一件苦差事.有了saga,我们不需要跳出引用的核心代码.Saga把javascript的痛点都抹掉了.是不是意味着我们要写更多的测试?对的.\n\n我们会使用`tape`组件,首先做一些配置工作.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.end();\n});\n```\n___\n添加所有需要的组件,现在我们添加一个测试.这个测试接收一个名称和一个函数作为形参.在测试的函数体内部代码块,我们创建了一个saga生成器代码实例.在这个实例里面我们尅是测试saga的每一个动作.\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n+  assert.deepEqual(\n+    generator.next().value,\n+    false,\n+    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n+  );\n\n  assert.end();\n});\n```\n___\n`assert.deepEqual`方法接收两个值,检查一下他们是不是深度相同(js对象的概念).第一行代码是`generator.next().value`的调用,这个调用使生成器从暂停中恢复,得到值.下一个值单单是一个`false`.我想看到他失败,最后一个参数描述了测试期待的行为.\n在项目文件夹中命令行运行`npm test`看看结果:\n```\n  import test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n+  assert.deepEqual(\n+    generator.next().value,\n+    false,\n+    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n+  );\n\n  assert.end();\n});\n```\n___\n测试结果和预期的一样失败,结果有点意思.实际的结论是`{TAKE:'LOAD_IMAGES'}`,这是我们调用`take('LOAD_IMAGES')`受到的结果.实际上,我们的saga’可以yield一个对象来代替调用`take`.但是`take`添加了一些代码,让我们少敲些代码.\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n-    false\n+    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n  assert.end();\n});\n```\n___\n我们简单的调用`take`函数,就可以得到期待的结果了.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n+  assert.deepEqual(\n+    gen.next().value,\n+    false,\n+    'watchForLoadImages should call loadImages after LOAD_IMAGES action is received'\n+  );\n\n  assert.end();\n});\n```\n___\n下一个测试使我们确信`loadImages`saga在流程的下一个阶段会被自动调用.\n我们需要一个 false来检查结果.\n更新一下saga代码,yield一个`loadImages` saga:\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n+    yield loadImages();\n-    yield fork(loadImages); //be sure to import it!\n  }\n}\n```\n___\n现在运行测试,将会看到下面结果：\n```\n✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\n---------------------------------------------------------------------------------\n  operator: deepEqual\n  expected: |-\n    false\n  actual: |-\n    { _invoke: [Function: invoke] }\n```\n___\n哼！`{ _invoke: [Function: invoke] }`绝对不是我们yield take想要的结果.\n有问题.幸运的是redux-saga可以使用诸如`fork`一样的`effects`来解决这个问题.`fork`,`take`和其他的effect方法返容易满足测试要求的简单对象.这些effects返回的对象是一个指导redux-saga进行任务执行的集合.这一点对于测试来说非常的优雅,因为我们不用担心类似远程服务请求的副作用.有了redux-saga,我们把注意点放到请求执行的命令上.\n下面让我们更新一下saga,再一次使用`fork`.\n\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n-    yield loadImages();\n+    yield fork(loadImages);\n\n  }\n}\n```\n\n___\n这里使用`yield fork(loadImages)`直接代替`loadImages`.需要注意的是我们还没有执行`loadImages`,而是作为参数传递给`fork`.\n再次运行`npm test`.\n```\n✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\n---------------------------------------------------------------------------------\n  operator: deepEqual\n  expected: |-\n    false\n  actual: |-\n    { FORK: { args: [], context: null, fn: [Function: loadImages] } }\n```\n___\n结果得到了一个单纯对象而不是一个函数调用.函数在浏览器端也同时加载了,但是我们现在可以轻松的在saga 工作流里测试这个步骤.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n  assert.deepEqual(\n    generator.next().value,\n-    false,\n+    yield fork(loadImages),\n    'watchForLoadImages should call loadImages after LOAD_IMAGES action is received'\n  );\n\n  assert.end();\n});\n```\n___\n测试`loadImages`saga是一样的,只需要把`yield fetchImages`更新为`yield fork(fetchImages)`.\n```\ntest('loadImages', assert => {\n  const gen = loadImages();\n\n  assert.deepEqual(\n    gen.next().value,\n    call(fetchImages),\n    'loadImages should call the fetchImages api'\n  );\n\n  const images = [0];\n\n  assert.deepEqual(\n    gen.next(images).value,\n    put({type: 'IMAGES_LOADED', images}),\n    'loadImages should dispatch an IMAGES_LOADED action with the images'\n  );\n\n  assert.deepEqual(\n    gen.next(images).value,\n    put({type: 'IMAGE_SELECTED', image: images[0]}),\n    'loadImages should dispatch an IMAGE_SELECTED action with the first image'\n  );\n\n  const error = 'error';\n\n  assert.deepEqual(\n    gen.throw(error).value,\n    put({type: 'IMAGE_LOAD_FAILURE', error}),\n    'loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown'\n  );\n\n  assert.end();\n});\n```\n___\n特别注意最后一个`assert`.这个断言测试使用异常捕获代替生成器函数的next方法.另一个非常酷的地方是：可以传值.注意看代码,我们创建了`images`常量,并且传递到next函数.saga可以在接下来的任务序列中使用传递的值.\n 太棒了,这种方法是测试异步编程的程序员梦寐以求的技术.\n \n #####接下来做什么？\n ___\n \n 你可以[fork一下这个例子的代码](https://github.com/joelhooks/egghead-react-redux-image-gallery).\n \n 如果你想扩充这个应用,可以做一下几个方面的工作.\n- 做一个幻灯显示下一张要显示的图片\n- 允许使用者搜索Flickr图片\n- 添加其他提供图片的API\n- 允许用户选择喜欢的API进行搜索.\n\n我们仅仅和生成器碰了一下面,但是即便如此,希望在联合使用redux-saga library,Redux和React的时候给你一些帮助.","source":"_posts/使用React-Redux-redux-sage构建图片库-翻译.md","raw":"---\ntitle: 使用React,Redux,redux-sage构建图片库(翻译)\ndate: 2017-04-04 13:18:28\ncategories: 翻译\ntags: [Redux,saga]\n---\n\n>看到这篇文章[build an image gallery using redux saga](http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/)，觉得写的不错，长短也适中.  文后有[注释版的github代码库,请使用comment分枝](https://github.com/phpsmarter/egghead-react-redux-image-gallery/tree/comment). Flickr API可能需要有fQ的基本能力.可以使用google的翻译作为参考，这篇文章google翻译版的中文水平让我吃了一惊.\n翻译已经完成.\n\n___\n\n###使用React,Redux和reudx-saga构建一个图像浏览程序(翻译)\nJoel Hooks ,2016年3月\n\n#####构建一个图片长廊\n\n图像长廊是一个简单的程序，从Flicker API 加载图片URLs,允许用户查看图片详情。\n\n\n![Screen Shot 2016-03-20 at 3.42.17 PM-2.png](http://upload-images.jianshu.io/upload_images/2044710-b0d03ac095f09c55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240)\n\n\n\n后续我们会使用React,Redux和redux-saga.React作为核心框架，优势是虚拟dom(virtual-dom)的实现。Redux在程序内负责state的管理。最后，我们会使用redux-saga来执行javascript的异步操作步骤。\n\n我们会使用ES6(箭头函数，模块，和模板字符串)，所以我们首先需要做一些项目的配置工作。\n\n#####项目配置和自动化\n___\n如果要开始一个React项目，须有有一系列的配置选项。对于一个简单的项目，我想把配置选项尽可能缩减。考虑到浏览器的版本问题，使用Babel把ES6编译为ES5。\n\n首先使用npm init 创建一个`package.json`文件\n\npackage.json\n```javascript\n  {\n  \"name\": \"egghead-react-redux-image-gallery\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Redux Saga beginner tutorial\",\n  \"main\": \"src/main.js\",\n  \"scripts\": {\n    \"test\": \"babel-node ./src/saga.spec.js | tap-spec\",\n    \"start\": \"budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git\"\n  },\n  \"author\": \"Joel Hooks <joelhooks@gmail.com>\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"babel-polyfill\": \"6.3.14\",\n    \"react\": \"^0.14.3\",\n    \"react-dom\": \"^0.14.3\",\n    \"react-redux\": \"^4.4.1\",\n    \"redux\": \"^3.3.1\",\n    \"redux-saga\": \"^0.8.0\"\n  },\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.1.18\",\n    \"babel-core\": \"6.4.0\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-preset-react\": \"^6.1.18\",\n    \"babel-preset-stage-2\": \"^6.1.18\",\n    \"babelify\": \"^7.2.0\",\n    \"browserify\": \"^13.0.0\",\n    \"budo\": \"^8.0.4\",\n    \"tap-spec\": \"^4.1.1\",\n    \"tape\": \"^4.2.2\"\n  }\n}\n```\n___\n\n 有了`package.json`, 可以在项目文件夹命令行运行 `npm install` 安装程序需要的依赖项。\n \n .babelrc\n\n```\n{\n  \"presets\": [\"es2015\", \"react\", \"stage-2\"]\n   } \n```\n       \n___\n这个文件告诉babel,我们将会使用ES2015(ES6),React以及ES2106的stage-2的一些特征。\n\n`package.json`有两个标准的script脚本配置：`start`和`test`.现在我们想通过start脚本加载程序，start会使用`src`目录的一些文件，所以西药先创建`src`文件夹.在`src`文件夹添加下面的一些文：\nindex.html\n```\n   <!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>egghead: React Redux Image Gallery</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n<div class=\"title\">\n  ![](http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg)\n  <h3>Egghead Image Gallery</h3>\n</div>\n\n<div id=\"root\"></div>\n\n<script type=\"text/javascript\" src=\"build.js\"></script>\n</body>\n</html>\n \n ```\n    \n    \n ___\n ___\n\n\nmain.js\n\n\n```\nimport \"babel-polyfill\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(\n  <h1>Hello React!</h1>,\n  document.getElementById('root')\n);\n```\n\n___\n\nstyle.css\n  ```\n    body {\n    font-family: Helvetica, Arial, Sans-Serif, sans-serif;\n    background: white;\n}\n\n.title {\n    display: flex;\n    padding: 2px;\n}\n\n.egghead {\n    width: 30px;\n    padding: 5px;\n}\n\n.image-gallery {\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid darkgray;\n}\n\n.gallery-image {\n    height: 250px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.gallery-image img {\n    width: 100%;\n    max-height: 250px;\n}\n\n.image-scroller {\n    display: flex;\n    justify-content: space-around;\n    overflow: auto;\n    overflow-y: hidden;\n}\n\n.image-scroller img {\n    width: 50px;\n    height: 50px;\n    padding: 1px;\n    border: 1px solid black;\n}\n\n  ```\n  ___\n\n`index.html`文件加载`style.css`文件提供一些基本的布局样式，同时也加载`build.js`文件，这是一个生成出来的文件.`main.js`是一个最基础的React程序，他在`index.html`的`#root`元素中渲染一个`h1`元素。创建这些文件以后，在项目文件夹中命令行运行`npm start`。在浏览器打开`http://10.11.12.1:9966`.就可以看到`index.html`中渲染的页面\n\n![运行加载图](http://upload-images.jianshu.io/upload_images/2044710-b24265cbe5f89d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240)\n\n\n现在我们来构建基础的`Gallery` React 组件\n\n#####在Gallery中显示一些图片\n___\n\n 首先我们需要尽可能快的获得一个可以显示的图片素材.在项目文件夹中创建一个文件`Gallery.js`\n Gallery.js\n  ```\n    import React, {Component} from 'react'\n\nconst flickrImages = [\n  \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n  \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n  \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n  \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n  \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n];\n\nexport default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n            <div key={index}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n  ```\n  \n  ___\n  我们直接在组件中硬编码了一个提供数据的数组，让项目尽快的工作起来.`Gallery组件`继承`Component组件`,在构造函数中创建一些组件的出事状态.最后我们利用一些样式标记渲染一下文件。`image-scroller`元素遍历(`map`方法)图片数组,生成摘要小图片。\n  \n  ```\n    import \"babel-polyfill\"\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\n+ import Gallery from './Gallery'\n\nReactDOM.render(\n-  <h1>Hello React!</h1>,\n+  <Gallery />,\n  document.getElementById('root')\n);\n  ```\n  \n  到现在，我们使用硬编码的图片URLs(通过fickrImages)数组,第一张图片作为`selectedImage`.这些属性在`Gallery`组件的构造函数缺省配置中，通过初始状态(initial)来设定.\n\n  \n  接下来在组件中添加一个和组件进行交互操作的方法，方法具体内容是操做`setSate`.\n  Gallery.js\n  \n  ```\n     export default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n+  handleThumbClick(selectedImage) {\n+    this.setState({\n+      selectedImage\n+   })\n+  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index}>\n+            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n  ```\n___\n在`Gallery组件`添加`handleThumbClick`方法,任何元素都可用通过`onClick`属性调用这个方法.`image`作为第二个参数传递，元素自身作为第一个参数传递.bind方法传递javascript函数调用上下文对象是非常便捷。\n\n看起来不错!现在我们有了一些交互操作的方法，有点“APP”的意思了。截止目前，我们已经让app运行起来了，接下来要考虑怎么加载远程数据。最容易加载远程数据的地方是一个`React组件`生命周期方法,我们使用`componentDidMount`方法,通过他从`Flikr API`请求并加载一些图片.\n\nGallery.js\n ```\n   export default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: flickrImages,\n      selectedImage: flickrImages[0]\n    }\n  }\n+  componentDidMount() {\n+    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n+    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;+\n+\n+    fetch(API_ENDPOINT).then((response) => {\n+      return response.json().then((json) => {\n+        const images = json.photos.photo.map(({farm, server, id, secret}) => { \n+            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n+        });\n+\n+        this.setState({images, selectedImage: images[0]});\n+      })\n+    })\n+  }\n[...]\n ```\n___\n我们在`Gallery`类中添加了一个新的方法,通过React的`componentDidMount`生命周期方法触发Flickr图片数据的获取。\n\n在`React`组件运行的不同时间点，组件会调用不同的生命周期函数。在这段代码中，当组件被渲染到`DOM`中的时间点,`componentDidMount`函数就会被调用。需要注意的是:`Gallery`组件只有一次渲染到`DOM`的机会，所以这个函数可以提供一些初始化图片.考虑到在APP的整个生命周期中,有更多的动态组件的加载和卸载,这可能会造成一些多余的调用和无法考虑到的结果。\n\n我们使用浏览器接口(browser API)的`fetch`方法执行请求.Fetch返回一个promise对象解析`response`对象.调用`response.json()`方法,返回另一个promise对象，这就是我们实际需要的`json`格式的数据.遍历这个对象以后就可以获取图片的url地址.\n\n>坦白讲，这个应用目前还很简单.我们还需要在这里花费更多的时间，还有一些基础的需求需要完成.或许我们应该在promise处理流程中添加错误处理方法,如果图片数据获取成功也需要一些处理逻辑.在这个地方，你需要发挥一些想象力考虑一下更多的逻辑.在生产实践中简单的需求是很少见的.很快,应用中就会添加更多的需求。认证,滚动橱窗,加载不同图片库的能力和图片的设置等等.仅仅这些还远远不够.\n\n我们已经使用`React`构建了一个加载图片库的程序。接下来我们需要考虑到随着程序功能的添加，到底需要哪些基础的模式.首先考虑到的一个问题就是要把应用的状态(state)控制从`Gallery`组件中分离出来.\n\n我们通过引入`Redux`来完成应用的状态管理工作。\n\n#####使用`Redux`来管理状态\n___\n在你的应用中只要使用了`setState`方法都会让一个组件从无状态变为有状态的组件.糟糕的是这个方法会导致应用中出现一些令人困惑的代码,这些代码会在应用中到处蔓延。\n\n`Flux`构架来减轻这个问题.`Flux`把逻辑(logic)和状态(state)迁移到`Store`中.应用中的动作(`Actions`)被`Dispatch`的时候,`Stores`\n会做相应的更新.`Stores`的更新会触发`View`根据新状态的渲染.\n\n那么我们为什么要舍弃`Flux`?他竟然还是“官方”构建的.\n好吧！`Redux`是基于`Flux`构架的,但是他有一些独特的优势.下面是Dan Abramov(Redux创建者)的一些话：\n>Redux和Flux没有什么不同.总体来讲他们是相同的构架,但是Redux通过功能组合把Flux使用回调注册的复杂点给屏蔽掉了.\n两个构架从更本上讲没有什么不同，但是我发现Redux使一些在Flux比较难实现的逻辑更容易实现.\n\n\n[Redux文档](http://cn.redux.js.org/index.html)非常棒.\n如果你还没有读过代码的卡通教程或者Dan的系列文章.赶快去看看吧！\n\n#####启动Redux\n\n第一件需要做的事事初始化`Redux`,让他在我们的程序中运行起来.现在不需要做安装工作，刚开始运行`npm install`的时候已经安装好了依赖项，我们需要做一些导入和配置工作.\n**reducer函数是Redux的大脑.** 每当应用分发(或派遣,dispatch)一个操作(action)的时候,`reducer`函数会接受操作(action)并且依据这个动作(action)创建`reducer`自己的`state`.因为`reducers`是纯函数，他们可以组合到一起，创建应用的`一个完整state`.让我们在`src`中创建一个简单的reducer:\nreducer.js\n \n ```\n   export default function images(state, action) {\n      console.log(state, action)\n      return state;\n   }\n ```\n ___\n 一个reducer函数接受两个参数(arguments).\n   1. [x] `state`-这个数据代表应用的状态(state).reducer函数使用这个状态来构建一个reducer自己可以管理的状态.如果状态没有发生改变,reducer会返回输入的状态.\n   2. [x]  `action`-这是触发reducer的事件.Actions通过store派发(dispatch),由reducer处理.action需要一个`type`属性来告诉reducer怎么处理state.\n\n目前,`images` reuducer在终端中打印出日志记录，表明工作流程是正常的，可以做接下来的工作了.为了使用reducer，需要在`main.js`中做一些配置工作:\nmain.js\n  ```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\n+ import { createStore } from 'redux'\n+ import reducer from './reducer'\n\n+ const store = createStore(reducer);\n\n+ import {Provider} from 'react-redux';\n\nReactDOM.render(\n+  <Provider store={store}>\n    <Gallery />\n+  </Provider>,\n  document.getElementById('root')\n);\n}\n ```\n ___\n \n 我们从`Redux`库中导入`createStore`组件.`creatStore`用来创建Redux的store.大多数情况下,我们不会和store直接交互,store在Redux中做幕后管理工作.\n\n 也需要导入刚才创建的reducer函数,以便于他可以被发送到store.\n 我们将通过`createStore(reducer)`操作，利用reducer来配置应用的store.这个示例仅仅只有一个reducer,但是`createStore`可以接收多个reducer作为参数.稍后我们会看到这一点.\n \n 最后我们导入高度集成化的组件`Provider`,这个组件用来包装`Gallery`,以便于我们在应用中使用Redux.我们需要把刚刚创建的store传递给`Provider`.你也可以不使用`Provider`,实际上Redux可以不需要React.但是我们将会使用`Provider`,因为他非常便于使用.\n \n \n\n![打印日志](http://upload-images.jianshu.io/upload_images/2044710-6667a047b669d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)\n\n 这张图可能有点古怪，但是展示了Redux的一个有意思的地方.所有的reducers接收在应用中的全部actions(动作或操作).在这个例子中我们可以看到Redux自己派发的一个`action`.\n #####连接Gallery组件\n \n 借助Redux,我们将使用”connected”和“un-connected”组件.一个`connected`组件被连线到store.`connected`组件使控制动作事件(controls action event)和store协作起来.通常,一个`connected`组件有子组件,子组件具有单纯的接收输入和渲染功能，当数据更新时执行调用.这个子组件就是unconnected组件.\n >提示:当Rect和Redux配合是工作的非常好,但是Redux不是非要和React在一起才能工作.没有React,Redux其实可以和其他框架配合使用.\n \n \n在应用中需要关联`React组件`和`Redux Store` 的时候，`react-redux`提供了便捷的包装器.我们把react-redux添加进`Gallery`中\n,从而使`Gallery`成为首要的关联组件.\n\nGallery.js\n ```\n  import React, {Component} from 'react'\n+import {connect} from 'react-redux';\n\n-export default class Gallery extends Component {\n+export class Gallery extends Component {\n  constructor(props) {\n    super(props);\n+    console.log(props);\n    this.state = {\n      images: []\n    }\n  }\n  componentDidMount() {\n    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\n    fetch(API_ENDPOINT).then((response) => {\n      return response.json().then((json) => {\n        const images = json.photos.photo.map(({farm, server, id, secret}) => {\n            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n        });\n\n        this.setState({images, selectedImage: images[0]});\n      })\n    })\n  }\n  handleThumbClick(selectedImage) {\n    this.setState({\n      selectedImage\n    })\n  }\n  render() {\n    const {images, selectedImage} = this.state;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n+export default connect()(Gallery)\n ```\n___\n从`react-redux`导入`connect`函数,可以在导出组件的时候把他变为链接组件(connected component).请注意,`connect()(Gallery)`代码把`Gallery`组件放在第二个形参中,这是因为`connect()`返回一个函数，这个函数接受一个React组件作为参数(argument).调用`connect()`函数时需要配置项.后面我们将会传递配置我们应用的actions和state参数.\n我们也把`connect`作为默认配置到处模块.这一点非常重要！现在当我们`import Gallery`的时候,就不是一个单纯的React组件了,而是一个和Redux关联的组件了.\n\n\n\n![](http://upload-images.jianshu.io/upload_images/2044710-72a9136f9b481bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620)\n\n如果你观察我们添加进构造器的`console.log`的输出,就可以看到`Gallery`组件的属性现在包括了一个`dispatch`函数.这个地方是`connect`为我们的应用修改的,这个改动赋予了组件把自己的动作对象(action objects)`派发`到`reducers`的能力.\n\n  ```\n    export class Gallery extends Component {\n  constructor(props) {\n    super(props);\n+    this.props.dispatch({type: 'TEST'});\n    this.state = {\n      images: []\n    }\n  }\n[...]\n  ```\n___\n我们可以在组件的构造器中调用派发功能.你可以在开发者的终端中看到来自reducer的日志声明.看到声明表示我们已经派发了第一个action!.Actions是一个单一的javascript对象,必需有`type`属性.Actions可以拥有任意数量和种类的其他属性.但是`type`可以让reducers理解这些动作到底是做什么用的(意译，意思是只有拥有type属性，reducers才知道对state做什么样的修改).\n\n  ```\nexport default function images(state, action) {\n-  console.log(state, action)\n+  switch(action.type) {\n+    case 'TEST':\n+      console.log('THIS IS ONLY A TEST')\n+  }\n  return state;\n}\n  ```\n  ___\n \n 总的reducers使用`switch代码块`过滤有关的消息,`Switch`语句使用actions的type属性,当一个`action`和`case`分支吻合以后,相应的单个reducer就会执行他的具体工作.\n \n 我们的应用现在关联到接收的动作.现在我们需要把`Redux`-`Store`提供的`state`关联到应用中.\n \n ####默认的应用状态(state)\n reducer.js\n ```\n  const defaultState = {\n  images: []\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'TEST':\n-      console.log('THIS IS ONLY A TEST')\n+      console.log(state, action)\n+      return state;\n+    default:\n+      return state;\n  }\n-  return state;\n}\n \n ```\n 我们创建一个`defaultState`对象,这个对象返回一个空数组作为images的属性.我们把`images`函数的参数`state`设置为默认.如果在test分支中输出日志,将会看到state不是undefined(空数组不是undefined)!reducer需要返回应用的当前state.这点很重要!现在我们没有做任何改变,所以仅仅返回state.注意我们在`case`中添加了default分支,reducer必须要返回一个state.\n \n在`Gallery`组件中，我们也可以把state做一定的映射(map)以后再连接到应用.\n \n ```\n  import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n\nexport class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.props.dispatch({type: 'TEST'});\n+    console.log(props);\n-    this.state = {\n-      images: []\n-    }\n  }\n-  componentDidMount() {\n-    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\n-    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;-\n-\n-    fetch(API_ENDPOINT).then((response) => {\n-      return response.json().then((json) => {\n-        const images = json.photos.photo.map(({farm, server, id, secret}) => { \n-            return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n-        });\n-\n-        this.setState({images, selectedImage: images[0]});\n-      })\n-    })\n-  }\n-  handleThumbClick(selectedImage) {\n-    this.setState({\n-      selectedImage\n-    })\n-  }\n  render() {\n-    const {images, selectedImage} = this.state;\n+    const {images, selectedImage} = this.props;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index} onClick={this.handleThumbClick.bind(this,image)}>\n+            <div key={index}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n+function mapStateToProps(state) {\n+  return {\n+    images: state.images\n+    selectedImage: state.selectedImage\n+  }\n+}\n\n-export default connect()(Gallery)\n+export default connect(mapStateToProps)(Gallery)\n\n ``` \n ___\n \n  我们将移除连接组件中的所有图片加载和交互逻辑代码,如果你注意看`Gallery`组件的底部代码,你会注意到，我们创建了一个`mapStateToProps`函数,接收一个`state`作为参数,返回一个对象,把`state.images`映射为`images`属性.`mapStateToProps`做为参数传递给`connect`.\n  正如名字暗示的一样,`mapStateToProps`函数接收当前应用的state,然后把state转变为组件的属性(propertys).如果在构造器中输出props,将会看到images数组是`reducer`返回的默认state.\n  \n  ```\n   const defaultState = {\n-  images: []\n+  images: [\n+    \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n+    \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n+    \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n+    \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n+    \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n+  ],\n+  selectedImage: \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'TEST':\n      console.log(state, action)\n      return state;\n    default:\n      return state;\n  }\n}\n  ```\n  ___\n  \n  如果在`defaultState`中更新images数组,你将可以看到一些图片重新出现在gallery中!现在当用户点击缩略图的时候,我们可以反馈选择动作,返回对应的大图.\n  \n  ####更新state\n  怎么操作才能根据新选择的图片更新state?\n  需要配置reducer监听`IMAGE_SELECTED`动作,借助action携带的信息(payload,有的文章翻译为载荷,载荷怎么理解？手机载荷就是声音，短信和流量数据。如果是卡车就是拉的货物,如果是客车就乘载的乘客,action的载荷就是要让reducer明白你要干什么，需要什么)来更新state.\n  ```\n  const defaultState = {\n  images: [\n    \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\",\n    \"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\",\n    \"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\",\n    \"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\",\n    \"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"\n  ],\n  selectedImage: \"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n-    case 'TEST':\n    case 'IMAGE_SELECTED':\n-      return state;\n+      return {...state, selectedImage: action.image};\n    default:\n      return state;\n  }\n}\n    ```\n  ___\n  现在reducer已经准备接收`IMAGE_SELECTED` action了.在`IMAGE_SELECTED`分支选项内,我们在展开(spreading,ES6的对象操作方法),并重写`selectedImage`属性后,返回一个新state对象.了解更多的`...state`对象操作可以看`ruanyifeng`的书.\n  \n  ```\n   import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n\nexport class Gallery extends Component {\n-  constructor(props) {\n-    super(props);\n-    this.props.dispatch({type: 'TEST'});\n-    console.log(props);\n-  }\n  render() {\n-    const {images, selectedImage} = this.props;\n+    const {images, selectedImage, dispatch} = this.props;\n\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index}>\n+            <div key={index} onClick={() => dispatch({type:'IMAGE_SELECTED', image})}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    images: state.images,\n    selectedImage: state.selectedImage\n  }\n}\n\nexport default connect(mapStateToProps)(Gallery)\n  ```\n  ___\n  在`Gallery`组件中,我们将会在组件的属性中定义`dispatch`在`onClick`函数体中调用他,现在我们从便利角度考虑把他们放在一起,但是两者功能是一样的.一旦我们点击了缩略图,他将会通过reducer更新大图.\n 使用dispatch可以很方便的创建通用actions,但是很快我们会需要重用命名好的actions.为了这样做,可以使用”action creators”.\n \n ####Action Creators\n Action creators函数返回配置好的action对象.我们在`action.js`中添加第一个action creator.\n \n action.js\n ```\n export const IMAGE_SELECTED = 'IMAGE_SELECTED';\n\nexport function selectImage(image) {\n  return {\n    type: IMAGE_SELECTED,\n    image\n  }\n}\n ``` \n ___\n 这个方法经过export以后,可以直接在任何需要创建`selectImage` action地方导入!`selectImage`是纯函数，只能返回数据.他接收一个image作为参数,把image添加到action对象中，并返回.\n \n >注意:我们正在返回一个单纯的javascript object,但是`image`的属性可能很古怪，如果你以前没有碰到这样的样式.从ES6的角度出发,如果你给一个对象传递一个类似这样的属性,隐含的意思是把`image:'任何image包含的值'`添加到最终返回的对象.超级好用!\n \n ```\n import  * as GalleryActions from './actions.js';\n[...]\nonClick={() => dispatch(GalleryActions.selectImage(image))}\n ```\n ___\n this isn’t much than just using `dispatchti` though.\n \n 幸运的是,这个模式很普遍,Redux在`bindActionCreators`函数里提供了一个更好的办法来完成这个功能.\n \n ```\n import React, {Component} from 'react'\nimport {connect} from 'react-redux';\n+ import {bindActionCreators} from 'redux';\n\n+ import  * as GalleryActions from './actions.js';\n\nexport class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.props.dispatch({type: 'TEST'});\n    console.log(props);\n  }\n  handleThumbClick(selectedImage) {\n    this.setState({\n      selectedImage\n    })\n  }\n  render() {\n-    const {images, selectedImage, dispatch} = this.props;\n+    const {images, selectedImage, selectImage} = this.props;\n    return (\n      <div className=\"image-gallery\">\n        <div className=\"gallery-image\">\n          <div>\n            <img src={selectedImage} />\n          </div>\n        </div>\n        <div className=\"image-scroller\">\n          {images.map((image, index) => (\n-            <div key={index} onClick={() => dispatch({type:'IMAGE_SELECTED', image})}>\n+            <div key={index} onClick={() => selectImage(image)}>\n              <img src={image}/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    images: state.images,\n    selectedImage: state.selectedImage\n  }\n}\n\n+function mapActionCreatorsToProps(dispatch) {\n+  return bindActionCreators(GalleryActions, dispatch);\n+}\n\n-export default connect(mapStateToProps)(Gallery)\n+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)\n ```\n ___\n 我们已经添加了`mapActionCreatorsToProps`函数,他接收`dispatch`函数作为参数.返回`bindActionCreators`的调用结果,`GalleryActions`作为`bindActionCreators`的参数.现在如果你输出属性日志,就看不到`dispatch`作为参数,`selectImage`直接可以使用了.(这里相当于对dispatch和action进行了包装).\n \n 现在回顾一下,我们做了几件事:\n - 创建了一个reducer包含应用的默认初始状态(initial state),并且监听actions的执行.\n - 创建了一个store,把reducer具体化,提供一个分发器(dispatcher)可以分发action.\n - 把我们的Gallery组件关联到store的state.\n - 把store的state映射为属性(property)，传递给Gallery.\n - 映射一个动作创建器,Gallery可以简单的调用`selectImage(image)`,分发动作,应用状态将会更新.\n\n\n\n那么，我们怎么才能使用这些模式从远程资源加载数据呢？\n\n这个过程将会非常有趣!\n\n####异步活动？\n\n---\n你可能在参加函数式编程的时候听说过”副作用”(side effects)这个名词,side effects是发生在应用的范围之外的东西.在我们舒适的肥皂泡里,side effect根本不是问题,但是当我们要到达一个远程资源,肥皂泡就被穿透了.有些事情我们就控制不了了,我们必须接受这个事实.(根据这段话，side effect 翻译为意想不到的事情，出乎意料的不受控制的事情更好)\n\n在Redux里,reducer没有Side effects.这意味着reducers不处理我们应用中的异步活动.我们不能使用reducers加载远程数据,因为reducers是纯函数,没有side effects.\n\nRedux很棒,如果你的应用里没有任何异步活动，你可以停下来,不用再往下看了.\n如果你创建的应用比较大,可能你会从服务端加载数据,这时,当然要使用异步方式.\n\n>**注意**： Redux其中一个最酷的地方是他非常小巧.他试图解决有限范围内的问题.大多数的应用需要解决很多问题!万幸,Reduc提供中间件概念,中间件存在于action->reducer->store的三角关系中,通过中间件的方式,可以导入诸如远程数据异步加载类似的功能.\n\n\n其中一个方法是使用`thunks`对象,在Redux中有 redux-thunk 中间件.Thunks非常厉害，但是可能会导致actions的序列很复杂,测试起来也是很大的挑战.\n\n考虑到我们的 图片浏览程序.当应用加载是,需要做:\n- 从服务器请求图片数组\n- 当图片加载完毕,显示提示消息\n- 当远程数据返回以后,选择初始图片显示\n- 处理可能出现的错误\n\n\n\n这些事件都要在用户点击应用里的任何元素之前完成!\n我们该怎么做呢？\nredux-saga就是为此而诞生,为我们的应用提供绝佳的服务.\n\nredux-sage\n___\nredux-sage可以在Redux应用中操作异步actions.他提供中间件和趁手的方法使构建复杂的异步操作流程轻而易举.\n\n一个saga是一个Generator(生成器),Generator函数是ES2015新添加的特性.可能是你第一次遇到Generator函数,这样你会觉得有点古怪,可以参考(ruanyifeng文章).不要苦恼，如果你对此仍然很抓耳挠腮.使用redux-sage你不需要javascript异步编程的博士学位.\n\n因为使用了generators的缘故,我们能创建一个顺序执行的命令序列，用来描述复杂的异步操作流程(workflows).整个图片的加载流程序列如下：\n\n  ```\n   export function* loadImages() {\n  try {\n    const images = yield call(fetchImages);\n    yield put({type: 'IMAGES_LOADED', images})\n    yield put({type: 'IMAGE_SELECTED', image: images[0]})\n  } catch(error) {\n    yield put({type: 'IMAGE_LOAD_FAILURE', error})\n  }\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield call(loadImages);\n  }\n}  \n   ```\n   ___\n   \n####第一个saga\n\n我们将开始一个简单的saga实例,然后配置他连接到我们的应用.在`src`创建一个文件\n`saga.js`\n\n  ```\n   export function* sayHello() {\n  console.log('hello');\n}\n  ```\n  ___\n  我们的saga是一个简单的generator函数.函数后面的`*`作为标志,他也被叫做”super star”.\n  \n  现在在`main.js`文件中导入新函数,并且执行他.\n  \n  ```\n  import \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore } from 'redux'\nimport {Provider} from 'react-redux';\nimport reducer from './reducer'\n\n+import {sayHello} from './sagas';\n+sayHello();\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n___\n\n不管你盯住终端多长时间,“hello”永远不会出现.\n这是因为`sayHello`是一个generator！Generator 不会立即执行.如果你把代码该为`sayHello().next();`你的“hello”就出现了.不用担心,我们不会总是调用`next`.正如Redux,redux-saga用来消除应用开发中的痛苦.\n\n配置 redux-sage\n___\n  ```\n   import \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\n-import { createStore } from 'redux'\n+import { createStore, applyMiddleware } from 'redux'\n+import createSagaMiddleware from 'redux-saga'\nimport {Provider} from 'react-redux';\nimport reducer from './reducer'\n\nimport {sayHello} from './sagas';\n-sayHello()\n\n-const store = createStore(reducer);\n+const store = createStore(\n+  reducer,\n+  applyMiddleware(createSagaMiddleware(sayHello))\n+);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n  ___\n  我们已从Redux导入了`applyMiddleware`函数.从redux-saga导入`createSagaMiddleware`函数.当我们创建store的时候,我们需要通过中间件提供Redux需要的功能.在这个实例中,我们会调用`applyMiddleware`函数,这个函数返回`createSagaMiddleware(sayHello)`的结果.在幕后,redux-saga加载`sayHello`函数,仪式性的调用`next`函数.\n  \n  应该可以在终端中看到提示消息了.\n  现在让我们构建加载图片的saga\n  \n####通过Saga加载图片数据\n___\n我们将删除出sayHello saga,使用`loadImages` saga\n\n ```\n  -export function* sayHello() {\n-  console.log('hello');\n-}\n\n+export function* loadImages() {\n+  console.log('load some images please')\n+}\n```  \n___\n不要忘了更新`main.js`\n  ```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore, applyMiddleware } from 'redux'\nimport {Provider} from 'react-redux';\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './reducer'\n\n-import {sayHello} from './sagas';\n+import {loadImages} from './sagas';\n\nconst store = createStore(\n  reducer,\n-  applyMiddleware(createSagaMiddleware(sayHello))\n+  applyMiddleware(createSagaMiddleware(loadImages))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n  ```\n  ___\n  现在saga已经加载,在`saga.js`中添加`fetchImages`方法\n  \n   ```\n     const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\nconst API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\nconst fetchImages = () => {\n  return fetch(API_ENDPOINT).then(function (response) {\n    return response.json().then(function (json) {\n      return json.photos.photo.map(\n        ({farm, server, id, secret}) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n      );\n    })\n  })\n};\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  console.log(images)\n}\n   ```\n___\n\n\n `fetchImages`方法返回一个promise对象.我们将调用`fetchImages`,但是现在我们要使用`yield`关键字.通过黑暗艺术和巫术,generators理解Promise对象,正如终端输出的日志显示,我们已经收获了一个图片URLs的数组.看看`loadImages`的代码,他看起来像是典型的同步操作代码.`yield`关键字是秘制调味酱,让我们的代码用同步格式执行异步操作活动.\n ___\n \n ####封装我们的异步API请求.\n \n 首先来定义一下需要使用的api.他没有什么特殊的地方,实际上他和早先加载Flickr images的代码是相同的.我们创建`flickr.js`文件\n \n ```\n   const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';\nconst API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&api_key=${API_KEY}&format=json&nojsoncallback=1&per_page=5`;\n\nexport const fetchImages = () => {\n  return fetch(API_ENDPOINT).then(function (response) {\n    return response.json().then(function (json) {\n      return json.photos.photo.map(\n        ({farm, server, id, secret}) => `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`\n      );\n    })\n  })\n};\n ```\n ___\n \n\n严格意义上来说,不需要这么做,但是这会带来一定的好处.我们处在应用的边缘(boundaries of our application,意思是说在这里的代码可能是很多和远程服务器交互的代码，可能逻辑会很复杂),事情都有点乱.通过封装和远程API交互的逻辑,我们的代码将会很整洁,很容易更新.如果需要抹掉图片服务也会出奇的简单.\n\n我们的`saga.js`看起来是这个样子：\n ```\n  import {fetchImages} from './flickr';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  console.log(images)\n}\n``` \n___\n我们仍然需要在saga外获取数据,并且进入应用的state(使用异步获取的远程数据更新state).为了处理这个问题,我们将使用”effects”.\n\n####从saga来更新应用\n\n我们可以通过`dispatch`或者store作为参数来调用saga,但是这个方法时间一长就会给人造成些许的困扰.我们选择采用redux-saga提供的`put`方法.\n首先我们更新`reducer.js`操作一个新的action类型`IMAGES_LOADED`.\n  ```\nconst defaultState = {\n+  images: []\n}\n\nexport default function images(state = defaultState, action) {\n  switch(action.type) {\n    case 'IMAGE_SELECTED':\n      return {...state, selectedImage: action.image};\n+    case 'IMAGES_LOADED':\n+      return {...state, images: action.images};\n    default:\n      return state;\n  }\n}     \n  ```\n  \n  ___\n  我们添加了新的分支,并从`defaultState`中删除了硬编码的URLs数据.`IMAGES_LOADED`分支现在返回一个更新的state,包含action的image数据.\n  下一步我们更新saga:\n   ```\n\t import {fetchImages} from './flickr';\n+import {put} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n+  yield put({type: 'IMAGES_LOADED', images})\n}\n```\n___\n\n导入`put`以后,我们在`loadImages`添加另外一行.他`yield` `put`函数调用的返回结果.在幕后,redux-saga 分发这些动作,reducer接收到了消息!\n\t   怎样才能使用特定类型的action来触发一个saga?\n\t   \n####使用actions来触发saga工作流\n___\nSagas变得越来越有用,因为我们有能力使用redux actions来触发工作流.当我们这样做,saga会在我们的应用中表现出更大的能力.首先我们创建一个新的saga.`watchForLoadImages`.\n```\nimport {fetchImages} from './flickr';\n-import {put} from 'redux-saga/effects';\n+import {put, take} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  yield put({type: 'IMAGES_LOADED', images})\n}\n\n+export function* watchForLoadImages() {\n+  while(true) {\n+    yield take('LOAD_IMAGES');\n+    yield loadImages();\n+  }\n+}\n\t  ```\n  ___\n新的saga使用的是while来保持一直激活和等待调用状态.在循环的内部,我们生成(yield)一个redux-sage调用方法:`take`.Take方法监听任何类型的actions,他也会使saga接受下一个yield.在上面的例子中我们调用了一个方法`loadImages`,初始化图片加载.\n\n```\nimport \"babel-polyfill\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Gallery from './Gallery';\n\nimport { createStore, applyMiddleware } from 'redux'\nimport {Provider} from 'react-redux';\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './reducer'\n\n-import {loadImages} from './sagas';\n+import {loadImages} from './watchForLoadImages';\n\nconst store = createStore(\n  reducer,\n-  applyMiddleware(createSagaMiddleware(loadImages))\n+  applyMiddleware(createSagaMiddleware(watchForLoadImages))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Gallery />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n___\n更新了`main.js`以后,应用不再加载图片,我们需要在action creators中添加`loadImages`的`action`.\n```\nexport const IMAGE_SELECTED = 'IMAGE_SELECTED';\n+const LOAD_IMAGES = 'LOAD_IMAGES';\n\nexport function selectImage(image) {\n  return {\n    type: IMAGE_SELECTED,\n    image\n  }\n}\n\n+export function loadImages() {\n+  return {\n+    type: LOAD_IMAGES\n+  }\n+}\n```\n___\n因为我们已经绑定了action creators(Action创建器),我们只需要在`Gallery`组件中调用这个action就可以了.\n\n####block(阻塞)和no-blocking(非阻塞)效应\n现在我们的引用工作的足够好了,但是可能还有更多的问题需要考虑.`watchForLoadImages` saga包含 block effects.那么这到底是什么意思呢？这意味着在工作流中我们只能执行一次`LOAD_IMAGES`!在诸如我们现在构建的小型应用一样,这一点不太明显,实际上我们也仅仅加载了一次图片集.\n实际上，普遍的做法是使用`fork` effect 代替  `yield` 来加载图片\n.\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n-    yield loadImages();\n+    yield fork(loadImages); //be sure to import it!\n  }\n}\n```\n\n___\n使用`fork`助手(helper)函数,`watchForLoadImages`就变成了非阻塞saga了,再也不用考虑他是不是以前掉用过.redux-sagas 提供两个helpers,`takeEvery`和`takeLastest`（takeEvery监听多次action，不考虑是不是同一种action type,takeLatest只处理同一种action type的最后一次调用）.\n####选择默认的图片\nSagas按照队列来执行acitons,所以添加更多的saga也很容易.\n```\nimport {fetchImages} from './flickr';\nimport {put, take, fork} from 'redux-saga/effects';\n\nexport function* loadImages() {\n  const images = yield fetchImages();\n  yield put({type: 'IMAGES_LOADED', images})\n+  yield put({type: 'IMAGE_SELECTED', image: images[0]})\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield fork(loadImages);\n  }\n}\n```\n___\n在 `loadImages`工作流上,我们可以yield put函数调用,action type是`IMAGE_SELECTED`.发送我们选择的图片(在这个例子中，发送的仅仅是图片的url的字符串).\n####错误处理\n如果在saga循环内部出现错误,我们要考虑提醒应用做出合理的回应.所有流程包装到try/catch语句块里就可以实现,捕获错误以后`put`一个提示信息作为`IMAGE_LOAD_FAILURE` action的内容.\n\n```\nimport {fetchImages} from './flickr';\nimport {put, take, fork} from 'redux-saga/effects';\n\nexport function* loadImages() {\n+  try {\n    const images = yield fetchImages();\n    yield put({type: 'IMAGES_LOADED', images})\n    yield put({type: 'IMAGE_SELECTED', image: images[0]})\n+  } catch(error) {\n+    yield put({type: 'IMAGE_LOAD_FAILURE', error})\n+  }\n}\n\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n    yield fork(loadImages);\n  }\n}\n```\n___\n####Sagas的测试\n___\n在应用中使用Redux,测试变得相当的舒服. 看看我们的[鹅蛋头系列课程](https://egghead.io/series/react-testing-cookbook),可以了解到很多React的测试技术.\n使用Redux-saga在棒的一个方面就是异步代码测试很容易.测试javascript异步代码真是一件苦差事.有了saga,我们不需要跳出引用的核心代码.Saga把javascript的痛点都抹掉了.是不是意味着我们要写更多的测试?对的.\n\n我们会使用`tape`组件,首先做一些配置工作.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.end();\n});\n```\n___\n添加所有需要的组件,现在我们添加一个测试.这个测试接收一个名称和一个函数作为形参.在测试的函数体内部代码块,我们创建了一个saga生成器代码实例.在这个实例里面我们尅是测试saga的每一个动作.\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n+  assert.deepEqual(\n+    generator.next().value,\n+    false,\n+    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n+  );\n\n  assert.end();\n});\n```\n___\n`assert.deepEqual`方法接收两个值,检查一下他们是不是深度相同(js对象的概念).第一行代码是`generator.next().value`的调用,这个调用使生成器从暂停中恢复,得到值.下一个值单单是一个`false`.我想看到他失败,最后一个参数描述了测试期待的行为.\n在项目文件夹中命令行运行`npm test`看看结果:\n```\n  import test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n+  assert.deepEqual(\n+    generator.next().value,\n+    false,\n+    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n+  );\n\n  assert.end();\n});\n```\n___\n测试结果和预期的一样失败,结果有点意思.实际的结论是`{TAKE:'LOAD_IMAGES'}`,这是我们调用`take('LOAD_IMAGES')`受到的结果.实际上,我们的saga’可以yield一个对象来代替调用`take`.但是`take`添加了一些代码,让我们少敲些代码.\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n-    false\n+    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n  assert.end();\n});\n```\n___\n我们简单的调用`take`函数,就可以得到期待的结果了.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n+  assert.deepEqual(\n+    gen.next().value,\n+    false,\n+    'watchForLoadImages should call loadImages after LOAD_IMAGES action is received'\n+  );\n\n  assert.end();\n});\n```\n___\n下一个测试使我们确信`loadImages`saga在流程的下一个阶段会被自动调用.\n我们需要一个 false来检查结果.\n更新一下saga代码,yield一个`loadImages` saga:\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n+    yield loadImages();\n-    yield fork(loadImages); //be sure to import it!\n  }\n}\n```\n___\n现在运行测试,将会看到下面结果：\n```\n✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\n---------------------------------------------------------------------------------\n  operator: deepEqual\n  expected: |-\n    false\n  actual: |-\n    { _invoke: [Function: invoke] }\n```\n___\n哼！`{ _invoke: [Function: invoke] }`绝对不是我们yield take想要的结果.\n有问题.幸运的是redux-saga可以使用诸如`fork`一样的`effects`来解决这个问题.`fork`,`take`和其他的effect方法返容易满足测试要求的简单对象.这些effects返回的对象是一个指导redux-saga进行任务执行的集合.这一点对于测试来说非常的优雅,因为我们不用担心类似远程服务请求的副作用.有了redux-saga,我们把注意点放到请求执行的命令上.\n下面让我们更新一下saga,再一次使用`fork`.\n\n```\nexport function* watchForLoadImages() {\n  while(true) {\n    yield take('LOAD_IMAGES');\n-    yield loadImages();\n+    yield fork(loadImages);\n\n  }\n}\n```\n\n___\n这里使用`yield fork(loadImages)`直接代替`loadImages`.需要注意的是我们还没有执行`loadImages`,而是作为参数传递给`fork`.\n再次运行`npm test`.\n```\n✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\n---------------------------------------------------------------------------------\n  operator: deepEqual\n  expected: |-\n    false\n  actual: |-\n    { FORK: { args: [], context: null, fn: [Function: loadImages] } }\n```\n___\n结果得到了一个单纯对象而不是一个函数调用.函数在浏览器端也同时加载了,但是我们现在可以轻松的在saga 工作流里测试这个步骤.\n\n```\nimport test from 'tape';\nimport {put, take} from 'redux-saga/effects'\nimport {watchForLoadImages, loadImages} from './sagas';\nimport {fetchImages} from './flickr';\n\ntest('watchForLoadImages', assert => {\n  const generator = watchForLoadImages();\n\n  assert.deepEqual(\n    generator.next().value,\n    take('LOAD_IMAGES'),\n    'watchForLoadImages should be waiting for LOAD_IMAGES action'\n  );\n\n  assert.deepEqual(\n    generator.next().value,\n-    false,\n+    yield fork(loadImages),\n    'watchForLoadImages should call loadImages after LOAD_IMAGES action is received'\n  );\n\n  assert.end();\n});\n```\n___\n测试`loadImages`saga是一样的,只需要把`yield fetchImages`更新为`yield fork(fetchImages)`.\n```\ntest('loadImages', assert => {\n  const gen = loadImages();\n\n  assert.deepEqual(\n    gen.next().value,\n    call(fetchImages),\n    'loadImages should call the fetchImages api'\n  );\n\n  const images = [0];\n\n  assert.deepEqual(\n    gen.next(images).value,\n    put({type: 'IMAGES_LOADED', images}),\n    'loadImages should dispatch an IMAGES_LOADED action with the images'\n  );\n\n  assert.deepEqual(\n    gen.next(images).value,\n    put({type: 'IMAGE_SELECTED', image: images[0]}),\n    'loadImages should dispatch an IMAGE_SELECTED action with the first image'\n  );\n\n  const error = 'error';\n\n  assert.deepEqual(\n    gen.throw(error).value,\n    put({type: 'IMAGE_LOAD_FAILURE', error}),\n    'loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown'\n  );\n\n  assert.end();\n});\n```\n___\n特别注意最后一个`assert`.这个断言测试使用异常捕获代替生成器函数的next方法.另一个非常酷的地方是：可以传值.注意看代码,我们创建了`images`常量,并且传递到next函数.saga可以在接下来的任务序列中使用传递的值.\n 太棒了,这种方法是测试异步编程的程序员梦寐以求的技术.\n \n #####接下来做什么？\n ___\n \n 你可以[fork一下这个例子的代码](https://github.com/joelhooks/egghead-react-redux-image-gallery).\n \n 如果你想扩充这个应用,可以做一下几个方面的工作.\n- 做一个幻灯显示下一张要显示的图片\n- 允许使用者搜索Flickr图片\n- 添加其他提供图片的API\n- 允许用户选择喜欢的API进行搜索.\n\n我们仅仅和生成器碰了一下面,但是即便如此,希望在联合使用redux-saga library,Redux和React的时候给你一些帮助.","slug":"使用React-Redux-redux-sage构建图片库-翻译","published":1,"updated":"2017-06-13T04:32:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5fle0009qrezl5x96d4t","content":"<blockquote>\n<p>看到这篇文章<a href=\"http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/\" target=\"_blank\" rel=\"external\">build an image gallery using redux saga</a>，觉得写的不错，长短也适中.  文后有<a href=\"https://github.com/phpsmarter/egghead-react-redux-image-gallery/tree/comment\" target=\"_blank\" rel=\"external\">注释版的github代码库,请使用comment分枝</a>. Flickr API可能需要有fQ的基本能力.可以使用google的翻译作为参考，这篇文章google翻译版的中文水平让我吃了一惊.<br>翻译已经完成.</p>\n</blockquote>\n<hr>\n<p>###使用React,Redux和reudx-saga构建一个图像浏览程序(翻译)<br>Joel Hooks ,2016年3月</p>\n<p>#####构建一个图片长廊</p>\n<p>图像长廊是一个简单的程序，从Flicker API 加载图片URLs,允许用户查看图片详情。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-b0d03ac095f09c55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"Screen Shot 2016-03-20 at 3.42.17 PM-2.png\"></p>\n<p>后续我们会使用React,Redux和redux-saga.React作为核心框架，优势是虚拟dom(virtual-dom)的实现。Redux在程序内负责state的管理。最后，我们会使用redux-saga来执行javascript的异步操作步骤。</p>\n<p>我们会使用ES6(箭头函数，模块，和模板字符串)，所以我们首先需要做一些项目的配置工作。</p>\n<p>#####项目配置和自动化</p>\n<hr>\n<p>如果要开始一个React项目，须有有一系列的配置选项。对于一个简单的项目，我想把配置选项尽可能缩减。考虑到浏览器的版本问题，使用Babel把ES6编译为ES5。</p>\n<p>首先使用npm init 创建一个<code>package.json</code>文件</p>\n<p>package.json<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"egghead-react-redux-image-gallery\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Redux Saga beginner tutorial\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"babel-node ./src/saga.spec.js | tap-spec\"</span>,</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Joel Hooks &lt;joelhooks@gmail.com&gt;\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-polyfill\"</span>: <span class=\"string\">\"6.3.14\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^0.14.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^0.14.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-redux\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"redux\"</span>: <span class=\"string\">\"^3.3.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"redux-saga\"</span>: <span class=\"string\">\"^0.8.0\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-cli\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"6.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babelify\"</span>: <span class=\"string\">\"^7.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"^13.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"budo\"</span>: <span class=\"string\">\"^8.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"tap-spec\"</span>: <span class=\"string\">\"^4.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"tape\"</span>: <span class=\"string\">\"^4.2.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p> 有了<code>package.json</code>, 可以在项目文件夹命令行运行 <code>npm install</code> 安装程序需要的依赖项。</p>\n<p> .babelrc</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>, <span class=\"string\">\"stage-2\"</span>]</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>这个文件告诉babel,我们将会使用ES2015(ES6),React以及ES2106的stage-2的一些特征。</p>\n<p><code>package.json</code>有两个标准的script脚本配置：<code>start</code>和<code>test</code>.现在我们想通过start脚本加载程序，start会使用<code>src</code>目录的一些文件，所以西药先创建<code>src</code>文件夹.在<code>src</code>文件夹添加下面的一些文：<br>index.html<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>egghead: React Redux Image Gallery<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></div><div class=\"line\">  ![](http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg)</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Egghead Image Gallery<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<hr>\n<p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<hr>\n<p>style.css<br>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica, Arial, Sans-Serif, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.egghead</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-gallery</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid darkgray;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.gallery-image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">align-items</span>: center;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.gallery-image</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-scroller</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: space-around;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">overflow-y</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-scroller</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><code>index.html</code>文件加载<code>style.css</code>文件提供一些基本的布局样式，同时也加载<code>build.js</code>文件，这是一个生成出来的文件.<code>main.js</code>是一个最基础的React程序，他在<code>index.html</code>的<code>#root</code>元素中渲染一个<code>h1</code>元素。创建这些文件以后，在项目文件夹中命令行运行<code>npm start</code>。在浏览器打开<code>http://10.11.12.1:9966</code>.就可以看到<code>index.html</code>中渲染的页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-b24265cbe5f89d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"运行加载图\"></p>\n<p>现在我们来构建基础的<code>Gallery</code> React 组件</p>\n<p>#####在Gallery中显示一些图片</p>\n<hr>\n<p> 首先我们需要尽可能快的获得一个可以显示的图片素材.在项目文件夹中创建一个文件<code>Gallery.js</code><br> Gallery.js<br>  <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">    import React, &#123;Component&#125; from <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\">const flickrImages = [</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: flickrImages,</div><div class=\"line\">      selectedImage: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map((image, <span class=\"keyword\">index</span>) =&gt; (</div><div class=\"line\">            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>  我们直接在组件中硬编码了一个提供数据的数组，让项目尽快的工作起来.<code>Gallery组件</code>继承<code>Component组件</code>,在构造函数中创建一些组件的出事状态.最后我们利用一些样式标记渲染一下文件。<code>image-scroller</code>元素遍历(<code>map</code>方法)图片数组,生成摘要小图片。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> Gallery <span class=\"keyword\">from</span> <span class=\"string\">'./Gallery'</span></div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">-  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">+  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Gallery</span> /&gt;</span>,</span></div><div class=\"line\">  document.getElementById('root')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>  到现在，我们使用硬编码的图片URLs(通过fickrImages)数组,第一张图片作为<code>selectedImage</code>.这些属性在<code>Gallery</code>组件的构造函数缺省配置中，通过初始状态(initial)来设定.</p>\n<p>  接下来在组件中添加一个和组件进行交互操作的方法，方法具体内容是操做<code>setSate</code>.<br>  Gallery.js</p>\n  <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">     export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: flickrImages,</div><div class=\"line\">      selectedImage: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">+  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">+    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">+      selectedImage</div><div class=\"line\">+   &#125;)</div><div class=\"line\">+  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map((image, <span class=\"keyword\">index</span>) =&gt; (</div><div class=\"line\">-            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125;&gt;</div><div class=\"line\">+            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125; onClick=&#123;<span class=\"keyword\">this</span>.handleThumbClick.bind(<span class=\"keyword\">this</span>,image)&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>在<code>Gallery组件</code>添加<code>handleThumbClick</code>方法,任何元素都可用通过<code>onClick</code>属性调用这个方法.<code>image</code>作为第二个参数传递，元素自身作为第一个参数传递.bind方法传递javascript函数调用上下文对象是非常便捷。</p>\n<p>看起来不错!现在我们有了一些交互操作的方法，有点“APP”的意思了。截止目前，我们已经让app运行起来了，接下来要考虑怎么加载远程数据。最容易加载远程数据的地方是一个<code>React组件</code>生命周期方法,我们使用<code>componentDidMount</code>方法,通过他从<code>Flikr API</code>请求并加载一些图片.</p>\n<p>Gallery.js<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">images</span>: flickrImages,</div><div class=\"line\">      <span class=\"attr\">selectedImage</span>: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">+  componentDidMount() &#123;</div><div class=\"line\">+    <span class=\"keyword\">const</span> API_KEY = <span class=\"string\">'a46a979f39c49975dbdd23b378e6d3d5'</span>;</div><div class=\"line\">+    <span class=\"keyword\">const</span> API_ENDPOINT = <span class=\"string\">`https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&amp;api_key=<span class=\"subst\">$&#123;API_KEY&#125;</span>&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`</span>;+</div><div class=\"line\">+</div><div class=\"line\">+    fetch(API_ENDPOINT).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">+      <span class=\"keyword\">return</span> response.json().then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">+        <span class=\"keyword\">const</span> images = json.photos.photo.map(<span class=\"function\">(<span class=\"params\">&#123;farm, server, id, secret&#125;</span>) =&gt;</span> &#123; </div><div class=\"line\">+            <span class=\"keyword\">return</span> <span class=\"string\">`https://farm<span class=\"subst\">$&#123;farm&#125;</span>.staticflickr.com/<span class=\"subst\">$&#123;server&#125;</span>/<span class=\"subst\">$&#123;id&#125;</span>_<span class=\"subst\">$&#123;secret&#125;</span>.jpg`</span></div><div class=\"line\">+        &#125;);</div><div class=\"line\">+</div><div class=\"line\">+        <span class=\"keyword\">this</span>.setState(&#123;images, <span class=\"attr\">selectedImage</span>: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">+      &#125;)</div><div class=\"line\">+    &#125;)</div><div class=\"line\">+  &#125;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure></p>\n<hr>\n<p>我们在<code>Gallery</code>类中添加了一个新的方法,通过React的<code>componentDidMount</code>生命周期方法触发Flickr图片数据的获取。</p>\n<p>在<code>React</code>组件运行的不同时间点，组件会调用不同的生命周期函数。在这段代码中，当组件被渲染到<code>DOM</code>中的时间点,<code>componentDidMount</code>函数就会被调用。需要注意的是:<code>Gallery</code>组件只有一次渲染到<code>DOM</code>的机会，所以这个函数可以提供一些初始化图片.考虑到在APP的整个生命周期中,有更多的动态组件的加载和卸载,这可能会造成一些多余的调用和无法考虑到的结果。</p>\n<p>我们使用浏览器接口(browser API)的<code>fetch</code>方法执行请求.Fetch返回一个promise对象解析<code>response</code>对象.调用<code>response.json()</code>方法,返回另一个promise对象，这就是我们实际需要的<code>json</code>格式的数据.遍历这个对象以后就可以获取图片的url地址.</p>\n<blockquote>\n<p>坦白讲，这个应用目前还很简单.我们还需要在这里花费更多的时间，还有一些基础的需求需要完成.或许我们应该在promise处理流程中添加错误处理方法,如果图片数据获取成功也需要一些处理逻辑.在这个地方，你需要发挥一些想象力考虑一下更多的逻辑.在生产实践中简单的需求是很少见的.很快,应用中就会添加更多的需求。认证,滚动橱窗,加载不同图片库的能力和图片的设置等等.仅仅这些还远远不够.</p>\n</blockquote>\n<p>我们已经使用<code>React</code>构建了一个加载图片库的程序。接下来我们需要考虑到随着程序功能的添加，到底需要哪些基础的模式.首先考虑到的一个问题就是要把应用的状态(state)控制从<code>Gallery</code>组件中分离出来.</p>\n<p>我们通过引入<code>Redux</code>来完成应用的状态管理工作。</p>\n<p>#####使用<code>Redux</code>来管理状态</p>\n<hr>\n<p>在你的应用中只要使用了<code>setState</code>方法都会让一个组件从无状态变为有状态的组件.糟糕的是这个方法会导致应用中出现一些令人困惑的代码,这些代码会在应用中到处蔓延。</p>\n<p><code>Flux</code>构架来减轻这个问题.<code>Flux</code>把逻辑(logic)和状态(state)迁移到<code>Store</code>中.应用中的动作(<code>Actions</code>)被<code>Dispatch</code>的时候,<code>Stores</code><br>会做相应的更新.<code>Stores</code>的更新会触发<code>View</code>根据新状态的渲染.</p>\n<p>那么我们为什么要舍弃<code>Flux</code>?他竟然还是“官方”构建的.<br>好吧！<code>Redux</code>是基于<code>Flux</code>构架的,但是他有一些独特的优势.下面是Dan Abramov(Redux创建者)的一些话：</p>\n<blockquote>\n<p>Redux和Flux没有什么不同.总体来讲他们是相同的构架,但是Redux通过功能组合把Flux使用回调注册的复杂点给屏蔽掉了.<br>两个构架从更本上讲没有什么不同，但是我发现Redux使一些在Flux比较难实现的逻辑更容易实现.</p>\n</blockquote>\n<p><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">Redux文档</a>非常棒.<br>如果你还没有读过代码的卡通教程或者Dan的系列文章.赶快去看看吧！</p>\n<p>#####启动Redux</p>\n<p>第一件需要做的事事初始化<code>Redux</code>,让他在我们的程序中运行起来.现在不需要做安装工作，刚开始运行<code>npm install</code>的时候已经安装好了依赖项，我们需要做一些导入和配置工作.<br><strong>reducer函数是Redux的大脑.</strong> 每当应用分发(或派遣,dispatch)一个操作(action)的时候,<code>reducer</code>函数会接受操作(action)并且依据这个动作(action)创建<code>reducer</code>自己的<code>state</code>.因为<code>reducers</code>是纯函数，他们可以组合到一起，创建应用的<code>一个完整state</code>.让我们在<code>src</code>中创建一个简单的reducer:<br>reducer.js</p>\n <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span>, action) &#123;</div><div class=\"line\">   console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">   return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p> 一个reducer函数接受两个参数(arguments).</p>\n<ol>\n<li>[x] <code>state</code>-这个数据代表应用的状态(state).reducer函数使用这个状态来构建一个reducer自己可以管理的状态.如果状态没有发生改变,reducer会返回输入的状态.</li>\n<li>[x]  <code>action</code>-这是触发reducer的事件.Actions通过store派发(dispatch),由reducer处理.action需要一个<code>type</code>属性来告诉reducer怎么处理state.</li>\n</ol>\n<p>目前,<code>images</code> reuducer在终端中打印出日志记录，表明工作流程是正常的，可以做接下来的工作了.为了使用reducer，需要在<code>main.js</code>中做一些配置工作:<br>main.js<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Gallery <span class=\"keyword\">from</span> <span class=\"string\">'./Gallery'</span>;</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\">+ <span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">const</span> store = createStore(reducer);</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> &#123;Provider&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">+  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Gallery</span> /&gt;</span></div><div class=\"line\">+  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p> 我们从<code>Redux</code>库中导入<code>createStore</code>组件.<code>creatStore</code>用来创建Redux的store.大多数情况下,我们不会和store直接交互,store在Redux中做幕后管理工作.</p>\n<p> 也需要导入刚才创建的reducer函数,以便于他可以被发送到store.<br> 我们将通过<code>createStore(reducer)</code>操作，利用reducer来配置应用的store.这个示例仅仅只有一个reducer,但是<code>createStore</code>可以接收多个reducer作为参数.稍后我们会看到这一点.</p>\n<p> 最后我们导入高度集成化的组件<code>Provider</code>,这个组件用来包装<code>Gallery</code>,以便于我们在应用中使用Redux.我们需要把刚刚创建的store传递给<code>Provider</code>.你也可以不使用<code>Provider</code>,实际上Redux可以不需要React.但是我们将会使用<code>Provider</code>,因为他非常便于使用.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-6667a047b669d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320\" alt=\"打印日志\"></p>\n<p> 这张图可能有点古怪，但是展示了Redux的一个有意思的地方.所有的reducers接收在应用中的全部actions(动作或操作).在这个例子中我们可以看到Redux自己派发的一个<code>action</code>.</p>\n<p> #####连接Gallery组件</p>\n<p> 借助Redux,我们将使用”connected”和“un-connected”组件.一个<code>connected</code>组件被连线到store.<code>connected</code>组件使控制动作事件(controls action event)和store协作起来.通常,一个<code>connected</code>组件有子组件,子组件具有单纯的接收输入和渲染功能，当数据更新时执行调用.这个子组件就是unconnected组件.</p>\n<blockquote>\n<p>提示:当Rect和Redux配合是工作的非常好,但是Redux不是非要和React在一起才能工作.没有React,Redux其实可以和其他框架配合使用.</p>\n</blockquote>\n<p>在应用中需要关联<code>React组件</code>和<code>Redux Store</code> 的时候，<code>react-redux</code>提供了便捷的包装器.我们把react-redux添加进<code>Gallery</code>中<br>,从而使<code>Gallery</code>成为首要的关联组件.</p>\n<p>Gallery.js<br> <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\">+<span class=\"keyword\">import</span> &#123;connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"></div><div class=\"line\">-<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> &#123;</span></div><div class=\"line\">+<span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> &#123;</span></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">+    <span class=\"built_in\">console</span>.log(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: []</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    const API_KEY = <span class=\"string\">'a46a979f39c49975dbdd23b378e6d3d5'</span>;</div><div class=\"line\">    const API_ENDPOINT = `<span class=\"javascript\">https:<span class=\"comment\">//api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=$&#123;API_KEY&#125;&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</span></span>`;</div><div class=\"line\"></div><div class=\"line\">    fetch(API_ENDPOINT).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(response)</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> response.json().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(json)</span> =&gt;</span> &#123;</div><div class=\"line\">        const images = json.photos.photo.map(<span class=\"function\"><span class=\"params\">(&#123;farm, server, id, secret&#125;)</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> `<span class=\"javascript\">https:<span class=\"comment\">//farm$&#123;farm&#125;.staticflickr.com/$&#123;server&#125;/$&#123;id&#125;_$&#123;secret&#125;.jpg</span></span>`</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;images, selectedImage: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">      selectedImage</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;div className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;div&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map(<span class=\"function\"><span class=\"params\">(image, index)</span> =&gt;</span> (</div><div class=\"line\">            &lt;div key=&#123;index&#125; onClick=&#123;<span class=\"keyword\">this</span>.handleThumbClick.bind(<span class=\"keyword\">this</span>,image)&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect()(Gallery)</div></pre></td></tr></table></figure></p>\n<hr>\n<p>从<code>react-redux</code>导入<code>connect</code>函数,可以在导出组件的时候把他变为链接组件(connected component).请注意,<code>connect()(Gallery)</code>代码把<code>Gallery</code>组件放在第二个形参中,这是因为<code>connect()</code>返回一个函数，这个函数接受一个React组件作为参数(argument).调用<code>connect()</code>函数时需要配置项.后面我们将会传递配置我们应用的actions和state参数.<br>我们也把<code>connect</code>作为默认配置到处模块.这一点非常重要！现在当我们<code>import Gallery</code>的时候,就不是一个单纯的React组件了,而是一个和Redux关联的组件了.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-72a9136f9b481bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620\" alt=\"\"></p>\n<p>如果你观察我们添加进构造器的<code>console.log</code>的输出,就可以看到<code>Gallery</code>组件的属性现在包括了一个<code>dispatch</code>函数.这个地方是<code>connect</code>为我们的应用修改的,这个改动赋予了组件把自己的动作对象(action objects)<code>派发</code>到<code>reducers</code>的能力.</p>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">+    <span class=\"keyword\">this</span>.props.dispatch(&#123;<span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"symbol\">'TES</span>T'&#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: []</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<hr>\n<p>我们可以在组件的构造器中调用派发功能.你可以在开发者的终端中看到来自reducer的日志声明.看到声明表示我们已经派发了第一个action!.Actions是一个单一的javascript对象,必需有<code>type</code>属性.Actions可以拥有任意数量和种类的其他属性.但是<code>type</code>可以让reducers理解这些动作到底是做什么用的(意译，意思是只有拥有type属性，reducers才知道对state做什么样的修改).</p>\n  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span>, action) &#123;</div><div class=\"line\">-  console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">+  switch(action.type) &#123;</div><div class=\"line\">+    case 'TEST':</div><div class=\"line\">+      console.<span class=\"keyword\">log</span>('THIS IS ONLY A TEST')</div><div class=\"line\">+  &#125;</div><div class=\"line\">  return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p> 总的reducers使用<code>switch代码块</code>过滤有关的消息,<code>Switch</code>语句使用actions的type属性,当一个<code>action</code>和<code>case</code>分支吻合以后,相应的单个reducer就会执行他的具体工作.</p>\n<p> 我们的应用现在关联到接收的动作.现在我们需要把<code>Redux</code>-<code>Store</code>提供的<code>state</code>关联到应用中.</p>\n<p> ####默认的应用状态(state)<br> reducer.js<br> <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">  const <span class=\"keyword\">default</span>State = &#123;</div><div class=\"line\">  images: []</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span> = <span class=\"keyword\">default</span>State, action) &#123;</div><div class=\"line\">  switch(action.type) &#123;</div><div class=\"line\">    case 'TEST':</div><div class=\"line\">-      console.<span class=\"keyword\">log</span>('THIS IS ONLY A TEST')</div><div class=\"line\">+      console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">+      return <span class=\"keyword\">state</span>;</div><div class=\"line\">+    <span class=\"keyword\">default</span>:</div><div class=\"line\">+      return <span class=\"keyword\">state</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">-  return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 我们创建一个<code>defaultState</code>对象,这个对象返回一个空数组作为images的属性.我们把<code>images</code>函数的参数<code>state</code>设置为默认.如果在test分支中输出日志,将会看到state不是undefined(空数组不是undefined)!reducer需要返回应用的当前state.这点很重要!现在我们没有做任何改变,所以仅仅返回state.注意我们在<code>case</code>中添加了default分支,reducer必须要返回一个state.</p>\n<p>在<code>Gallery</code>组件中，我们也可以把state做一定的映射(map)以后再连接到应用.</p>\n <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">  import React, &#123;Component&#125; <span class=\"keyword\">from</span> 'react'</div><div class=\"line\">import &#123;connect&#125; <span class=\"keyword\">from</span> 'react-redux';</div><div class=\"line\"></div><div class=\"line\">export class Gallery extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.props.dispatch(&#123;type: 'TEST'&#125;);</div><div class=\"line\">+    console.<span class=\"keyword\">log</span>(props);</div><div class=\"line\">-    this.<span class=\"keyword\">state</span> = &#123;</div><div class=\"line\">-      images: []</div><div class=\"line\">-    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">-  componentDidMount() &#123;</div><div class=\"line\">-    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';</div><div class=\"line\">-    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&amp;api_key=$&#123;API_KEY&#125;&amp;format=json&amp;nojsoncallback=<span class=\"number\">1</span>&amp;per_page=<span class=\"number\">5</span>`;-</div><div class=\"line\">-</div><div class=\"line\">-    fetch(API_ENDPOINT).then((response) =&gt; &#123;</div><div class=\"line\">-      return response.json().then((json) =&gt; &#123;</div><div class=\"line\">-        const images = json.photos.photo.map((&#123;farm, server, id, secret&#125;) =&gt; &#123; </div><div class=\"line\">-            return `https://farm$&#123;farm&#125;.staticflickr.com/$&#123;server&#125;/$&#123;id&#125;_$&#123;secret&#125;.jpg`</div><div class=\"line\">-        &#125;);</div><div class=\"line\">-</div><div class=\"line\">-        this.<span class=\"built_in\">set</span>State(&#123;images, selectedImage: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">-      &#125;)</div><div class=\"line\">-    &#125;)</div><div class=\"line\">-  &#125;</div><div class=\"line\">-  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">-    this.<span class=\"built_in\">set</span>State(&#123;</div><div class=\"line\">-      selectedImage</div><div class=\"line\">-    &#125;)</div><div class=\"line\">-  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">-    const &#123;images, selectedImage&#125; = this.<span class=\"keyword\">state</span>;</div><div class=\"line\">+    const &#123;images, selectedImage&#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"variable\">&lt;div className=\"image-gallery\"&gt;</span></div><div class=\"line\">        <span class=\"variable\">&lt;div className=\"gallery-image\"&gt;</span></div><div class=\"line\">          <span class=\"variable\">&lt;div&gt;</span></div><div class=\"line\">            <span class=\"variable\">&lt;img src=&#123;selectedImage&#125; /&gt;</span></div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        <span class=\"variable\">&lt;div className=\"image-scroller\"&gt;</span></div><div class=\"line\">          &#123;images.map((image, index) =&gt; (</div><div class=\"line\">-            <span class=\"variable\">&lt;div key=&#123;index&#125; onClick=&#123;this.handleThumbClick.bind(this,image)&#125;&gt;</span></div><div class=\"line\">+            <span class=\"variable\">&lt;div key=&#123;index&#125;&gt;</span></div><div class=\"line\">              <span class=\"variable\">&lt;img src=&#123;image&#125;/&gt;</span></div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+function mapStateToProps(<span class=\"keyword\">state</span>) &#123;</div><div class=\"line\">+  return &#123;</div><div class=\"line\">+    images: <span class=\"keyword\">state</span>.images</div><div class=\"line\">+    selectedImage: <span class=\"keyword\">state</span>.selectedImage</div><div class=\"line\">+  &#125;</div><div class=\"line\">+&#125;</div><div class=\"line\"></div><div class=\"line\">-export <span class=\"keyword\">default</span> connect()(Gallery)</div><div class=\"line\">+export <span class=\"keyword\">default</span> connect(mapStateToProps)(Gallery)</div><div class=\"line\"></div><div class=\"line\"> ``` </div><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\">  我们将移除连接组件中的所有图片加载和交互逻辑代码,如果你注意看`Gallery`组件的底部代码,你会注意到，我们创建了一个`mapStateToProps`函数,接收一个`<span class=\"keyword\">state</span>`作为参数,返回一个对象,把`<span class=\"keyword\">state</span>.images`映射为`images`属性.`mapStateToProps`做为参数传递给`connect`.</div><div class=\"line\">  正如名字暗示的一样,`mapStateToProps`函数接收当前应用的<span class=\"keyword\">state</span>,然后把<span class=\"keyword\">state</span>转变为组件的属性(propertys).如果在构造器中输出props,将会看到images数组是`reducer`返回的默认<span class=\"keyword\">state</span>.</div></pre></td></tr></table></figure>\n<p>   const defaultState = {</p>\n<ul>\n<li>images: []</li>\n</ul>\n<ul>\n<li>images: [</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“</li>\n<li>],</li>\n<li>selectedImage: “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</li>\n</ul>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘TEST’:<br>      console.log(state, action)<br>      return state;<br>    default:<br>      return state;<br>  }<br>}<br>  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">如果在`<span class=\"keyword\">default</span>State`中更新images数组,你将可以看到一些图片重新出现在gallery中!现在当用户点击缩略图的时候,我们可以反馈选择动作,返回对应的大图.</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">####更新state</span></div><div class=\"line\">怎么操作才能根据新选择的图片更新<span class=\"keyword\">state</span>?</div><div class=\"line\">需要配置reducer监听`IMAGE_SELECTED`动作,借助action携带的信息(payload,有的文章翻译为载荷,载荷怎么理解？手机载荷就是声音，短信和流量数据。如果是卡车就是拉的货物,如果是客车就乘载的乘客,action的载荷就是要让reducer明白你要干什么，需要什么)来更新<span class=\"keyword\">state</span>.</div></pre></td></tr></table></figure></p>\n<p>  const defaultState = {<br>  images: [<br>    “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“<br>  ],<br>  selectedImage: “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</p>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {</p>\n<ul>\n<li>case ‘TEST’:<br>case ‘IMAGE_SELECTED’:</li>\n<li>return state;</li>\n</ul>\n<ul>\n<li><p>return {…state, selectedImage: action.image};<br>default:<br>return state;<br>}<br>}</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">现在reducer已经准备接收`IMAGE_SELECTED` action了.在`IMAGE_SELECTED`分支选项内,我们在展开(spreading,ES6的对象操作方法),并重写`selectedImage`属性后,返回一个新state对象.了解更多的`...state`对象操作可以看`ruanyifeng`的书.</div></pre></td></tr></table></figure>\n<p>import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>\n</li>\n</ul>\n<p>export class Gallery extends Component {</p>\n<ul>\n<li>constructor(props) {</li>\n<li>super(props);</li>\n<li>this.props.dispatch({type: ‘TEST’});</li>\n<li>console.log(props);</li>\n<li>}<br>render() {</li>\n<li>const {images, selectedImage} = this.props;</li>\n</ul>\n<ul>\n<li><p>const {images, selectedImage, dispatch} = this.props;</p>\n<p>return (<br> <div classname=\"image-gallery\"><br>   <div classname=\"gallery-image\"></div></div></p>\n<pre><code>&lt;div&gt;\n  &lt;img src={selectedImage} /&gt;\n&lt;/div&gt;\n</code></pre><p>   <br>   <div classname=\"image-scroller\"></div></p>\n<pre><code>{images.map((image, index) =&gt; (\n</code></pre></li>\n</ul>\n<ul>\n<li><div key=\"{index}\"></div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> dispatch({type:’IMAGE_SELECTED’, image})}&gt;<br> <img src=\"{image}/\"><br></div><br>))}<br><br><br>)<br>}<br>}</li>\n</ul>\n<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>\n<p>export default connect(mapStateToProps)(Gallery)<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> 在`Gallery`组件中,我们将会在组件的属性中定义`dispatch`在`onClick`函数体中调用他,现在我们从便利角度考虑把他们放在一起,但是两者功能是一样的.一旦我们点击了缩略图,他将会通过reducer更新大图.</div><div class=\"line\">使用dispatch可以很方便的创建通用actions,但是很快我们会需要重用命名好的actions.为了这样做,可以使用”action creators”.</div><div class=\"line\"></div><div class=\"line\">####Action Creators</div><div class=\"line\">Action creators函数返回配置好的action对象.我们在`action.js`中添加第一个action creator.</div><div class=\"line\"></div><div class=\"line\">action.js</div></pre></td></tr></table></figure></p>\n<p> export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;</p>\n<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">这个方法经过<span class=\"keyword\">export</span>以后,可以直接在任何需要创建`selectImage` action地方导入!`selectImage`是纯函数，只能返回数据.他接收一个image作为参数,把image添加到action对象中，并返回.</div><div class=\"line\"></div><div class=\"line\">&gt;注意:我们正在返回一个单纯的javascript object,但是`image`的属性可能很古怪，如果你以前没有碰到这样的样式.从ES6的角度出发,如果你给一个对象传递一个类似这样的属性,隐含的意思是把`image:<span class=\"string\">'任何image包含的值'</span>`添加到最终返回的对象.超级好用!</div></pre></td></tr></table></figure></p>\n<p> import  * as GalleryActions from ‘./actions.js’;<br>[…]<br>onClick={() =&gt; dispatch(GalleryActions.selectImage(image))}<br> <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">this isn’t much than just using `dispatchti` though.</div><div class=\"line\"></div><div class=\"line\">幸运的是,这个模式很普遍,Redux在`bindActionCreators`函数里提供了一个更好的办法来完成这个功能.</div></pre></td></tr></table></figure></p>\n<p> import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>\n<ul>\n<li><p>import {bindActionCreators} from ‘redux’;</p>\n</li>\n<li><p>import  * as GalleryActions from ‘./actions.js’;</p>\n</li>\n</ul>\n<p>export class Gallery extends Component {<br>  constructor(props) {<br>    super(props);<br>    this.props.dispatch({type: ‘TEST’});<br>    console.log(props);<br>  }<br>  handleThumbClick(selectedImage) {<br>    this.setState({<br>      selectedImage<br>    })<br>  }<br>  render() {</p>\n<ul>\n<li>const {images, selectedImage, dispatch} = this.props;</li>\n</ul>\n<ul>\n<li>const {images, selectedImage, selectImage} = this.props;<br>return (<br> <div classname=\"image-gallery\"><br>   <div classname=\"gallery-image\"><pre><code>&lt;div&gt;\n  &lt;img src={selectedImage} /&gt;\n&lt;/div&gt;\n</code></pre>   </div><br>   <div classname=\"image-scroller\"><pre><code>{images.map((image, index) =&gt; (\n</code></pre></div></div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> dispatch({type:’IMAGE_SELECTED’, image})}&gt;</div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> selectImage(image)}&gt;<br> <img src=\"{image}/\"><br></div><br>))}<br><br><br>)<br>}<br>}</li>\n</ul>\n<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>\n<p>+function mapActionCreatorsToProps(dispatch) {</p>\n<ul>\n<li>return bindActionCreators(GalleryActions, dispatch);<br>+}</li>\n</ul>\n<p>-export default connect(mapStateToProps)(Gallery)<br>+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> 我们已经添加了`mapActionCreatorsToProps`函数,他接收`dispatch`函数作为参数.返回`bindActionCreators`的调用结果,`GalleryActions`作为`bindActionCreators`的参数.现在如果你输出属性日志,就看不到`dispatch`作为参数,`selectImage`直接可以使用了.(这里相当于对dispatch和action进行了包装).</div><div class=\"line\"> </div><div class=\"line\"> 现在回顾一下,我们做了几件事:</div><div class=\"line\"> - 创建了一个reducer包含应用的默认初始状态(initial state),并且监听actions的执行.</div><div class=\"line\"> - 创建了一个store,把reducer具体化,提供一个分发器(dispatcher)可以分发action.</div><div class=\"line\"> - 把我们的Gallery组件关联到store的state.</div><div class=\"line\"> - 把store的state映射为属性(property)，传递给Gallery.</div><div class=\"line\"> - 映射一个动作创建器,Gallery可以简单的调用`selectImage(image)`,分发动作,应用状态将会更新.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">那么，我们怎么才能使用这些模式从远程资源加载数据呢？</div><div class=\"line\"></div><div class=\"line\">这个过程将会非常有趣!</div><div class=\"line\"></div><div class=\"line\">####异步活动？</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\">你可能在参加函数式编程的时候听说过”副作用”(side effects)这个名词,side effects是发生在应用的范围之外的东西.在我们舒适的肥皂泡里,side effect根本不是问题,但是当我们要到达一个远程资源,肥皂泡就被穿透了.有些事情我们就控制不了了,我们必须接受这个事实.(根据这段话，side effect 翻译为意想不到的事情，出乎意料的不受控制的事情更好)</div><div class=\"line\"></div><div class=\"line\">在Redux里,reducer没有Side effects.这意味着reducers不处理我们应用中的异步活动.我们不能使用reducers加载远程数据,因为reducers是纯函数,没有side effects.</div><div class=\"line\"></div><div class=\"line\">Redux很棒,如果你的应用里没有任何异步活动，你可以停下来,不用再往下看了.</div><div class=\"line\">如果你创建的应用比较大,可能你会从服务端加载数据,这时,当然要使用异步方式.</div><div class=\"line\"></div><div class=\"line\">&gt;**注意**： Redux其中一个最酷的地方是他非常小巧.他试图解决有限范围内的问题.大多数的应用需要解决很多问题!万幸,Reduc提供中间件概念,中间件存在于action-&gt;reducer-&gt;store的三角关系中,通过中间件的方式,可以导入诸如远程数据异步加载类似的功能.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">其中一个方法是使用`thunks`对象,在Redux中有 redux-thunk 中间件.Thunks非常厉害，但是可能会导致actions的序列很复杂,测试起来也是很大的挑战.</div><div class=\"line\"></div><div class=\"line\">考虑到我们的 图片浏览程序.当应用加载是,需要做:</div><div class=\"line\">- 从服务器请求图片数组</div><div class=\"line\">- 当图片加载完毕,显示提示消息</div><div class=\"line\">- 当远程数据返回以后,选择初始图片显示</div><div class=\"line\">- 处理可能出现的错误</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">这些事件都要在用户点击应用里的任何元素之前完成!</div><div class=\"line\">我们该怎么做呢？</div><div class=\"line\">redux-saga就是为此而诞生,为我们的应用提供绝佳的服务.</div><div class=\"line\"></div><div class=\"line\">redux-sage</div><div class=\"line\">___</div><div class=\"line\">redux-sage可以在Redux应用中操作异步actions.他提供中间件和趁手的方法使构建复杂的异步操作流程轻而易举.</div><div class=\"line\"></div><div class=\"line\">一个saga是一个Generator(生成器),Generator函数是ES2015新添加的特性.可能是你第一次遇到Generator函数,这样你会觉得有点古怪,可以参考(ruanyifeng文章).不要苦恼，如果你对此仍然很抓耳挠腮.使用redux-sage你不需要javascript异步编程的博士学位.</div><div class=\"line\"></div><div class=\"line\">因为使用了generators的缘故,我们能创建一个顺序执行的命令序列，用来描述复杂的异步操作流程(workflows).整个图片的加载流程序列如下：</div></pre></td></tr></table></figure></p>\n<p>   export function* loadImages() {<br>  try {<br>    const images = yield call(fetchImages);<br>    yield put({type: ‘IMAGES_LOADED’, images})<br>    yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>  } catch(error) {<br>    yield put({type: ‘IMAGE_LOAD_FAILURE’, error})<br>  }<br>}</p>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield call(loadImages);<br>  }<br>}<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">   ___</div><div class=\"line\">   </div><div class=\"line\">####第一个saga</div><div class=\"line\"></div><div class=\"line\">我们将开始一个简单的saga实例,然后配置他连接到我们的应用.在`src`创建一个文件</div><div class=\"line\">`saga.js`</div></pre></td></tr></table></figure></p>\n<p>   export function* sayHello() {<br>  console.log(‘hello’);<br>}<br>  <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们的saga是一个简单的generator函数.函数后面的`*`作为标志,他也被叫做”super star”.</div><div class=\"line\"></div><div class=\"line\">现在在`main.js`文件中导入新函数,并且执行他.</div></pre></td></tr></table></figure></p>\n<p>  import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>\n<p>+import {sayHello} from ‘./sagas’;<br>+sayHello();</p>\n<p>const store = createStore(reducer);</p>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">不管你盯住终端多长时间,“hello”永远不会出现.</div><div class=\"line\">这是因为`sayHello`是一个generator！Generator 不会立即执行.如果你把代码该为`sayHello().next();`你的“hello”就出现了.不用担心,我们不会总是调用`next`.正如Redux,redux-saga用来消除应用开发中的痛苦.</div><div class=\"line\"></div><div class=\"line\">配置 redux-sage</div><div class=\"line\">___</div></pre></td></tr></table></figure></p>\n<p>   import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>-import { createStore } from ‘redux’<br>+import { createStore, applyMiddleware } from ‘redux’<br>+import createSagaMiddleware from ‘redux-saga’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>\n<p>import {sayHello} from ‘./sagas’;<br>-sayHello()</p>\n<p>-const store = createStore(reducer);<br>+const store = createStore(</p>\n<ul>\n<li>reducer,</li>\n<li>applyMiddleware(createSagaMiddleware(sayHello))<br>+);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ___</div><div class=\"line\">  我们已从Redux导入了`applyMiddleware`函数.从redux-saga导入`createSagaMiddleware`函数.当我们创建store的时候,我们需要通过中间件提供Redux需要的功能.在这个实例中,我们会调用`applyMiddleware`函数,这个函数返回`createSagaMiddleware(sayHello)`的结果.在幕后,redux-saga加载`sayHello`函数,仪式性的调用`next`函数.</div><div class=\"line\">  </div><div class=\"line\">  应该可以在终端中看到提示消息了.</div><div class=\"line\">  现在让我们构建加载图片的saga</div><div class=\"line\">  </div><div class=\"line\">####通过Saga加载图片数据</div><div class=\"line\">___</div><div class=\"line\">我们将删除出sayHello saga,使用`loadImages` saga</div></pre></td></tr></table></figure></p>\n<p>  -export function* sayHello() {</p>\n<ul>\n<li>console.log(‘hello’);<br>-}</li>\n</ul>\n<p>+export function* loadImages() {</p>\n<ul>\n<li>console.log(‘load some images please’)<br>+}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">不要忘了更新`main.js`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>\n<p>-import {sayHello} from ‘./sagas’;<br>+import {loadImages} from ‘./sagas’;</p>\n<p>const store = createStore(<br>  reducer,</p>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(sayHello))</li>\n</ul>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(loadImages))<br>);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">现在saga已经加载,在`saga.js`中添加`fetchImages`方法</div></pre></td></tr></table></figure></p>\n<pre><code>const API_KEY = &apos;a46a979f39c49975dbdd23b378e6d3d5&apos;;\n</code></pre><p>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>\n<p>const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href=\"https://farm${farm}.staticflickr.com/${server}/${id}\" target=\"_blank\" rel=\"external\">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> `fetchImages`方法返回一个promise对象.我们将调用`fetchImages`,但是现在我们要使用`yield`关键字.通过黑暗艺术和巫术,generators理解Promise对象,正如终端输出的日志显示,我们已经收获了一个图片URLs的数组.看看`loadImages`的代码,他看起来像是典型的同步操作代码.`yield`关键字是秘制调味酱,让我们的代码用同步格式执行异步操作活动.</div><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\"> ####封装我们的异步API请求.</div><div class=\"line\"> </div><div class=\"line\"> 首先来定义一下需要使用的api.他没有什么特殊的地方,实际上他和早先加载Flickr images的代码是相同的.我们创建`flickr.js`文件</div></pre></td></tr></table></figure></p>\n<p>   const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;<br>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>\n<p>export const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href=\"https://farm${farm}.staticflickr.com/${server}/${id}\" target=\"_blank\" rel=\"external\">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">严格意义上来说,不需要这么做,但是这会带来一定的好处.我们处在应用的边缘(boundaries <span class=\"keyword\">of</span> our application,意思是说在这里的代码可能是很多和远程服务器交互的代码，可能逻辑会很复杂),事情都有点乱.通过封装和远程API交互的逻辑,我们的代码将会很整洁,很容易更新.如果需要抹掉图片服务也会出奇的简单.</div><div class=\"line\"></div><div class=\"line\">我们的`saga.js`看起来是这个样子：</div></pre></td></tr></table></figure></p>\n<p>  import {fetchImages} from ‘./flickr’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们仍然需要在saga外获取数据,并且进入应用的state(使用异步获取的远程数据更新state).为了处理这个问题,我们将使用”effects”.</div><div class=\"line\"></div><div class=\"line\">####从saga来更新应用</div><div class=\"line\"></div><div class=\"line\">我们可以通过`dispatch`或者store作为参数来调用saga,但是这个方法时间一长就会给人造成些许的困扰.我们选择采用redux-saga提供的`put`方法.</div><div class=\"line\">首先我们更新`reducer.js`操作一个新的action类型`IMAGES_LOADED`.</div></pre></td></tr></table></figure></p>\n<p>const defaultState = {</p>\n<ul>\n<li>images: []<br>}</li>\n</ul>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘IMAGE_SELECTED’:<br>      return {…state, selectedImage: action.image};</p>\n<ul>\n<li>case ‘IMAGES_LOADED’:</li>\n<li><p>return {…state, images: action.images};<br>default:<br>return state;<br>}<br>}     </p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">我们添加了新的分支,并从`<span class=\"keyword\">default</span>State`中删除了硬编码的URLs数据.`IMAGES_LOADED`分支现在返回一个更新的<span class=\"keyword\">state</span>,包含action的image数据.</div><div class=\"line\">下一步我们更新saga:</div></pre></td></tr></table></figure>\n<p>import {fetchImages} from ‘./flickr’;<br>+import {put} from ‘redux-saga/effects’;</p>\n</li>\n</ul>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();</p>\n<ul>\n<li>yield put({type: ‘IMAGES_LOADED’, images})<br>}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">导入`put`以后,我们在`loadImages`添加另外一行.他`yield` `put`函数调用的返回结果.在幕后,redux-saga 分发这些动作,reducer接收到了消息!</div><div class=\"line\">\t   怎样才能使用特定类型的action来触发一个saga?</div><div class=\"line\">\t   </div><div class=\"line\">####使用actions来触发saga工作流</div><div class=\"line\">___</div><div class=\"line\">Sagas变得越来越有用,因为我们有能力使用redux actions来触发工作流.当我们这样做,saga会在我们的应用中表现出更大的能力.首先我们创建一个新的saga.`watchForLoadImages`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import {fetchImages} from ‘./flickr’;<br>-import {put} from ‘redux-saga/effects’;<br>+import {put, take} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})<br>}</p>\n<p>+export function* watchForLoadImages() {</p>\n<ul>\n<li>while(true) {</li>\n<li>yield take(‘LOAD_IMAGES’);</li>\n<li>yield loadImages();</li>\n<li>}<br>+}   <figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ___</div><div class=\"line\">新的saga使用的是<span class=\"keyword\">while</span>来保持一直激活和等待调用状态.在循环的内部,我们生成(<span class=\"keyword\">yield</span>)一个redux<span class=\"params\">-sage</span>调用方法:<span class=\"string\">`take`</span>.<span class=\"keyword\">Take</span>方法监听任何类型的actions,他也会使saga接受下一个<span class=\"keyword\">yield</span>.在上面的例子中我们调用了一个方法<span class=\"string\">`loadImages`</span>,初始化图片加载.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>\n<p>-import {loadImages} from ‘./sagas’;<br>+import {loadImages} from ‘./watchForLoadImages’;</p>\n<p>const store = createStore(<br>  reducer,</p>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(loadImages))</li>\n</ul>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(watchForLoadImages))<br>);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">更新了`main.js`以后,应用不再加载图片,我们需要在action creators中添加`loadImages`的`action`.</div></pre></td></tr></table></figure></p>\n<p>export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;<br>+const LOAD_IMAGES = ‘LOAD_IMAGES’;</p>\n<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}</p>\n<p>+export function loadImages() {</p>\n<ul>\n<li>return {</li>\n<li>type: LOAD_IMAGES</li>\n<li>}<br>+}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">因为我们已经绑定了action creators(Action创建器),我们只需要在`Gallery`组件中调用这个action就可以了.</div><div class=\"line\"></div><div class=\"line\">####block(阻塞)和no-blocking(非阻塞)效应</div><div class=\"line\">现在我们的引用工作的足够好了,但是可能还有更多的问题需要考虑.`watchForLoadImages` saga包含 block effects.那么这到底是什么意思呢？这意味着在工作流中我们只能执行一次`LOAD_IMAGES`!在诸如我们现在构建的小型应用一样,这一点不太明显,实际上我们也仅仅加载了一次图片集.</div><div class=\"line\">实际上，普遍的做法是使用`fork` effect 代替  `yield` 来加载图片</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">使用`fork`助手(helper)函数,`watchForLoadImages`就变成了非阻塞saga了,再也不用考虑他是不是以前掉用过.redux-sagas 提供两个helpers,`takeEvery`和`takeLastest`（takeEvery监听多次action，不考虑是不是同一种action type,takeLatest只处理同一种action type的最后一次调用）.</div><div class=\"line\">####选择默认的图片</div><div class=\"line\">Sagas按照队列来执行acitons,所以添加更多的saga也很容易.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})</p>\n<ul>\n<li>yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>}</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">在 `loadImages`工作流上,我们可以yield put函数调用,action type是`IMAGE_SELECTED`.发送我们选择的图片(在这个例子中，发送的仅仅是图片的url的字符串).</div><div class=\"line\">####错误处理</div><div class=\"line\">如果在saga循环内部出现错误,我们要考虑提醒应用做出合理的回应.所有流程包装到try/catch语句块里就可以实现,捕获错误以后`put`一个提示信息作为`IMAGE_LOAD_FAILURE` action的内容.</div></pre></td></tr></table></figure></p>\n<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {</p>\n<ul>\n<li>try {<br> const images = yield fetchImages();<br> yield put({type: ‘IMAGES_LOADED’, images})<br> yield put({type: ‘IMAGE_SELECTED’, image: images[0]})</li>\n<li>} catch(error) {</li>\n<li>yield put({type: ‘IMAGE_LOAD_FAILURE’, error})</li>\n<li>}<br>}</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"emphasis\">___</span></div><div class=\"line\"><span class=\"section\">####Sagas的测试</span></div><div class=\"line\"><span class=\"emphasis\">___</span></div><div class=\"line\">在应用中使用Redux,测试变得相当的舒服. 看看我们的[<span class=\"string\">鹅蛋头系列课程</span>](<span class=\"link\">https://egghead.io/series/react-testing-cookbook</span>),可以了解到很多React的测试技术.</div><div class=\"line\">使用Redux-saga在棒的一个方面就是异步代码测试很容易.测试javascript异步代码真是一件苦差事.有了saga,我们不需要跳出引用的核心代码.Saga把javascript的痛点都抹掉了.是不是意味着我们要写更多的测试?对的.</div><div class=\"line\"></div><div class=\"line\">我们会使用<span class=\"code\">`tape`</span>组件,首先做一些配置工作.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.end();<br>});<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">添加所有需要的组件,现在我们添加一个测试.这个测试接收一个名称和一个函数作为形参.在测试的函数体内部代码块,我们创建了一个saga生成器代码实例.在这个实例里面我们尅是测试saga的每一个动作.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>generator.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">`assert.deepEqual`方法接收两个值,检查一下他们是不是深度相同(js对象的概念).第一行代码是`generator.next().value`的调用,这个调用使生成器从暂停中恢复,得到值.下一个值单单是一个`false`.我想看到他失败,最后一个参数描述了测试期待的行为.</div><div class=\"line\">在项目文件夹中命令行运行`npm test`看看结果:</div></pre></td></tr></table></figure>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n</li>\n</ul>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>generator.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">测试结果和预期的一样失败,结果有点意思.实际的结论是`&#123;TAKE:<span class=\"string\">'LOAD_IMAGES'</span>&#125;`,这是我们调用`take(<span class=\"string\">'LOAD_IMAGES'</span>)`受到的结果.实际上,我们的saga’可以yield一个对象来代替调用`take`.但是`take`添加了一些代码,让我们少敲些代码.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,</p>\n<ul>\n<li>false</li>\n</ul>\n<ul>\n<li><p>take(‘LOAD_IMAGES’),<br>‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们简单的调用`take`函数,就可以得到期待的结果了.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>gen.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">下一个测试使我们确信`loadImages`saga在流程的下一个阶段会被自动调用.</div><div class=\"line\">我们需要一个 false来检查结果.</div><div class=\"line\">更新一下saga代码,yield一个`loadImages` saga:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">___</span></div><div class=\"line\">现在运行测试,将会看到下面结果：</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received\"><a href=\"#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received\" class=\"headerlink\" title=\"✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { _invoke: [Function: invoke] }<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">哼！`&#123; _invoke: [Function: invoke] &#125;`绝对不是我们yield take想要的结果.</div><div class=\"line\">有问题.幸运的是redux-saga可以使用诸如`fork`一样的`effects`来解决这个问题.`fork`,`take`和其他的effect方法返容易满足测试要求的简单对象.这些effects返回的对象是一个指导redux-saga进行任务执行的集合.这一点对于测试来说非常的优雅,因为我们不用担心类似远程服务请求的副作用.有了redux-saga,我们把注意点放到请求执行的命令上.</div><div class=\"line\">下面让我们更新一下saga,再一次使用`fork`.</div></pre></td></tr></table></figure></p>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li><p>yield fork(loadImages);</p>\n<p>}<br>}</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">这里使用`yield fork(loadImages)`直接代替`loadImages`.需要注意的是我们还没有执行`loadImages`,而是作为参数传递给`fork`.</div><div class=\"line\">再次运行`npm test`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1\"><a href=\"#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1\" class=\"headerlink\" title=\"✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { FORK: { args: [], context: null, fn: [Function: loadImages] } }<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">结果得到了一个单纯对象而不是一个函数调用.函数在浏览器端也同时加载了,但是我们现在可以轻松的在saga 工作流里测试这个步骤.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>\n<p>  assert.deepEqual(<br>    generator.next().value,</p>\n<ul>\n<li>false,</li>\n</ul>\n<ul>\n<li><p>yield fork(loadImages),<br>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’<br>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">测试`loadImages`saga是一样的,只需要把`yield fetchImages`更新为`yield fork(fetchImages)`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>test(‘loadImages’, assert =&gt; {<br>  const gen = loadImages();</p>\n<p>  assert.deepEqual(<br>    gen.next().value,<br>    call(fetchImages),<br>    ‘loadImages should call the fetchImages api’<br>  );</p>\n<p>  const images = [0];</p>\n<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGES_LOADED’, images}),<br>    ‘loadImages should dispatch an IMAGES_LOADED action with the images’<br>  );</p>\n<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGE_SELECTED’, image: images[0]}),<br>    ‘loadImages should dispatch an IMAGE_SELECTED action with the first image’<br>  );</p>\n<p>  const error = ‘error’;</p>\n<p>  assert.deepEqual(<br>    gen.throw(error).value,<br>    put({type: ‘IMAGE_LOAD_FAILURE’, error}),<br>    ‘loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown’<br>  );</p>\n<p>  assert.end();<br>});<br>```</p>\n<hr>\n<p>特别注意最后一个<code>assert</code>.这个断言测试使用异常捕获代替生成器函数的next方法.另一个非常酷的地方是：可以传值.注意看代码,我们创建了<code>images</code>常量,并且传递到next函数.saga可以在接下来的任务序列中使用传递的值.<br> 太棒了,这种方法是测试异步编程的程序员梦寐以求的技术.</p>\n<p> #####接下来做什么？</p>\n<hr>\n<p> 你可以<a href=\"https://github.com/joelhooks/egghead-react-redux-image-gallery\" target=\"_blank\" rel=\"external\">fork一下这个例子的代码</a>.</p>\n<p> 如果你想扩充这个应用,可以做一下几个方面的工作.</p>\n<ul>\n<li>做一个幻灯显示下一张要显示的图片</li>\n<li>允许使用者搜索Flickr图片</li>\n<li>添加其他提供图片的API</li>\n<li>允许用户选择喜欢的API进行搜索.</li>\n</ul>\n<p>我们仅仅和生成器碰了一下面,但是即便如此,希望在联合使用redux-saga library,Redux和React的时候给你一些帮助.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>看到这篇文章<a href=\"http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/\" target=\"_blank\" rel=\"external\">build an image gallery using redux saga</a>，觉得写的不错，长短也适中.  文后有<a href=\"https://github.com/phpsmarter/egghead-react-redux-image-gallery/tree/comment\" target=\"_blank\" rel=\"external\">注释版的github代码库,请使用comment分枝</a>. Flickr API可能需要有fQ的基本能力.可以使用google的翻译作为参考，这篇文章google翻译版的中文水平让我吃了一惊.<br>翻译已经完成.</p>\n</blockquote>\n<hr>\n<p>###使用React,Redux和reudx-saga构建一个图像浏览程序(翻译)<br>Joel Hooks ,2016年3月</p>\n<p>#####构建一个图片长廊</p>\n<p>图像长廊是一个简单的程序，从Flicker API 加载图片URLs,允许用户查看图片详情。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-b0d03ac095f09c55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"Screen Shot 2016-03-20 at 3.42.17 PM-2.png\"></p>\n<p>后续我们会使用React,Redux和redux-saga.React作为核心框架，优势是虚拟dom(virtual-dom)的实现。Redux在程序内负责state的管理。最后，我们会使用redux-saga来执行javascript的异步操作步骤。</p>\n<p>我们会使用ES6(箭头函数，模块，和模板字符串)，所以我们首先需要做一些项目的配置工作。</p>\n<p>#####项目配置和自动化</p>\n<hr>\n<p>如果要开始一个React项目，须有有一系列的配置选项。对于一个简单的项目，我想把配置选项尽可能缩减。考虑到浏览器的版本问题，使用Babel把ES6编译为ES5。</p>\n<p>首先使用npm init 创建一个<code>package.json</code>文件</p>\n<p>package.json<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">  &#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"egghead-react-redux-image-gallery\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"Redux Saga beginner tutorial\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"babel-node ./src/saga.spec.js | tap-spec\"</span>,</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"repository\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"Joel Hooks &lt;joelhooks@gmail.com&gt;\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-polyfill\"</span>: <span class=\"string\">\"6.3.14\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^0.14.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^0.14.3\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-redux\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"redux\"</span>: <span class=\"string\">\"^3.3.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"redux-saga\"</span>: <span class=\"string\">\"^0.8.0\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-cli\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-core\"</span>: <span class=\"string\">\"6.4.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-stage-2\"</span>: <span class=\"string\">\"^6.1.18\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babelify\"</span>: <span class=\"string\">\"^7.2.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"^13.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"budo\"</span>: <span class=\"string\">\"^8.0.4\"</span>,</div><div class=\"line\">    <span class=\"string\">\"tap-spec\"</span>: <span class=\"string\">\"^4.1.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"tape\"</span>: <span class=\"string\">\"^4.2.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p> 有了<code>package.json</code>, 可以在项目文件夹命令行运行 <code>npm install</code> 安装程序需要的依赖项。</p>\n<p> .babelrc</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>, <span class=\"string\">\"stage-2\"</span>]</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>这个文件告诉babel,我们将会使用ES2015(ES6),React以及ES2106的stage-2的一些特征。</p>\n<p><code>package.json</code>有两个标准的script脚本配置：<code>start</code>和<code>test</code>.现在我们想通过start脚本加载程序，start会使用<code>src</code>目录的一些文件，所以西药先创建<code>src</code>文件夹.在<code>src</code>文件夹添加下面的一些文：<br>index.html<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>egghead: React Redux Image Gallery<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></div><div class=\"line\">  ![](http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg)</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Egghead Image Gallery<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<hr>\n<hr>\n<p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<hr>\n<p>style.css<br>  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-family</span>: Helvetica, Arial, Sans-Serif, sans-serif;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.egghead</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-gallery</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid darkgray;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.gallery-image</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">align-items</span>: center;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.gallery-image</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">max-height</span>: <span class=\"number\">250px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-scroller</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: space-around;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">overflow-y</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.image-scroller</span> <span class=\"selector-tag\">img</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p><code>index.html</code>文件加载<code>style.css</code>文件提供一些基本的布局样式，同时也加载<code>build.js</code>文件，这是一个生成出来的文件.<code>main.js</code>是一个最基础的React程序，他在<code>index.html</code>的<code>#root</code>元素中渲染一个<code>h1</code>元素。创建这些文件以后，在项目文件夹中命令行运行<code>npm start</code>。在浏览器打开<code>http://10.11.12.1:9966</code>.就可以看到<code>index.html</code>中渲染的页面</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-b24265cbe5f89d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240\" alt=\"运行加载图\"></p>\n<p>现在我们来构建基础的<code>Gallery</code> React 组件</p>\n<p>#####在Gallery中显示一些图片</p>\n<hr>\n<p> 首先我们需要尽可能快的获得一个可以显示的图片素材.在项目文件夹中创建一个文件<code>Gallery.js</code><br> Gallery.js<br>  <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">    import React, &#123;Component&#125; from <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\">const flickrImages = [</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\"</span>,</div><div class=\"line\">  <span class=\"string\">\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\"</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: flickrImages,</div><div class=\"line\">      selectedImage: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map((image, <span class=\"keyword\">index</span>) =&gt; (</div><div class=\"line\">            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p>  我们直接在组件中硬编码了一个提供数据的数组，让项目尽快的工作起来.<code>Gallery组件</code>继承<code>Component组件</code>,在构造函数中创建一些组件的出事状态.最后我们利用一些样式标记渲染一下文件。<code>image-scroller</code>元素遍历(<code>map</code>方法)图片数组,生成摘要小图片。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span></div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> Gallery <span class=\"keyword\">from</span> <span class=\"string\">'./Gallery'</span></div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">-  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">+  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Gallery</span> /&gt;</span>,</span></div><div class=\"line\">  document.getElementById('root')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>  到现在，我们使用硬编码的图片URLs(通过fickrImages)数组,第一张图片作为<code>selectedImage</code>.这些属性在<code>Gallery</code>组件的构造函数缺省配置中，通过初始状态(initial)来设定.</p>\n<p>  接下来在组件中添加一个和组件进行交互操作的方法，方法具体内容是操做<code>setSate</code>.<br>  Gallery.js</p>\n  <figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">     export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: flickrImages,</div><div class=\"line\">      selectedImage: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">+  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">+    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">+      selectedImage</div><div class=\"line\">+   &#125;)</div><div class=\"line\">+  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">        &lt;<span class=\"keyword\">div</span> className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map((image, <span class=\"keyword\">index</span>) =&gt; (</div><div class=\"line\">-            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125;&gt;</div><div class=\"line\">+            &lt;<span class=\"keyword\">div</span> key=&#123;<span class=\"keyword\">index</span>&#125; onClick=&#123;<span class=\"keyword\">this</span>.handleThumbClick.bind(<span class=\"keyword\">this</span>,image)&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">      &lt;/<span class=\"keyword\">div</span>&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>在<code>Gallery组件</code>添加<code>handleThumbClick</code>方法,任何元素都可用通过<code>onClick</code>属性调用这个方法.<code>image</code>作为第二个参数传递，元素自身作为第一个参数传递.bind方法传递javascript函数调用上下文对象是非常便捷。</p>\n<p>看起来不错!现在我们有了一些交互操作的方法，有点“APP”的意思了。截止目前，我们已经让app运行起来了，接下来要考虑怎么加载远程数据。最容易加载远程数据的地方是一个<code>React组件</code>生命周期方法,我们使用<code>componentDidMount</code>方法,通过他从<code>Flikr API</code>请求并加载一些图片.</p>\n<p>Gallery.js<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      <span class=\"attr\">images</span>: flickrImages,</div><div class=\"line\">      <span class=\"attr\">selectedImage</span>: flickrImages[<span class=\"number\">0</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">+  componentDidMount() &#123;</div><div class=\"line\">+    <span class=\"keyword\">const</span> API_KEY = <span class=\"string\">'a46a979f39c49975dbdd23b378e6d3d5'</span>;</div><div class=\"line\">+    <span class=\"keyword\">const</span> API_ENDPOINT = <span class=\"string\">`https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&amp;api_key=<span class=\"subst\">$&#123;API_KEY&#125;</span>&amp;format=json&amp;nojsoncallback=1&amp;per_page=5`</span>;+</div><div class=\"line\">+</div><div class=\"line\">+    fetch(API_ENDPOINT).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">+      <span class=\"keyword\">return</span> response.json().then(<span class=\"function\">(<span class=\"params\">json</span>) =&gt;</span> &#123;</div><div class=\"line\">+        <span class=\"keyword\">const</span> images = json.photos.photo.map(<span class=\"function\">(<span class=\"params\">&#123;farm, server, id, secret&#125;</span>) =&gt;</span> &#123; </div><div class=\"line\">+            <span class=\"keyword\">return</span> <span class=\"string\">`https://farm<span class=\"subst\">$&#123;farm&#125;</span>.staticflickr.com/<span class=\"subst\">$&#123;server&#125;</span>/<span class=\"subst\">$&#123;id&#125;</span>_<span class=\"subst\">$&#123;secret&#125;</span>.jpg`</span></div><div class=\"line\">+        &#125;);</div><div class=\"line\">+</div><div class=\"line\">+        <span class=\"keyword\">this</span>.setState(&#123;images, <span class=\"attr\">selectedImage</span>: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">+      &#125;)</div><div class=\"line\">+    &#125;)</div><div class=\"line\">+  &#125;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure></p>\n<hr>\n<p>我们在<code>Gallery</code>类中添加了一个新的方法,通过React的<code>componentDidMount</code>生命周期方法触发Flickr图片数据的获取。</p>\n<p>在<code>React</code>组件运行的不同时间点，组件会调用不同的生命周期函数。在这段代码中，当组件被渲染到<code>DOM</code>中的时间点,<code>componentDidMount</code>函数就会被调用。需要注意的是:<code>Gallery</code>组件只有一次渲染到<code>DOM</code>的机会，所以这个函数可以提供一些初始化图片.考虑到在APP的整个生命周期中,有更多的动态组件的加载和卸载,这可能会造成一些多余的调用和无法考虑到的结果。</p>\n<p>我们使用浏览器接口(browser API)的<code>fetch</code>方法执行请求.Fetch返回一个promise对象解析<code>response</code>对象.调用<code>response.json()</code>方法,返回另一个promise对象，这就是我们实际需要的<code>json</code>格式的数据.遍历这个对象以后就可以获取图片的url地址.</p>\n<blockquote>\n<p>坦白讲，这个应用目前还很简单.我们还需要在这里花费更多的时间，还有一些基础的需求需要完成.或许我们应该在promise处理流程中添加错误处理方法,如果图片数据获取成功也需要一些处理逻辑.在这个地方，你需要发挥一些想象力考虑一下更多的逻辑.在生产实践中简单的需求是很少见的.很快,应用中就会添加更多的需求。认证,滚动橱窗,加载不同图片库的能力和图片的设置等等.仅仅这些还远远不够.</p>\n</blockquote>\n<p>我们已经使用<code>React</code>构建了一个加载图片库的程序。接下来我们需要考虑到随着程序功能的添加，到底需要哪些基础的模式.首先考虑到的一个问题就是要把应用的状态(state)控制从<code>Gallery</code>组件中分离出来.</p>\n<p>我们通过引入<code>Redux</code>来完成应用的状态管理工作。</p>\n<p>#####使用<code>Redux</code>来管理状态</p>\n<hr>\n<p>在你的应用中只要使用了<code>setState</code>方法都会让一个组件从无状态变为有状态的组件.糟糕的是这个方法会导致应用中出现一些令人困惑的代码,这些代码会在应用中到处蔓延。</p>\n<p><code>Flux</code>构架来减轻这个问题.<code>Flux</code>把逻辑(logic)和状态(state)迁移到<code>Store</code>中.应用中的动作(<code>Actions</code>)被<code>Dispatch</code>的时候,<code>Stores</code><br>会做相应的更新.<code>Stores</code>的更新会触发<code>View</code>根据新状态的渲染.</p>\n<p>那么我们为什么要舍弃<code>Flux</code>?他竟然还是“官方”构建的.<br>好吧！<code>Redux</code>是基于<code>Flux</code>构架的,但是他有一些独特的优势.下面是Dan Abramov(Redux创建者)的一些话：</p>\n<blockquote>\n<p>Redux和Flux没有什么不同.总体来讲他们是相同的构架,但是Redux通过功能组合把Flux使用回调注册的复杂点给屏蔽掉了.<br>两个构架从更本上讲没有什么不同，但是我发现Redux使一些在Flux比较难实现的逻辑更容易实现.</p>\n</blockquote>\n<p><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">Redux文档</a>非常棒.<br>如果你还没有读过代码的卡通教程或者Dan的系列文章.赶快去看看吧！</p>\n<p>#####启动Redux</p>\n<p>第一件需要做的事事初始化<code>Redux</code>,让他在我们的程序中运行起来.现在不需要做安装工作，刚开始运行<code>npm install</code>的时候已经安装好了依赖项，我们需要做一些导入和配置工作.<br><strong>reducer函数是Redux的大脑.</strong> 每当应用分发(或派遣,dispatch)一个操作(action)的时候,<code>reducer</code>函数会接受操作(action)并且依据这个动作(action)创建<code>reducer</code>自己的<code>state</code>.因为<code>reducers</code>是纯函数，他们可以组合到一起，创建应用的<code>一个完整state</code>.让我们在<code>src</code>中创建一个简单的reducer:<br>reducer.js</p>\n <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span>, action) &#123;</div><div class=\"line\">   console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">   return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p> 一个reducer函数接受两个参数(arguments).</p>\n<ol>\n<li>[x] <code>state</code>-这个数据代表应用的状态(state).reducer函数使用这个状态来构建一个reducer自己可以管理的状态.如果状态没有发生改变,reducer会返回输入的状态.</li>\n<li>[x]  <code>action</code>-这是触发reducer的事件.Actions通过store派发(dispatch),由reducer处理.action需要一个<code>type</code>属性来告诉reducer怎么处理state.</li>\n</ol>\n<p>目前,<code>images</code> reuducer在终端中打印出日志记录，表明工作流程是正常的，可以做接下来的工作了.为了使用reducer，需要在<code>main.js</code>中做一些配置工作:<br>main.js<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"babel-polyfill\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Gallery <span class=\"keyword\">from</span> <span class=\"string\">'./Gallery'</span>;</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span></div><div class=\"line\">+ <span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducer'</span></div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">const</span> store = createStore(reducer);</div><div class=\"line\"></div><div class=\"line\">+ <span class=\"keyword\">import</span> &#123;Provider&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">+  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Gallery</span> /&gt;</span></div><div class=\"line\">+  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<hr>\n<p> 我们从<code>Redux</code>库中导入<code>createStore</code>组件.<code>creatStore</code>用来创建Redux的store.大多数情况下,我们不会和store直接交互,store在Redux中做幕后管理工作.</p>\n<p> 也需要导入刚才创建的reducer函数,以便于他可以被发送到store.<br> 我们将通过<code>createStore(reducer)</code>操作，利用reducer来配置应用的store.这个示例仅仅只有一个reducer,但是<code>createStore</code>可以接收多个reducer作为参数.稍后我们会看到这一点.</p>\n<p> 最后我们导入高度集成化的组件<code>Provider</code>,这个组件用来包装<code>Gallery</code>,以便于我们在应用中使用Redux.我们需要把刚刚创建的store传递给<code>Provider</code>.你也可以不使用<code>Provider</code>,实际上Redux可以不需要React.但是我们将会使用<code>Provider</code>,因为他非常便于使用.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-6667a047b669d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320\" alt=\"打印日志\"></p>\n<p> 这张图可能有点古怪，但是展示了Redux的一个有意思的地方.所有的reducers接收在应用中的全部actions(动作或操作).在这个例子中我们可以看到Redux自己派发的一个<code>action</code>.</p>\n<p> #####连接Gallery组件</p>\n<p> 借助Redux,我们将使用”connected”和“un-connected”组件.一个<code>connected</code>组件被连线到store.<code>connected</code>组件使控制动作事件(controls action event)和store协作起来.通常,一个<code>connected</code>组件有子组件,子组件具有单纯的接收输入和渲染功能，当数据更新时执行调用.这个子组件就是unconnected组件.</p>\n<blockquote>\n<p>提示:当Rect和Redux配合是工作的非常好,但是Redux不是非要和React在一起才能工作.没有React,Redux其实可以和其他框架配合使用.</p>\n</blockquote>\n<p>在应用中需要关联<code>React组件</code>和<code>Redux Store</code> 的时候，<code>react-redux</code>提供了便捷的包装器.我们把react-redux添加进<code>Gallery</code>中<br>,从而使<code>Gallery</code>成为首要的关联组件.</p>\n<p>Gallery.js<br> <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\">+<span class=\"keyword\">import</span> &#123;connect&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"></div><div class=\"line\">-<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> &#123;</span></div><div class=\"line\">+<span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> &#123;</span></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">+    <span class=\"built_in\">console</span>.log(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: []</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    const API_KEY = <span class=\"string\">'a46a979f39c49975dbdd23b378e6d3d5'</span>;</div><div class=\"line\">    const API_ENDPOINT = `<span class=\"javascript\">https:<span class=\"comment\">//api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=$&#123;API_KEY&#125;&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</span></span>`;</div><div class=\"line\"></div><div class=\"line\">    fetch(API_ENDPOINT).<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(response)</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> response.json().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(json)</span> =&gt;</span> &#123;</div><div class=\"line\">        const images = json.photos.photo.map(<span class=\"function\"><span class=\"params\">(&#123;farm, server, id, secret&#125;)</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> `<span class=\"javascript\">https:<span class=\"comment\">//farm$&#123;farm&#125;.staticflickr.com/$&#123;server&#125;/$&#123;id&#125;_$&#123;secret&#125;.jpg</span></span>`</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;images, selectedImage: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">      selectedImage</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123;images, selectedImage&#125; = <span class=\"keyword\">this</span>.state;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div className=<span class=\"string\">\"image-gallery\"</span>&gt;</div><div class=\"line\">        &lt;div className=<span class=\"string\">\"gallery-image\"</span>&gt;</div><div class=\"line\">          &lt;div&gt;</div><div class=\"line\">            &lt;img src=&#123;selectedImage&#125; /&gt;</div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        &lt;div className=<span class=\"string\">\"image-scroller\"</span>&gt;</div><div class=\"line\">          &#123;images.map(<span class=\"function\"><span class=\"params\">(image, index)</span> =&gt;</span> (</div><div class=\"line\">            &lt;div key=&#123;index&#125; onClick=&#123;<span class=\"keyword\">this</span>.handleThumbClick.bind(<span class=\"keyword\">this</span>,image)&#125;&gt;</div><div class=\"line\">              &lt;img src=&#123;image&#125;/&gt;</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect()(Gallery)</div></pre></td></tr></table></figure></p>\n<hr>\n<p>从<code>react-redux</code>导入<code>connect</code>函数,可以在导出组件的时候把他变为链接组件(connected component).请注意,<code>connect()(Gallery)</code>代码把<code>Gallery</code>组件放在第二个形参中,这是因为<code>connect()</code>返回一个函数，这个函数接受一个React组件作为参数(argument).调用<code>connect()</code>函数时需要配置项.后面我们将会传递配置我们应用的actions和state参数.<br>我们也把<code>connect</code>作为默认配置到处模块.这一点非常重要！现在当我们<code>import Gallery</code>的时候,就不是一个单纯的React组件了,而是一个和Redux关联的组件了.</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2044710-72a9136f9b481bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620\" alt=\"\"></p>\n<p>如果你观察我们添加进构造器的<code>console.log</code>的输出,就可以看到<code>Gallery</code>组件的属性现在包括了一个<code>dispatch</code>函数.这个地方是<code>connect</code>为我们的应用修改的,这个改动赋予了组件把自己的动作对象(action objects)<code>派发</code>到<code>reducers</code>的能力.</p>\n  <figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gallery</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">+    <span class=\"keyword\">this</span>.props.dispatch(&#123;<span class=\"class\"><span class=\"keyword\">type</span></span>: <span class=\"symbol\">'TES</span>T'&#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</div><div class=\"line\">      images: []</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">[...]</div></pre></td></tr></table></figure>\n<hr>\n<p>我们可以在组件的构造器中调用派发功能.你可以在开发者的终端中看到来自reducer的日志声明.看到声明表示我们已经派发了第一个action!.Actions是一个单一的javascript对象,必需有<code>type</code>属性.Actions可以拥有任意数量和种类的其他属性.但是<code>type</code>可以让reducers理解这些动作到底是做什么用的(意译，意思是只有拥有type属性，reducers才知道对state做什么样的修改).</p>\n  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span>, action) &#123;</div><div class=\"line\">-  console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">+  switch(action.type) &#123;</div><div class=\"line\">+    case 'TEST':</div><div class=\"line\">+      console.<span class=\"keyword\">log</span>('THIS IS ONLY A TEST')</div><div class=\"line\">+  &#125;</div><div class=\"line\">  return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p> 总的reducers使用<code>switch代码块</code>过滤有关的消息,<code>Switch</code>语句使用actions的type属性,当一个<code>action</code>和<code>case</code>分支吻合以后,相应的单个reducer就会执行他的具体工作.</p>\n<p> 我们的应用现在关联到接收的动作.现在我们需要把<code>Redux</code>-<code>Store</code>提供的<code>state</code>关联到应用中.</p>\n<p> ####默认的应用状态(state)<br> reducer.js<br> <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">  const <span class=\"keyword\">default</span>State = &#123;</div><div class=\"line\">  images: []</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> function images(<span class=\"keyword\">state</span> = <span class=\"keyword\">default</span>State, action) &#123;</div><div class=\"line\">  switch(action.type) &#123;</div><div class=\"line\">    case 'TEST':</div><div class=\"line\">-      console.<span class=\"keyword\">log</span>('THIS IS ONLY A TEST')</div><div class=\"line\">+      console.<span class=\"keyword\">log</span>(<span class=\"keyword\">state</span>, action)</div><div class=\"line\">+      return <span class=\"keyword\">state</span>;</div><div class=\"line\">+    <span class=\"keyword\">default</span>:</div><div class=\"line\">+      return <span class=\"keyword\">state</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">-  return <span class=\"keyword\">state</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 我们创建一个<code>defaultState</code>对象,这个对象返回一个空数组作为images的属性.我们把<code>images</code>函数的参数<code>state</code>设置为默认.如果在test分支中输出日志,将会看到state不是undefined(空数组不是undefined)!reducer需要返回应用的当前state.这点很重要!现在我们没有做任何改变,所以仅仅返回state.注意我们在<code>case</code>中添加了default分支,reducer必须要返回一个state.</p>\n<p>在<code>Gallery</code>组件中，我们也可以把state做一定的映射(map)以后再连接到应用.</p>\n <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">  import React, &#123;Component&#125; <span class=\"keyword\">from</span> 'react'</div><div class=\"line\">import &#123;connect&#125; <span class=\"keyword\">from</span> 'react-redux';</div><div class=\"line\"></div><div class=\"line\">export class Gallery extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.props.dispatch(&#123;type: 'TEST'&#125;);</div><div class=\"line\">+    console.<span class=\"keyword\">log</span>(props);</div><div class=\"line\">-    this.<span class=\"keyword\">state</span> = &#123;</div><div class=\"line\">-      images: []</div><div class=\"line\">-    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">-  componentDidMount() &#123;</div><div class=\"line\">-    const API_KEY = 'a46a979f39c49975dbdd23b378e6d3d5';</div><div class=\"line\">-    const API_ENDPOINT = `https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&amp;api_key=$&#123;API_KEY&#125;&amp;format=json&amp;nojsoncallback=<span class=\"number\">1</span>&amp;per_page=<span class=\"number\">5</span>`;-</div><div class=\"line\">-</div><div class=\"line\">-    fetch(API_ENDPOINT).then((response) =&gt; &#123;</div><div class=\"line\">-      return response.json().then((json) =&gt; &#123;</div><div class=\"line\">-        const images = json.photos.photo.map((&#123;farm, server, id, secret&#125;) =&gt; &#123; </div><div class=\"line\">-            return `https://farm$&#123;farm&#125;.staticflickr.com/$&#123;server&#125;/$&#123;id&#125;_$&#123;secret&#125;.jpg`</div><div class=\"line\">-        &#125;);</div><div class=\"line\">-</div><div class=\"line\">-        this.<span class=\"built_in\">set</span>State(&#123;images, selectedImage: images[<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">-      &#125;)</div><div class=\"line\">-    &#125;)</div><div class=\"line\">-  &#125;</div><div class=\"line\">-  handleThumbClick(selectedImage) &#123;</div><div class=\"line\">-    this.<span class=\"built_in\">set</span>State(&#123;</div><div class=\"line\">-      selectedImage</div><div class=\"line\">-    &#125;)</div><div class=\"line\">-  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">-    const &#123;images, selectedImage&#125; = this.<span class=\"keyword\">state</span>;</div><div class=\"line\">+    const &#123;images, selectedImage&#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      <span class=\"variable\">&lt;div className=\"image-gallery\"&gt;</span></div><div class=\"line\">        <span class=\"variable\">&lt;div className=\"gallery-image\"&gt;</span></div><div class=\"line\">          <span class=\"variable\">&lt;div&gt;</span></div><div class=\"line\">            <span class=\"variable\">&lt;img src=&#123;selectedImage&#125; /&gt;</span></div><div class=\"line\">          &lt;/div&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">        <span class=\"variable\">&lt;div className=\"image-scroller\"&gt;</span></div><div class=\"line\">          &#123;images.map((image, index) =&gt; (</div><div class=\"line\">-            <span class=\"variable\">&lt;div key=&#123;index&#125; onClick=&#123;this.handleThumbClick.bind(this,image)&#125;&gt;</span></div><div class=\"line\">+            <span class=\"variable\">&lt;div key=&#123;index&#125;&gt;</span></div><div class=\"line\">              <span class=\"variable\">&lt;img src=&#123;image&#125;/&gt;</span></div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">          ))&#125;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+function mapStateToProps(<span class=\"keyword\">state</span>) &#123;</div><div class=\"line\">+  return &#123;</div><div class=\"line\">+    images: <span class=\"keyword\">state</span>.images</div><div class=\"line\">+    selectedImage: <span class=\"keyword\">state</span>.selectedImage</div><div class=\"line\">+  &#125;</div><div class=\"line\">+&#125;</div><div class=\"line\"></div><div class=\"line\">-export <span class=\"keyword\">default</span> connect()(Gallery)</div><div class=\"line\">+export <span class=\"keyword\">default</span> connect(mapStateToProps)(Gallery)</div><div class=\"line\"></div><div class=\"line\"> ``` </div><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\">  我们将移除连接组件中的所有图片加载和交互逻辑代码,如果你注意看`Gallery`组件的底部代码,你会注意到，我们创建了一个`mapStateToProps`函数,接收一个`<span class=\"keyword\">state</span>`作为参数,返回一个对象,把`<span class=\"keyword\">state</span>.images`映射为`images`属性.`mapStateToProps`做为参数传递给`connect`.</div><div class=\"line\">  正如名字暗示的一样,`mapStateToProps`函数接收当前应用的<span class=\"keyword\">state</span>,然后把<span class=\"keyword\">state</span>转变为组件的属性(propertys).如果在构造器中输出props,将会看到images数组是`reducer`返回的默认<span class=\"keyword\">state</span>.</div></pre></td></tr></table></figure>\n<p>   const defaultState = {</p>\n<ul>\n<li>images: []</li>\n</ul>\n<ul>\n<li>images: [</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,</li>\n<li>“<a href=\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“</li>\n<li>],</li>\n<li>selectedImage: “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</li>\n</ul>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘TEST’:<br>      console.log(state, action)<br>      return state;<br>    default:<br>      return state;<br>  }<br>}<br>  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">如果在`<span class=\"keyword\">default</span>State`中更新images数组,你将可以看到一些图片重新出现在gallery中!现在当用户点击缩略图的时候,我们可以反馈选择动作,返回对应的大图.</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">####更新state</span></div><div class=\"line\">怎么操作才能根据新选择的图片更新<span class=\"keyword\">state</span>?</div><div class=\"line\">需要配置reducer监听`IMAGE_SELECTED`动作,借助action携带的信息(payload,有的文章翻译为载荷,载荷怎么理解？手机载荷就是声音，短信和流量数据。如果是卡车就是拉的货物,如果是客车就乘载的乘客,action的载荷就是要让reducer明白你要干什么，需要什么)来更新<span class=\"keyword\">state</span>.</div></pre></td></tr></table></figure></p>\n<p>  const defaultState = {<br>  images: [<br>    “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,<br>    “<a href=\"https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“<br>  ],<br>  selectedImage: “<a href=\"https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg\" target=\"_blank\" rel=\"external\">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</p>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {</p>\n<ul>\n<li>case ‘TEST’:<br>case ‘IMAGE_SELECTED’:</li>\n<li>return state;</li>\n</ul>\n<ul>\n<li><p>return {…state, selectedImage: action.image};<br>default:<br>return state;<br>}<br>}</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">现在reducer已经准备接收`IMAGE_SELECTED` action了.在`IMAGE_SELECTED`分支选项内,我们在展开(spreading,ES6的对象操作方法),并重写`selectedImage`属性后,返回一个新state对象.了解更多的`...state`对象操作可以看`ruanyifeng`的书.</div></pre></td></tr></table></figure>\n<p>import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>\n</li>\n</ul>\n<p>export class Gallery extends Component {</p>\n<ul>\n<li>constructor(props) {</li>\n<li>super(props);</li>\n<li>this.props.dispatch({type: ‘TEST’});</li>\n<li>console.log(props);</li>\n<li>}<br>render() {</li>\n<li>const {images, selectedImage} = this.props;</li>\n</ul>\n<ul>\n<li><p>const {images, selectedImage, dispatch} = this.props;</p>\n<p>return (<br> <div classname=\"image-gallery\"><br>   <div classname=\"gallery-image\"></div></div></p>\n<pre><code>&lt;div&gt;\n  &lt;img src={selectedImage} /&gt;\n&lt;/div&gt;\n</code></pre><p>   <br>   <div classname=\"image-scroller\"></div></p>\n<pre><code>{images.map((image, index) =&gt; (\n</code></pre></li>\n</ul>\n<ul>\n<li><div key=\"{index}\"></div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> dispatch({type:’IMAGE_SELECTED’, image})}&gt;<br> <img src=\"{image}/\"><br></div><br>))}<br><br><br>)<br>}<br>}</li>\n</ul>\n<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>\n<p>export default connect(mapStateToProps)(Gallery)<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> 在`Gallery`组件中,我们将会在组件的属性中定义`dispatch`在`onClick`函数体中调用他,现在我们从便利角度考虑把他们放在一起,但是两者功能是一样的.一旦我们点击了缩略图,他将会通过reducer更新大图.</div><div class=\"line\">使用dispatch可以很方便的创建通用actions,但是很快我们会需要重用命名好的actions.为了这样做,可以使用”action creators”.</div><div class=\"line\"></div><div class=\"line\">####Action Creators</div><div class=\"line\">Action creators函数返回配置好的action对象.我们在`action.js`中添加第一个action creator.</div><div class=\"line\"></div><div class=\"line\">action.js</div></pre></td></tr></table></figure></p>\n<p> export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;</p>\n<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">这个方法经过<span class=\"keyword\">export</span>以后,可以直接在任何需要创建`selectImage` action地方导入!`selectImage`是纯函数，只能返回数据.他接收一个image作为参数,把image添加到action对象中，并返回.</div><div class=\"line\"></div><div class=\"line\">&gt;注意:我们正在返回一个单纯的javascript object,但是`image`的属性可能很古怪，如果你以前没有碰到这样的样式.从ES6的角度出发,如果你给一个对象传递一个类似这样的属性,隐含的意思是把`image:<span class=\"string\">'任何image包含的值'</span>`添加到最终返回的对象.超级好用!</div></pre></td></tr></table></figure></p>\n<p> import  * as GalleryActions from ‘./actions.js’;<br>[…]<br>onClick={() =&gt; dispatch(GalleryActions.selectImage(image))}<br> <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">this isn’t much than just using `dispatchti` though.</div><div class=\"line\"></div><div class=\"line\">幸运的是,这个模式很普遍,Redux在`bindActionCreators`函数里提供了一个更好的办法来完成这个功能.</div></pre></td></tr></table></figure></p>\n<p> import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>\n<ul>\n<li><p>import {bindActionCreators} from ‘redux’;</p>\n</li>\n<li><p>import  * as GalleryActions from ‘./actions.js’;</p>\n</li>\n</ul>\n<p>export class Gallery extends Component {<br>  constructor(props) {<br>    super(props);<br>    this.props.dispatch({type: ‘TEST’});<br>    console.log(props);<br>  }<br>  handleThumbClick(selectedImage) {<br>    this.setState({<br>      selectedImage<br>    })<br>  }<br>  render() {</p>\n<ul>\n<li>const {images, selectedImage, dispatch} = this.props;</li>\n</ul>\n<ul>\n<li>const {images, selectedImage, selectImage} = this.props;<br>return (<br> <div classname=\"image-gallery\"><br>   <div classname=\"gallery-image\"><pre><code>&lt;div&gt;\n  &lt;img src={selectedImage} /&gt;\n&lt;/div&gt;\n</code></pre>   </div><br>   <div classname=\"image-scroller\"><pre><code>{images.map((image, index) =&gt; (\n</code></pre></div></div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> dispatch({type:’IMAGE_SELECTED’, image})}&gt;</div></li>\n</ul>\n<ul>\n<li><div key=\"{index}\" onclick=\"{()\" ==\"\"> selectImage(image)}&gt;<br> <img src=\"{image}/\"><br></div><br>))}<br><br><br>)<br>}<br>}</li>\n</ul>\n<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>\n<p>+function mapActionCreatorsToProps(dispatch) {</p>\n<ul>\n<li>return bindActionCreators(GalleryActions, dispatch);<br>+}</li>\n</ul>\n<p>-export default connect(mapStateToProps)(Gallery)<br>+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> 我们已经添加了`mapActionCreatorsToProps`函数,他接收`dispatch`函数作为参数.返回`bindActionCreators`的调用结果,`GalleryActions`作为`bindActionCreators`的参数.现在如果你输出属性日志,就看不到`dispatch`作为参数,`selectImage`直接可以使用了.(这里相当于对dispatch和action进行了包装).</div><div class=\"line\"> </div><div class=\"line\"> 现在回顾一下,我们做了几件事:</div><div class=\"line\"> - 创建了一个reducer包含应用的默认初始状态(initial state),并且监听actions的执行.</div><div class=\"line\"> - 创建了一个store,把reducer具体化,提供一个分发器(dispatcher)可以分发action.</div><div class=\"line\"> - 把我们的Gallery组件关联到store的state.</div><div class=\"line\"> - 把store的state映射为属性(property)，传递给Gallery.</div><div class=\"line\"> - 映射一个动作创建器,Gallery可以简单的调用`selectImage(image)`,分发动作,应用状态将会更新.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">那么，我们怎么才能使用这些模式从远程资源加载数据呢？</div><div class=\"line\"></div><div class=\"line\">这个过程将会非常有趣!</div><div class=\"line\"></div><div class=\"line\">####异步活动？</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\">你可能在参加函数式编程的时候听说过”副作用”(side effects)这个名词,side effects是发生在应用的范围之外的东西.在我们舒适的肥皂泡里,side effect根本不是问题,但是当我们要到达一个远程资源,肥皂泡就被穿透了.有些事情我们就控制不了了,我们必须接受这个事实.(根据这段话，side effect 翻译为意想不到的事情，出乎意料的不受控制的事情更好)</div><div class=\"line\"></div><div class=\"line\">在Redux里,reducer没有Side effects.这意味着reducers不处理我们应用中的异步活动.我们不能使用reducers加载远程数据,因为reducers是纯函数,没有side effects.</div><div class=\"line\"></div><div class=\"line\">Redux很棒,如果你的应用里没有任何异步活动，你可以停下来,不用再往下看了.</div><div class=\"line\">如果你创建的应用比较大,可能你会从服务端加载数据,这时,当然要使用异步方式.</div><div class=\"line\"></div><div class=\"line\">&gt;**注意**： Redux其中一个最酷的地方是他非常小巧.他试图解决有限范围内的问题.大多数的应用需要解决很多问题!万幸,Reduc提供中间件概念,中间件存在于action-&gt;reducer-&gt;store的三角关系中,通过中间件的方式,可以导入诸如远程数据异步加载类似的功能.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">其中一个方法是使用`thunks`对象,在Redux中有 redux-thunk 中间件.Thunks非常厉害，但是可能会导致actions的序列很复杂,测试起来也是很大的挑战.</div><div class=\"line\"></div><div class=\"line\">考虑到我们的 图片浏览程序.当应用加载是,需要做:</div><div class=\"line\">- 从服务器请求图片数组</div><div class=\"line\">- 当图片加载完毕,显示提示消息</div><div class=\"line\">- 当远程数据返回以后,选择初始图片显示</div><div class=\"line\">- 处理可能出现的错误</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">这些事件都要在用户点击应用里的任何元素之前完成!</div><div class=\"line\">我们该怎么做呢？</div><div class=\"line\">redux-saga就是为此而诞生,为我们的应用提供绝佳的服务.</div><div class=\"line\"></div><div class=\"line\">redux-sage</div><div class=\"line\">___</div><div class=\"line\">redux-sage可以在Redux应用中操作异步actions.他提供中间件和趁手的方法使构建复杂的异步操作流程轻而易举.</div><div class=\"line\"></div><div class=\"line\">一个saga是一个Generator(生成器),Generator函数是ES2015新添加的特性.可能是你第一次遇到Generator函数,这样你会觉得有点古怪,可以参考(ruanyifeng文章).不要苦恼，如果你对此仍然很抓耳挠腮.使用redux-sage你不需要javascript异步编程的博士学位.</div><div class=\"line\"></div><div class=\"line\">因为使用了generators的缘故,我们能创建一个顺序执行的命令序列，用来描述复杂的异步操作流程(workflows).整个图片的加载流程序列如下：</div></pre></td></tr></table></figure></p>\n<p>   export function* loadImages() {<br>  try {<br>    const images = yield call(fetchImages);<br>    yield put({type: ‘IMAGES_LOADED’, images})<br>    yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>  } catch(error) {<br>    yield put({type: ‘IMAGE_LOAD_FAILURE’, error})<br>  }<br>}</p>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield call(loadImages);<br>  }<br>}<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">   ___</div><div class=\"line\">   </div><div class=\"line\">####第一个saga</div><div class=\"line\"></div><div class=\"line\">我们将开始一个简单的saga实例,然后配置他连接到我们的应用.在`src`创建一个文件</div><div class=\"line\">`saga.js`</div></pre></td></tr></table></figure></p>\n<p>   export function* sayHello() {<br>  console.log(‘hello’);<br>}<br>  <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们的saga是一个简单的generator函数.函数后面的`*`作为标志,他也被叫做”super star”.</div><div class=\"line\"></div><div class=\"line\">现在在`main.js`文件中导入新函数,并且执行他.</div></pre></td></tr></table></figure></p>\n<p>  import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>\n<p>+import {sayHello} from ‘./sagas’;<br>+sayHello();</p>\n<p>const store = createStore(reducer);</p>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">不管你盯住终端多长时间,“hello”永远不会出现.</div><div class=\"line\">这是因为`sayHello`是一个generator！Generator 不会立即执行.如果你把代码该为`sayHello().next();`你的“hello”就出现了.不用担心,我们不会总是调用`next`.正如Redux,redux-saga用来消除应用开发中的痛苦.</div><div class=\"line\"></div><div class=\"line\">配置 redux-sage</div><div class=\"line\">___</div></pre></td></tr></table></figure></p>\n<p>   import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>-import { createStore } from ‘redux’<br>+import { createStore, applyMiddleware } from ‘redux’<br>+import createSagaMiddleware from ‘redux-saga’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>\n<p>import {sayHello} from ‘./sagas’;<br>-sayHello()</p>\n<p>-const store = createStore(reducer);<br>+const store = createStore(</p>\n<ul>\n<li>reducer,</li>\n<li>applyMiddleware(createSagaMiddleware(sayHello))<br>+);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ___</div><div class=\"line\">  我们已从Redux导入了`applyMiddleware`函数.从redux-saga导入`createSagaMiddleware`函数.当我们创建store的时候,我们需要通过中间件提供Redux需要的功能.在这个实例中,我们会调用`applyMiddleware`函数,这个函数返回`createSagaMiddleware(sayHello)`的结果.在幕后,redux-saga加载`sayHello`函数,仪式性的调用`next`函数.</div><div class=\"line\">  </div><div class=\"line\">  应该可以在终端中看到提示消息了.</div><div class=\"line\">  现在让我们构建加载图片的saga</div><div class=\"line\">  </div><div class=\"line\">####通过Saga加载图片数据</div><div class=\"line\">___</div><div class=\"line\">我们将删除出sayHello saga,使用`loadImages` saga</div></pre></td></tr></table></figure></p>\n<p>  -export function* sayHello() {</p>\n<ul>\n<li>console.log(‘hello’);<br>-}</li>\n</ul>\n<p>+export function* loadImages() {</p>\n<ul>\n<li>console.log(‘load some images please’)<br>+}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">不要忘了更新`main.js`</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>\n<p>-import {sayHello} from ‘./sagas’;<br>+import {loadImages} from ‘./sagas’;</p>\n<p>const store = createStore(<br>  reducer,</p>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(sayHello))</li>\n</ul>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(loadImages))<br>);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">现在saga已经加载,在`saga.js`中添加`fetchImages`方法</div></pre></td></tr></table></figure></p>\n<pre><code>const API_KEY = &apos;a46a979f39c49975dbdd23b378e6d3d5&apos;;\n</code></pre><p>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>\n<p>const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href=\"https://farm${farm}.staticflickr.com/${server}/${id}\" target=\"_blank\" rel=\"external\">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br>   <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> `fetchImages`方法返回一个promise对象.我们将调用`fetchImages`,但是现在我们要使用`yield`关键字.通过黑暗艺术和巫术,generators理解Promise对象,正如终端输出的日志显示,我们已经收获了一个图片URLs的数组.看看`loadImages`的代码,他看起来像是典型的同步操作代码.`yield`关键字是秘制调味酱,让我们的代码用同步格式执行异步操作活动.</div><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\"> ####封装我们的异步API请求.</div><div class=\"line\"> </div><div class=\"line\"> 首先来定义一下需要使用的api.他没有什么特殊的地方,实际上他和早先加载Flickr images的代码是相同的.我们创建`flickr.js`文件</div></pre></td></tr></table></figure></p>\n<p>   const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;<br>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>\n<p>export const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href=\"https://farm${farm}.staticflickr.com/${server}/${id}\" target=\"_blank\" rel=\"external\">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};<br> <figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ___</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">严格意义上来说,不需要这么做,但是这会带来一定的好处.我们处在应用的边缘(boundaries <span class=\"keyword\">of</span> our application,意思是说在这里的代码可能是很多和远程服务器交互的代码，可能逻辑会很复杂),事情都有点乱.通过封装和远程API交互的逻辑,我们的代码将会很整洁,很容易更新.如果需要抹掉图片服务也会出奇的简单.</div><div class=\"line\"></div><div class=\"line\">我们的`saga.js`看起来是这个样子：</div></pre></td></tr></table></figure></p>\n<p>  import {fetchImages} from ‘./flickr’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们仍然需要在saga外获取数据,并且进入应用的state(使用异步获取的远程数据更新state).为了处理这个问题,我们将使用”effects”.</div><div class=\"line\"></div><div class=\"line\">####从saga来更新应用</div><div class=\"line\"></div><div class=\"line\">我们可以通过`dispatch`或者store作为参数来调用saga,但是这个方法时间一长就会给人造成些许的困扰.我们选择采用redux-saga提供的`put`方法.</div><div class=\"line\">首先我们更新`reducer.js`操作一个新的action类型`IMAGES_LOADED`.</div></pre></td></tr></table></figure></p>\n<p>const defaultState = {</p>\n<ul>\n<li>images: []<br>}</li>\n</ul>\n<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘IMAGE_SELECTED’:<br>      return {…state, selectedImage: action.image};</p>\n<ul>\n<li>case ‘IMAGES_LOADED’:</li>\n<li><p>return {…state, images: action.images};<br>default:<br>return state;<br>}<br>}     </p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">我们添加了新的分支,并从`<span class=\"keyword\">default</span>State`中删除了硬编码的URLs数据.`IMAGES_LOADED`分支现在返回一个更新的<span class=\"keyword\">state</span>,包含action的image数据.</div><div class=\"line\">下一步我们更新saga:</div></pre></td></tr></table></figure>\n<p>import {fetchImages} from ‘./flickr’;<br>+import {put} from ‘redux-saga/effects’;</p>\n</li>\n</ul>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();</p>\n<ul>\n<li>yield put({type: ‘IMAGES_LOADED’, images})<br>}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\"></div><div class=\"line\">导入`put`以后,我们在`loadImages`添加另外一行.他`yield` `put`函数调用的返回结果.在幕后,redux-saga 分发这些动作,reducer接收到了消息!</div><div class=\"line\">\t   怎样才能使用特定类型的action来触发一个saga?</div><div class=\"line\">\t   </div><div class=\"line\">####使用actions来触发saga工作流</div><div class=\"line\">___</div><div class=\"line\">Sagas变得越来越有用,因为我们有能力使用redux actions来触发工作流.当我们这样做,saga会在我们的应用中表现出更大的能力.首先我们创建一个新的saga.`watchForLoadImages`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import {fetchImages} from ‘./flickr’;<br>-import {put} from ‘redux-saga/effects’;<br>+import {put, take} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})<br>}</p>\n<p>+export function* watchForLoadImages() {</p>\n<ul>\n<li>while(true) {</li>\n<li>yield take(‘LOAD_IMAGES’);</li>\n<li>yield loadImages();</li>\n<li>}<br>+}   <figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  ___</div><div class=\"line\">新的saga使用的是<span class=\"keyword\">while</span>来保持一直激活和等待调用状态.在循环的内部,我们生成(<span class=\"keyword\">yield</span>)一个redux<span class=\"params\">-sage</span>调用方法:<span class=\"string\">`take`</span>.<span class=\"keyword\">Take</span>方法监听任何类型的actions,他也会使saga接受下一个<span class=\"keyword\">yield</span>.在上面的例子中我们调用了一个方法<span class=\"string\">`loadImages`</span>,初始化图片加载.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import “babel-polyfill”;</p>\n<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>\n<p>import Gallery from ‘./Gallery’;</p>\n<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>\n<p>-import {loadImages} from ‘./sagas’;<br>+import {loadImages} from ‘./watchForLoadImages’;</p>\n<p>const store = createStore(<br>  reducer,</p>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(loadImages))</li>\n</ul>\n<ul>\n<li>applyMiddleware(createSagaMiddleware(watchForLoadImages))<br>);</li>\n</ul>\n<p>ReactDOM.render(<br>  <provider store=\"{store}\"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">更新了`main.js`以后,应用不再加载图片,我们需要在action creators中添加`loadImages`的`action`.</div></pre></td></tr></table></figure></p>\n<p>export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;<br>+const LOAD_IMAGES = ‘LOAD_IMAGES’;</p>\n<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}</p>\n<p>+export function loadImages() {</p>\n<ul>\n<li>return {</li>\n<li>type: LOAD_IMAGES</li>\n<li>}<br>+}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">因为我们已经绑定了action creators(Action创建器),我们只需要在`Gallery`组件中调用这个action就可以了.</div><div class=\"line\"></div><div class=\"line\">####block(阻塞)和no-blocking(非阻塞)效应</div><div class=\"line\">现在我们的引用工作的足够好了,但是可能还有更多的问题需要考虑.`watchForLoadImages` saga包含 block effects.那么这到底是什么意思呢？这意味着在工作流中我们只能执行一次`LOAD_IMAGES`!在诸如我们现在构建的小型应用一样,这一点不太明显,实际上我们也仅仅加载了一次图片集.</div><div class=\"line\">实际上，普遍的做法是使用`fork` effect 代替  `yield` 来加载图片</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">使用`fork`助手(helper)函数,`watchForLoadImages`就变成了非阻塞saga了,再也不用考虑他是不是以前掉用过.redux-sagas 提供两个helpers,`takeEvery`和`takeLastest`（takeEvery监听多次action，不考虑是不是同一种action type,takeLatest只处理同一种action type的最后一次调用）.</div><div class=\"line\">####选择默认的图片</div><div class=\"line\">Sagas按照队列来执行acitons,所以添加更多的saga也很容易.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})</p>\n<ul>\n<li>yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>}</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">在 `loadImages`工作流上,我们可以yield put函数调用,action type是`IMAGE_SELECTED`.发送我们选择的图片(在这个例子中，发送的仅仅是图片的url的字符串).</div><div class=\"line\">####错误处理</div><div class=\"line\">如果在saga循环内部出现错误,我们要考虑提醒应用做出合理的回应.所有流程包装到try/catch语句块里就可以实现,捕获错误以后`put`一个提示信息作为`IMAGE_LOAD_FAILURE` action的内容.</div></pre></td></tr></table></figure></p>\n<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>\n<p>export function* loadImages() {</p>\n<ul>\n<li>try {<br> const images = yield fetchImages();<br> yield put({type: ‘IMAGES_LOADED’, images})<br> yield put({type: ‘IMAGE_SELECTED’, image: images[0]})</li>\n<li>} catch(error) {</li>\n<li>yield put({type: ‘IMAGE_LOAD_FAILURE’, error})</li>\n<li>}<br>}</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"emphasis\">___</span></div><div class=\"line\"><span class=\"section\">####Sagas的测试</span></div><div class=\"line\"><span class=\"emphasis\">___</span></div><div class=\"line\">在应用中使用Redux,测试变得相当的舒服. 看看我们的[<span class=\"string\">鹅蛋头系列课程</span>](<span class=\"link\">https://egghead.io/series/react-testing-cookbook</span>),可以了解到很多React的测试技术.</div><div class=\"line\">使用Redux-saga在棒的一个方面就是异步代码测试很容易.测试javascript异步代码真是一件苦差事.有了saga,我们不需要跳出引用的核心代码.Saga把javascript的痛点都抹掉了.是不是意味着我们要写更多的测试?对的.</div><div class=\"line\"></div><div class=\"line\">我们会使用<span class=\"code\">`tape`</span>组件,首先做一些配置工作.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.end();<br>});<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">添加所有需要的组件,现在我们添加一个测试.这个测试接收一个名称和一个函数作为形参.在测试的函数体内部代码块,我们创建了一个saga生成器代码实例.在这个实例里面我们尅是测试saga的每一个动作.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>generator.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">`assert.deepEqual`方法接收两个值,检查一下他们是不是深度相同(js对象的概念).第一行代码是`generator.next().value`的调用,这个调用使生成器从暂停中恢复,得到值.下一个值单单是一个`false`.我想看到他失败,最后一个参数描述了测试期待的行为.</div><div class=\"line\">在项目文件夹中命令行运行`npm test`看看结果:</div></pre></td></tr></table></figure>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n</li>\n</ul>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>generator.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">测试结果和预期的一样失败,结果有点意思.实际的结论是`&#123;TAKE:<span class=\"string\">'LOAD_IMAGES'</span>&#125;`,这是我们调用`take(<span class=\"string\">'LOAD_IMAGES'</span>)`受到的结果.实际上,我们的saga’可以yield一个对象来代替调用`take`.但是`take`添加了一些代码,让我们少敲些代码.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,</p>\n<ul>\n<li>false</li>\n</ul>\n<ul>\n<li><p>take(‘LOAD_IMAGES’),<br>‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">我们简单的调用`take`函数,就可以得到期待的结果了.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>\n<ul>\n<li>assert.deepEqual(</li>\n<li>gen.next().value,</li>\n<li>false,</li>\n<li>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’</li>\n<li><p>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">下一个测试使我们确信`loadImages`saga在流程的下一个阶段会被自动调用.</div><div class=\"line\">我们需要一个 false来检查结果.</div><div class=\"line\">更新一下saga代码,yield一个`loadImages` saga:</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">___</span></div><div class=\"line\">现在运行测试,将会看到下面结果：</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received\"><a href=\"#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received\" class=\"headerlink\" title=\"✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { _invoke: [Function: invoke] }<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">哼！`&#123; _invoke: [Function: invoke] &#125;`绝对不是我们yield take想要的结果.</div><div class=\"line\">有问题.幸运的是redux-saga可以使用诸如`fork`一样的`effects`来解决这个问题.`fork`,`take`和其他的effect方法返容易满足测试要求的简单对象.这些effects返回的对象是一个指导redux-saga进行任务执行的集合.这一点对于测试来说非常的优雅,因为我们不用担心类似远程服务请求的副作用.有了redux-saga,我们把注意点放到请求执行的命令上.</div><div class=\"line\">下面让我们更新一下saga,再一次使用`fork`.</div></pre></td></tr></table></figure></p>\n<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>\n<ul>\n<li>yield loadImages();</li>\n</ul>\n<ul>\n<li><p>yield fork(loadImages);</p>\n<p>}<br>}</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">___</div><div class=\"line\">这里使用`yield fork(loadImages)`直接代替`loadImages`.需要注意的是我们还没有执行`loadImages`,而是作为参数传递给`fork`.</div><div class=\"line\">再次运行`npm test`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1\"><a href=\"#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1\" class=\"headerlink\" title=\"✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received\"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { FORK: { args: [], context: null, fn: [Function: loadImages] } }<br><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">结果得到了一个单纯对象而不是一个函数调用.函数在浏览器端也同时加载了,但是我们现在可以轻松的在saga 工作流里测试这个步骤.</div></pre></td></tr></table></figure></p>\n<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>\n<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>\n<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>\n<p>  assert.deepEqual(<br>    generator.next().value,</p>\n<ul>\n<li>false,</li>\n</ul>\n<ul>\n<li><p>yield fork(loadImages),<br>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’<br>);</p>\n<p>assert.end();<br>});</p>\n<figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">___</div><div class=\"line\">测试`loadImages`saga是一样的,只需要把`yield fetchImages`更新为`yield fork(fetchImages)`.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>test(‘loadImages’, assert =&gt; {<br>  const gen = loadImages();</p>\n<p>  assert.deepEqual(<br>    gen.next().value,<br>    call(fetchImages),<br>    ‘loadImages should call the fetchImages api’<br>  );</p>\n<p>  const images = [0];</p>\n<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGES_LOADED’, images}),<br>    ‘loadImages should dispatch an IMAGES_LOADED action with the images’<br>  );</p>\n<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGE_SELECTED’, image: images[0]}),<br>    ‘loadImages should dispatch an IMAGE_SELECTED action with the first image’<br>  );</p>\n<p>  const error = ‘error’;</p>\n<p>  assert.deepEqual(<br>    gen.throw(error).value,<br>    put({type: ‘IMAGE_LOAD_FAILURE’, error}),<br>    ‘loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown’<br>  );</p>\n<p>  assert.end();<br>});<br>```</p>\n<hr>\n<p>特别注意最后一个<code>assert</code>.这个断言测试使用异常捕获代替生成器函数的next方法.另一个非常酷的地方是：可以传值.注意看代码,我们创建了<code>images</code>常量,并且传递到next函数.saga可以在接下来的任务序列中使用传递的值.<br> 太棒了,这种方法是测试异步编程的程序员梦寐以求的技术.</p>\n<p> #####接下来做什么？</p>\n<hr>\n<p> 你可以<a href=\"https://github.com/joelhooks/egghead-react-redux-image-gallery\" target=\"_blank\" rel=\"external\">fork一下这个例子的代码</a>.</p>\n<p> 如果你想扩充这个应用,可以做一下几个方面的工作.</p>\n<ul>\n<li>做一个幻灯显示下一张要显示的图片</li>\n<li>允许使用者搜索Flickr图片</li>\n<li>添加其他提供图片的API</li>\n<li>允许用户选择喜欢的API进行搜索.</li>\n</ul>\n<p>我们仅仅和生成器碰了一下面,但是即便如此,希望在联合使用redux-saga library,Redux和React的时候给你一些帮助.</p>\n"},{"title":"翻译|redux undo/redo  reducer增强组件","date":"2017-04-04T05:18:28.000Z","_content":"\n>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.\n\n\n#  redux undo/redo\n![](https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif)\n\n提示:你可以使用[redux-undo-boilerplate](https://github.com/omnidan/redux-undo-boilerplate)来开始项目.\n\n## Installation\n```\nnpm install --save redux-undo\n```\n\n## API\n\n```\nimport undoable from 'redux-undo';\nundoable(reducer)\nundoable(reducer, config)\n```\n\n## 让你的reducers变得可以重做\n`redux-undo`是一个reducer增强组件,它提供了`undoable`函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.\n\n**注意：**如果在`state.counter`之前接入,你必须要在包装`reducer`之后接入`state.coutner.present`.\n\n首先导入`redux-undo`\n```\n // Redux utility functions \nimport { combineReducers } from 'redux';\n// redux-undo higher-order reducer \nimport undoable from 'redux-undo';\n```\n\n接着,添加`undoable`到你的reducer\n```\ncombineReducers({\n  counter: undoable(counter)\n})\n```\n\n`配置项`想这样传递\n```\ncombineReducers({\n  counter: undoable(counter, {\n    limit: 10 // set a limit for the history \n  })\n})\n```\n\n## 历史API\n\n使用reducer包装你的reducer想这样\n```\n {\n  past: [...pastStatesHere...],\n  present: {...currentStateHere...},\n  future: [...futureStatesHere...]\n}\n```\n\n现在你可以使用`state.present`获取当前的state\n获取所有过去的state使用`state.past`.\n\n## Undo/Redo Actions\n\n首先导入undo/redo action creators\n```\nimport { ActionCreators } from 'redux-undo';\n```\n\n然后就可以使用`store.dispatch()`和undo/redo action creators来执行undo/redo操作.\n```\nstore.dispatch(ActionCreators.undo()) // undo the last action \nstore.dispatch(ActionCreators.redo()) // redo the last action \n \nstore.dispatch(ActionCreators.jumpToPast(index)) // jump to requested index in the past[] array \nstore.dispatch(ActionCreators.jumpToFuture(index)) // jump to requested index in the future[] array \n```\n\n## 配置\n配置对象传递给`undoable()`(值是默认值)\n\n```\nundoable(reducer, {\n  limit: false, // set to a number to turn on a limit for the history \n \n  filter: () => true, // see `Filtering Actions` section \n \n  undoType: ActionTypes.UNDO, // define a custom action type for this undo action \n  redoType: ActionTypes.REDO, // define a custom action type for this redo action \n \n  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action type for this jumpToPast action \n  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action type for this jumpToFuture action \n \n  initialState: undefined, // initial state (e.g. for loading) \n  initTypes: ['@@redux/INIT', '@@INIT'] // history will be (re)set upon init action type \n  initialHistory: { // initial history (e.g. for loading) \n    past: [],\n    present: config.initialState,\n    future: []\n  },\n \n  debug: false, // set to `true` to turn on debugging \n})\n```\n\n## 过滤Actions\n如果你不想包含每一步的action,可以传递一个函数到`undoable`\n```\nundoable(reducer, function filterActions(action, currentState, previousState) {\n  return action.type === SOME_ACTION; // only add to history if action is SOME_ACTION只有some_action的action才能记录 \n})\n \n// or you could do... \n \nundoable(reducer, function filterState(action, currentState, previousState) {\n  return currentState !== previousState; // only add to history if state changed只有state变化的才能记录重做 \n})\n```\n\n或者你可以使用`distinctState`,`includeAction`,`excludeAction`助手函数\n```\nimport undoable, { distinctState, includeAction, excludeAction } from 'redux-undo';\n```\n\n现在你可以使用助手函数了,相当简单\n```\nundoable(reducer, { filter: includeAction(SOME_ACTION) })\nundoable(reducer, { filter: excludeAction(SOME_ACTION) })\n \n// or you could do... \n \nundoable(reducer, { filter: distinctState() })\n```\n\n甚至还支持数组\n```\n undoable(reducer, { filter: includeAction([SOME_ACTION, SOME_OTHER_ACTION]) })\nundoable(reducer, { filter: excludeAction([SOME_ACTION, SOME_OTHER_ACTION]) })\n```\n\n## 有什么魔法？怎么工作的\nRedux文档中的[`实现Undo历史的方案`](https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html)解释了redux-undo工作的具体细节.","source":"_posts/翻译-redux-undo-redo-reducer增强组件.md","raw":"---\ntitle: 翻译|redux undo/redo  reducer增强组件\ndate: 2017-04-04 13:18:28\ncategories: 翻译\ntags: Redux\n---\n\n>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.\n\n\n#  redux undo/redo\n![](https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif)\n\n提示:你可以使用[redux-undo-boilerplate](https://github.com/omnidan/redux-undo-boilerplate)来开始项目.\n\n## Installation\n```\nnpm install --save redux-undo\n```\n\n## API\n\n```\nimport undoable from 'redux-undo';\nundoable(reducer)\nundoable(reducer, config)\n```\n\n## 让你的reducers变得可以重做\n`redux-undo`是一个reducer增强组件,它提供了`undoable`函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.\n\n**注意：**如果在`state.counter`之前接入,你必须要在包装`reducer`之后接入`state.coutner.present`.\n\n首先导入`redux-undo`\n```\n // Redux utility functions \nimport { combineReducers } from 'redux';\n// redux-undo higher-order reducer \nimport undoable from 'redux-undo';\n```\n\n接着,添加`undoable`到你的reducer\n```\ncombineReducers({\n  counter: undoable(counter)\n})\n```\n\n`配置项`想这样传递\n```\ncombineReducers({\n  counter: undoable(counter, {\n    limit: 10 // set a limit for the history \n  })\n})\n```\n\n## 历史API\n\n使用reducer包装你的reducer想这样\n```\n {\n  past: [...pastStatesHere...],\n  present: {...currentStateHere...},\n  future: [...futureStatesHere...]\n}\n```\n\n现在你可以使用`state.present`获取当前的state\n获取所有过去的state使用`state.past`.\n\n## Undo/Redo Actions\n\n首先导入undo/redo action creators\n```\nimport { ActionCreators } from 'redux-undo';\n```\n\n然后就可以使用`store.dispatch()`和undo/redo action creators来执行undo/redo操作.\n```\nstore.dispatch(ActionCreators.undo()) // undo the last action \nstore.dispatch(ActionCreators.redo()) // redo the last action \n \nstore.dispatch(ActionCreators.jumpToPast(index)) // jump to requested index in the past[] array \nstore.dispatch(ActionCreators.jumpToFuture(index)) // jump to requested index in the future[] array \n```\n\n## 配置\n配置对象传递给`undoable()`(值是默认值)\n\n```\nundoable(reducer, {\n  limit: false, // set to a number to turn on a limit for the history \n \n  filter: () => true, // see `Filtering Actions` section \n \n  undoType: ActionTypes.UNDO, // define a custom action type for this undo action \n  redoType: ActionTypes.REDO, // define a custom action type for this redo action \n \n  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action type for this jumpToPast action \n  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action type for this jumpToFuture action \n \n  initialState: undefined, // initial state (e.g. for loading) \n  initTypes: ['@@redux/INIT', '@@INIT'] // history will be (re)set upon init action type \n  initialHistory: { // initial history (e.g. for loading) \n    past: [],\n    present: config.initialState,\n    future: []\n  },\n \n  debug: false, // set to `true` to turn on debugging \n})\n```\n\n## 过滤Actions\n如果你不想包含每一步的action,可以传递一个函数到`undoable`\n```\nundoable(reducer, function filterActions(action, currentState, previousState) {\n  return action.type === SOME_ACTION; // only add to history if action is SOME_ACTION只有some_action的action才能记录 \n})\n \n// or you could do... \n \nundoable(reducer, function filterState(action, currentState, previousState) {\n  return currentState !== previousState; // only add to history if state changed只有state变化的才能记录重做 \n})\n```\n\n或者你可以使用`distinctState`,`includeAction`,`excludeAction`助手函数\n```\nimport undoable, { distinctState, includeAction, excludeAction } from 'redux-undo';\n```\n\n现在你可以使用助手函数了,相当简单\n```\nundoable(reducer, { filter: includeAction(SOME_ACTION) })\nundoable(reducer, { filter: excludeAction(SOME_ACTION) })\n \n// or you could do... \n \nundoable(reducer, { filter: distinctState() })\n```\n\n甚至还支持数组\n```\n undoable(reducer, { filter: includeAction([SOME_ACTION, SOME_OTHER_ACTION]) })\nundoable(reducer, { filter: excludeAction([SOME_ACTION, SOME_OTHER_ACTION]) })\n```\n\n## 有什么魔法？怎么工作的\nRedux文档中的[`实现Undo历史的方案`](https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html)解释了redux-undo工作的具体细节.","slug":"翻译-redux-undo-redo-reducer增强组件","published":1,"updated":"2017-06-03T20:07:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjbvx5flk000bqrez8uat8z1j","content":"<blockquote>\n<p>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.</p>\n</blockquote>\n<h1 id=\"redux-undo-redo\"><a href=\"#redux-undo-redo\" class=\"headerlink\" title=\"redux undo/redo\"></a>redux undo/redo</h1><p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif\" alt=\"\"></p>\n<p>提示:你可以使用<a href=\"https://github.com/omnidan/redux-undo-boilerplate\" target=\"_blank\" rel=\"external\">redux-undo-boilerplate</a>来开始项目.</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save redux-undo</span></div></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> undoable from <span class=\"string\">'redux-undo'</span>;</div><div class=\"line\">undoable(reducer)</div><div class=\"line\">undoable(reducer, <span class=\"built_in\">config</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"让你的reducers变得可以重做\"><a href=\"#让你的reducers变得可以重做\" class=\"headerlink\" title=\"让你的reducers变得可以重做\"></a>让你的reducers变得可以重做</h2><p><code>redux-undo</code>是一个reducer增强组件,它提供了<code>undoable</code>函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.</p>\n<p><strong>注意：</strong>如果在<code>state.counter</code>之前接入,你必须要在包装<code>reducer</code>之后接入<code>state.coutner.present</code>.</p>\n<p>首先导入<code>redux-undo</code><br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// Redux utility functions </span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"comment\">// redux-undo higher-order reducer </span></div><div class=\"line\"><span class=\"keyword\">import</span> undoable <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>接着,添加<code>undoable</code>到你的reducer<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">combineReducers</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">counter</span>: <span class=\"built_in\">undoable</span>(counter)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>配置项</code>想这样传递<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">combineReducers</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">counter</span>: <span class=\"built_in\">undoable</span>(counter, &#123;</div><div class=\"line\">    limit: 10 // set a limit for the history </div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"历史API\"><a href=\"#历史API\" class=\"headerlink\" title=\"历史API\"></a>历史API</h2><p>使用reducer包装你的reducer想这样<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123;</div><div class=\"line\">  past: [...pastStatesHere...],</div><div class=\"line\">  present: <span class=\"meta\">&#123;...currentStateHere...&#125;</span>,</div><div class=\"line\">  future: [...futureStatesHere...]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在你可以使用<code>state.present</code>获取当前的state<br>获取所有过去的state使用<code>state.past</code>.</p>\n<h2 id=\"Undo-Redo-Actions\"><a href=\"#Undo-Redo-Actions\" class=\"headerlink\" title=\"Undo/Redo Actions\"></a>Undo/Redo Actions</h2><p>首先导入undo/redo action creators<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>然后就可以使用<code>store.dispatch()</code>和undo/redo action creators来执行undo/redo操作.<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.undo()</span>) <span class=\"comment\">// undo the last action </span></div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.redo()</span>) <span class=\"comment\">// redo the last action </span></div><div class=\"line\"> </div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.jumpToPast(index)</span>) <span class=\"comment\">// jump to requested index in the past[] array </span></div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.jumpToFuture(index)</span>) <span class=\"comment\">// jump to requested index in the future[] array</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置对象传递给<code>undoable()</code>(值是默认值)</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">undoable(reducer, &#123;</div><div class=\"line\">  limi<span class=\"variable\">t:</span> false, // <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"keyword\">a</span> <span class=\"keyword\">number</span> <span class=\"keyword\">to</span> turn <span class=\"keyword\">on</span> <span class=\"keyword\">a</span> limit <span class=\"keyword\">for</span> the <span class=\"keyword\">history</span> </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"built_in\">filter</span>: () =&gt; true, // see `Filtering Actions` section </div><div class=\"line\"> </div><div class=\"line\">  undoType: ActionTypes.UNDO, // define <span class=\"keyword\">a</span> custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">undo</span> action </div><div class=\"line\">  redoType: ActionTypes.REDO, // define <span class=\"keyword\">a</span> custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">redo</span> action </div><div class=\"line\"> </div><div class=\"line\">  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this jumpToPast action </div><div class=\"line\">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this jumpToFuture action </div><div class=\"line\"> </div><div class=\"line\">  initialState: undefined, // initial state (<span class=\"keyword\">e</span>.g. <span class=\"keyword\">for</span> loading) </div><div class=\"line\">  initType<span class=\"variable\">s:</span> [<span class=\"string\">'@@redux/INIT'</span>, <span class=\"string\">'@@INIT'</span>] // <span class=\"keyword\">history</span> will <span class=\"keyword\">be</span> (re)<span class=\"keyword\">set</span> upon init action <span class=\"built_in\">type</span> </div><div class=\"line\">  initialHistory: &#123; // initial <span class=\"keyword\">history</span> (<span class=\"keyword\">e</span>.g. <span class=\"keyword\">for</span> loading) </div><div class=\"line\">    pas<span class=\"variable\">t:</span> [],</div><div class=\"line\">    presen<span class=\"variable\">t:</span> config.initialState,</div><div class=\"line\">    future: []</div><div class=\"line\">  &#125;,</div><div class=\"line\"> </div><div class=\"line\">  debu<span class=\"variable\">g:</span> false, // <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> `true` <span class=\"keyword\">to</span> turn <span class=\"keyword\">on</span> debugging </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"过滤Actions\"><a href=\"#过滤Actions\" class=\"headerlink\" title=\"过滤Actions\"></a>过滤Actions</h2><p>如果你不想包含每一步的action,可以传递一个函数到<code>undoable</code><br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">undoable(reducer, <span class=\"keyword\">function</span> <span class=\"title\">filterActions</span>(action, currentState, previousState) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">action.type</span> === SOME_ACTION; // only add to history <span class=\"keyword\">if</span> action <span class=\"keyword\">is</span> SOME_ACTION只有some_action的action才能记录 </div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">// <span class=\"keyword\">or</span> you could <span class=\"keyword\">do</span>... </div><div class=\"line\"> </div><div class=\"line\">undoable(reducer, <span class=\"keyword\">function</span> <span class=\"title\">filterState</span>(action, currentState, previousState) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">currentState</span> !== previousState; // only add to history <span class=\"keyword\">if</span> state changed只有state变化的才能记录重做 </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>或者你可以使用<code>distinctState</code>,<code>includeAction</code>,<code>excludeAction</code>助手函数<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> undoable, &#123; distinctState, includeAction, excludeAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>现在你可以使用助手函数了,相当简单<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: includeAction(SOME_ACTION)</span></span> &#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: excludeAction(SOME_ACTION)</span></span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// or you could do... </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: distinctState()</span></span> &#125;)</div></pre></td></tr></table></figure></p>\n<p>甚至还支持数组<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-tag\">undoable</span>(<span class=\"selector-tag\">reducer</span>, &#123; <span class=\"attribute\">filter</span>: <span class=\"built_in\">includeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class=\"line\"><span class=\"selector-tag\">undoable</span>(<span class=\"selector-tag\">reducer</span>, &#123; <span class=\"attribute\">filter</span>: <span class=\"built_in\">excludeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"有什么魔法？怎么工作的\"><a href=\"#有什么魔法？怎么工作的\" class=\"headerlink\" title=\"有什么魔法？怎么工作的\"></a>有什么魔法？怎么工作的</h2><p>Redux文档中的<a href=\"https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html\" target=\"_blank\" rel=\"external\"><code>实现Undo历史的方案</code></a>解释了redux-undo工作的具体细节.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.</p>\n</blockquote>\n<h1 id=\"redux-undo-redo\"><a href=\"#redux-undo-redo\" class=\"headerlink\" title=\"redux undo/redo\"></a>redux undo/redo</h1><p><img src=\"https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif\" alt=\"\"></p>\n<p>提示:你可以使用<a href=\"https://github.com/omnidan/redux-undo-boilerplate\" target=\"_blank\" rel=\"external\">redux-undo-boilerplate</a>来开始项目.</p>\n<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save redux-undo</span></div></pre></td></tr></table></figure>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> undoable from <span class=\"string\">'redux-undo'</span>;</div><div class=\"line\">undoable(reducer)</div><div class=\"line\">undoable(reducer, <span class=\"built_in\">config</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"让你的reducers变得可以重做\"><a href=\"#让你的reducers变得可以重做\" class=\"headerlink\" title=\"让你的reducers变得可以重做\"></a>让你的reducers变得可以重做</h2><p><code>redux-undo</code>是一个reducer增强组件,它提供了<code>undoable</code>函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.</p>\n<p><strong>注意：</strong>如果在<code>state.counter</code>之前接入,你必须要在包装<code>reducer</code>之后接入<code>state.coutner.present</code>.</p>\n<p>首先导入<code>redux-undo</code><br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">// Redux utility functions </span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"comment\">// redux-undo higher-order reducer </span></div><div class=\"line\"><span class=\"keyword\">import</span> undoable <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>接着,添加<code>undoable</code>到你的reducer<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">combineReducers</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">counter</span>: <span class=\"built_in\">undoable</span>(counter)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>配置项</code>想这样传递<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">combineReducers</span>(&#123;</div><div class=\"line\">  <span class=\"attribute\">counter</span>: <span class=\"built_in\">undoable</span>(counter, &#123;</div><div class=\"line\">    limit: 10 // set a limit for the history </div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"历史API\"><a href=\"#历史API\" class=\"headerlink\" title=\"历史API\"></a>历史API</h2><p>使用reducer包装你的reducer想这样<br><figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123;</div><div class=\"line\">  past: [...pastStatesHere...],</div><div class=\"line\">  present: <span class=\"meta\">&#123;...currentStateHere...&#125;</span>,</div><div class=\"line\">  future: [...futureStatesHere...]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在你可以使用<code>state.present</code>获取当前的state<br>获取所有过去的state使用<code>state.past</code>.</p>\n<h2 id=\"Undo-Redo-Actions\"><a href=\"#Undo-Redo-Actions\" class=\"headerlink\" title=\"Undo/Redo Actions\"></a>Undo/Redo Actions</h2><p>首先导入undo/redo action creators<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; ActionCreators &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>然后就可以使用<code>store.dispatch()</code>和undo/redo action creators来执行undo/redo操作.<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.undo()</span>) <span class=\"comment\">// undo the last action </span></div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.redo()</span>) <span class=\"comment\">// redo the last action </span></div><div class=\"line\"> </div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.jumpToPast(index)</span>) <span class=\"comment\">// jump to requested index in the past[] array </span></div><div class=\"line\">store.dispatch<span class=\"comment\">(ActionCreators.jumpToFuture(index)</span>) <span class=\"comment\">// jump to requested index in the future[] array</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置对象传递给<code>undoable()</code>(值是默认值)</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">undoable(reducer, &#123;</div><div class=\"line\">  limi<span class=\"variable\">t:</span> false, // <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"keyword\">a</span> <span class=\"keyword\">number</span> <span class=\"keyword\">to</span> turn <span class=\"keyword\">on</span> <span class=\"keyword\">a</span> limit <span class=\"keyword\">for</span> the <span class=\"keyword\">history</span> </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"built_in\">filter</span>: () =&gt; true, // see `Filtering Actions` section </div><div class=\"line\"> </div><div class=\"line\">  undoType: ActionTypes.UNDO, // define <span class=\"keyword\">a</span> custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">undo</span> action </div><div class=\"line\">  redoType: ActionTypes.REDO, // define <span class=\"keyword\">a</span> custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this <span class=\"keyword\">redo</span> action </div><div class=\"line\"> </div><div class=\"line\">  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this jumpToPast action </div><div class=\"line\">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action <span class=\"built_in\">type</span> <span class=\"keyword\">for</span> this jumpToFuture action </div><div class=\"line\"> </div><div class=\"line\">  initialState: undefined, // initial state (<span class=\"keyword\">e</span>.g. <span class=\"keyword\">for</span> loading) </div><div class=\"line\">  initType<span class=\"variable\">s:</span> [<span class=\"string\">'@@redux/INIT'</span>, <span class=\"string\">'@@INIT'</span>] // <span class=\"keyword\">history</span> will <span class=\"keyword\">be</span> (re)<span class=\"keyword\">set</span> upon init action <span class=\"built_in\">type</span> </div><div class=\"line\">  initialHistory: &#123; // initial <span class=\"keyword\">history</span> (<span class=\"keyword\">e</span>.g. <span class=\"keyword\">for</span> loading) </div><div class=\"line\">    pas<span class=\"variable\">t:</span> [],</div><div class=\"line\">    presen<span class=\"variable\">t:</span> config.initialState,</div><div class=\"line\">    future: []</div><div class=\"line\">  &#125;,</div><div class=\"line\"> </div><div class=\"line\">  debu<span class=\"variable\">g:</span> false, // <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> `true` <span class=\"keyword\">to</span> turn <span class=\"keyword\">on</span> debugging </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"过滤Actions\"><a href=\"#过滤Actions\" class=\"headerlink\" title=\"过滤Actions\"></a>过滤Actions</h2><p>如果你不想包含每一步的action,可以传递一个函数到<code>undoable</code><br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">undoable(reducer, <span class=\"keyword\">function</span> <span class=\"title\">filterActions</span>(action, currentState, previousState) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">action.type</span> === SOME_ACTION; // only add to history <span class=\"keyword\">if</span> action <span class=\"keyword\">is</span> SOME_ACTION只有some_action的action才能记录 </div><div class=\"line\">&#125;)</div><div class=\"line\"> </div><div class=\"line\">// <span class=\"keyword\">or</span> you could <span class=\"keyword\">do</span>... </div><div class=\"line\"> </div><div class=\"line\">undoable(reducer, <span class=\"keyword\">function</span> <span class=\"title\">filterState</span>(action, currentState, previousState) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">currentState</span> !== previousState; // only add to history <span class=\"keyword\">if</span> state changed只有state变化的才能记录重做 </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>或者你可以使用<code>distinctState</code>,<code>includeAction</code>,<code>excludeAction</code>助手函数<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> undoable, &#123; distinctState, includeAction, excludeAction &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>\n<p>现在你可以使用助手函数了,相当简单<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: includeAction(SOME_ACTION)</span></span> &#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: excludeAction(SOME_ACTION)</span></span> &#125;)</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// or you could do... </span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"title\">undoable</span><span class=\"params\">(reducer, &#123; filter: distinctState()</span></span> &#125;)</div></pre></td></tr></table></figure></p>\n<p>甚至还支持数组<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"selector-tag\">undoable</span>(<span class=\"selector-tag\">reducer</span>, &#123; <span class=\"attribute\">filter</span>: <span class=\"built_in\">includeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class=\"line\"><span class=\"selector-tag\">undoable</span>(<span class=\"selector-tag\">reducer</span>, &#123; <span class=\"attribute\">filter</span>: <span class=\"built_in\">excludeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"有什么魔法？怎么工作的\"><a href=\"#有什么魔法？怎么工作的\" class=\"headerlink\" title=\"有什么魔法？怎么工作的\"></a>有什么魔法？怎么工作的</h2><p>Redux文档中的<a href=\"https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html\" target=\"_blank\" rel=\"external\"><code>实现Undo历史的方案</code></a>解释了redux-undo工作的具体细节.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjbvx5fl10002qrez4skzuxy9","category_id":"cjbvx5fl90005qrezzmayf42y","_id":"cjbvx5flm000dqrez86jmgf4w"},{"post_id":"cjbvx5fl70004qrezpsnamv4b","category_id":"cjbvx5fl90005qrezzmayf42y","_id":"cjbvx5flp000iqrezigxfeuee"},{"post_id":"cjbvx5fla0006qrez07iq463u","category_id":"cjbvx5fl90005qrezzmayf42y","_id":"cjbvx5flq000lqrezwsc5dfk8"},{"post_id":"cjbvx5fle0009qrezl5x96d4t","category_id":"cjbvx5flp000jqrez5xyxnqcw","_id":"cjbvx5fls000pqrezk9wyqc1w"},{"post_id":"cjbvx5flk000bqrez8uat8z1j","category_id":"cjbvx5flp000jqrez5xyxnqcw","_id":"cjbvx5flt000sqrezovz6g295"}],"PostTag":[{"post_id":"cjbvx5fkv0000qrez38u07dof","tag_id":"cjbvx5fl40003qrezfc9zedjw","_id":"cjbvx5flo000fqrezwlqwzsq9"},{"post_id":"cjbvx5fkv0000qrez38u07dof","tag_id":"cjbvx5fld0008qrezc617j4fw","_id":"cjbvx5flo000gqrezkrs10gjs"},{"post_id":"cjbvx5fl10002qrez4skzuxy9","tag_id":"cjbvx5fll000cqrezgs6zrhvl","_id":"cjbvx5flp000kqrezc5tcxaqb"},{"post_id":"cjbvx5fl70004qrezpsnamv4b","tag_id":"cjbvx5flp000hqreztvntobdr","_id":"cjbvx5flt000qqrezkugz5oip"},{"post_id":"cjbvx5fl70004qrezpsnamv4b","tag_id":"cjbvx5fll000cqrezgs6zrhvl","_id":"cjbvx5flt000rqrezkgbgqotr"},{"post_id":"cjbvx5fla0006qrez07iq463u","tag_id":"cjbvx5fls000oqrezkqs892gp","_id":"cjbvx5flu000uqrezij7jmdc4"},{"post_id":"cjbvx5flc0007qrezt2thyeq9","tag_id":"cjbvx5fls000oqrezkqs892gp","_id":"cjbvx5fm5000wqrezsygcj65j"},{"post_id":"cjbvx5fle0009qrezl5x96d4t","tag_id":"cjbvx5fls000oqrezkqs892gp","_id":"cjbvx5fma000zqrezit3l0t0h"},{"post_id":"cjbvx5fle0009qrezl5x96d4t","tag_id":"cjbvx5fm7000xqrez0on014gq","_id":"cjbvx5fma0010qrez6shtkd9f"},{"post_id":"cjbvx5flk000bqrez8uat8z1j","tag_id":"cjbvx5fls000oqrezkqs892gp","_id":"cjbvx5fmb0011qrez9qtdkjn3"}],"Tag":[{"name":"javacript","_id":"cjbvx5fl40003qrezfc9zedjw"},{"name":"array","_id":"cjbvx5fld0008qrezc617j4fw"},{"name":"react","_id":"cjbvx5fll000cqrezgs6zrhvl"},{"name":"javascript","_id":"cjbvx5flp000hqreztvntobdr"},{"name":"Redux","_id":"cjbvx5fls000oqrezkqs892gp"},{"name":"saga","_id":"cjbvx5fm7000xqrez0on014gq"}]}}